import { E as ElIcon } from "../../base-BXVDO6W4.js";
import { E as ElButton } from "../../el-button-v5lTrsRk.js";
import { E as ElCard } from "../../el-card-DOHoc4zP.js";
import { defineComponent, ref, onMounted, nextTick, onUnmounted, watch, createElementBlock, openBlock, normalizeStyle, normalizeClass, unref, createElementVNode, renderSlot, createCommentVNode, createVNode, TransitionGroup, withCtx, Fragment, renderList, createBlock, toDisplayString } from "vue";
import { e as arrow_left_bold_default, f as arrow_right_bold_default } from "../../index-CnlpUR18.js";
import { d as debounce } from "../../curry-D3P8tFW_.js";
import { _ as _export_sfc } from "../../_plugin-vue_export-helper-1tPrXgE0.js";
import './index-attachments.vue';const _hoisted_1 = { class: "elx-attachments-background" };
const _hoisted_2 = {
  key: 0,
  class: "elx-attachments-background-start"
};
const _hoisted_3 = {
  key: 1,
  class: "elx-attachments-background-end"
};
const TOLERANCE = 1;
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "index-attachments",
  props: {
    items: { default: () => [] },
    overflow: { default: "scrollX" },
    listStyle: { default: () => ({}) },
    limit: {},
    hideUpload: { type: Boolean },
    uploadIconSize: {},
    dragTarget: {}
  },
  setup(__props) {
    const props = __props;
    const containerRef = ref(null);
    const wrapperRef = ref(null);
    const firstMount = ref(false);
    const pingStart = ref(false);
    const pingEnd = ref(false);
    function checkPing() {
      const containerEle = containerRef.value;
      if (!containerEle)
        return;
      if (props.overflow === "scrollX") {
        pingStart.value = Math.abs(containerEle.scrollLeft) >= TOLERANCE;
        pingEnd.value = containerEle.scrollWidth - containerEle.clientWidth - Math.abs(containerEle.scrollLeft) >= TOLERANCE;
      } else if (props.overflow === "scrollY") {
        pingStart.value = containerEle.scrollTop !== 0;
        pingEnd.value = containerEle.scrollHeight - containerEle.clientHeight !== containerEle.scrollTop;
      } else {
        pingStart.value = false;
        pingEnd.value = false;
      }
    }
    function onScrollOffset(offset) {
      const containerEle = containerRef.value;
      if (containerEle) {
        containerEle.scrollTo({
          left: props.overflow === "scrollX" ? containerEle.scrollLeft + offset * containerEle.clientWidth : containerEle.scrollLeft,
          top: props.overflow === "scrollY" ? containerEle.scrollTop + offset * containerEle.clientHeight : containerEle.scrollTop,
          behavior: "smooth"
        });
      }
    }
    function onScrollLeft() {
      onScrollOffset(-1);
    }
    function onScrollRight() {
      onScrollOffset(1);
    }
    const debouncedCheckPing = debounce({ delay: 100 }, checkPing);
    onMounted(() => {
      firstMount.value = true;
      nextTick(() => {
        checkPing();
      });
      window.addEventListener("resize", debouncedCheckPing);
    });
    onUnmounted(() => {
      firstMount.value = false;
      window.removeEventListener("resize", debouncedCheckPing);
    });
    watch(
      () => [props.overflow, props.items.length],
      () => {
        nextTick(() => {
          checkPing();
        });
      },
      {
        immediate: true,
        // 组件初始化时立即调用一次
        deep: true
        // 如果 items 是对象或数组，需要深度监听
      }
    );
    function onDragStart() {
      const containerEle = containerRef.value;
      if (containerEle) {
        containerEle.style.transition = "none";
      }
    }
    function onDragEnd() {
      const containerEle = containerRef.value;
      if (containerEle) {
        containerEle.style.transition = "";
      }
    }
    return (_ctx, _cache) => {
      const _component_el_card = ElCard;
      const _component_el_icon = ElIcon;
      const _component_el_button = ElButton;
      return openBlock(), createElementBlock("div", {
        ref_key: "wrapperRef",
        ref: wrapperRef,
        class: normalizeClass(["elx-attachments-wrapper", {
          "elx-attachments-overflow-ping-start": _ctx.overflow === "scrollX" && unref(pingStart),
          "elx-attachments-overflow-ping-end": _ctx.overflow === "scrollX" && unref(pingEnd)
        }]),
        style: normalizeStyle(_ctx.listStyle),
        onDragstart: onDragStart,
        onDragend: onDragEnd
      }, [
        createElementVNode("div", _hoisted_1, [
          _ctx.overflow === "scrollX" && unref(pingStart) ? (openBlock(), createElementBlock("div", _hoisted_2)) : createCommentVNode("", true),
          _ctx.overflow === "scrollX" && unref(pingEnd) ? (openBlock(), createElementBlock("div", _hoisted_3)) : createCommentVNode("", true)
        ]),
        createElementVNode("div", {
          ref_key: "containerRef",
          ref: containerRef,
          class: normalizeClass(["elx-attachments", {
            [`elx-attachments-overflow-${_ctx.overflow}`]: _ctx.overflow
          }]),
          style: normalizeStyle({
            ..._ctx.overflow === "scrollX" ? { whiteSpace: "nowrap", overflowX: "auto", overflowY: "hidden" } : {},
            ..._ctx.overflow === "scrollY" ? { overflowX: "hidden", overflowY: "auto" } : {},
            ..._ctx.overflow === "wrap" ? { display: "flex", flexWrap: "wrap" } : {}
          }),
          onScroll: checkPing
        }, [
          createVNode(TransitionGroup, {
            name: "card-motion",
            tag: "div",
            css: true,
            "move-class": "card-motion-move"
          }, {
            default: withCtx(() => [
              (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.items, (item) => {
                return openBlock(), createBlock(_component_el_card, {
                  key: item.uid,
                  class: "elx-attachments-card"
                }, {
                  header: withCtx(() => [
                    createElementVNode("span", null, toDisplayString(item.name), 1)
                  ]),
                  default: withCtx(() => [
                    createElementVNode("div", null, toDisplayString(item.description), 1)
                  ]),
                  _: 2
                }, 1024);
              }), 128))
            ]),
            _: 1
          })
        ], 38),
        renderSlot(_ctx.$slots, "prev-button", {
          show: _ctx.overflow === "scrollX" && unref(pingStart),
          onScrollLeft
        }, () => [
          _ctx.overflow === "scrollX" && unref(pingStart) ? (openBlock(), createBlock(_component_el_button, {
            key: 0,
            size: "small",
            class: "elx-attachments-prev-btn",
            onClick: onScrollLeft
          }, {
            default: withCtx(() => [
              createVNode(_component_el_icon, null, {
                default: withCtx(() => [
                  createVNode(unref(arrow_left_bold_default))
                ]),
                _: 1
              })
            ]),
            _: 1
          })) : createCommentVNode("", true)
        ], true),
        renderSlot(_ctx.$slots, "next-button", {
          show: _ctx.overflow === "scrollX" && unref(pingEnd),
          onScrollRight
        }, () => [
          _ctx.overflow === "scrollX" && unref(pingEnd) ? (openBlock(), createBlock(_component_el_button, {
            key: 0,
            size: "small",
            class: "elx-attachments-next-btn",
            onClick: onScrollRight
          }, {
            default: withCtx(() => [
              createVNode(_component_el_icon, null, {
                default: withCtx(() => [
                  createVNode(unref(arrow_right_bold_default))
                ]),
                _: 1
              })
            ]),
            _: 1
          })) : createCommentVNode("", true)
        ], true)
      ], 38);
    };
  }
});
const indexAttachments = /* @__PURE__ */ _export_sfc(_sfc_main, [["__scopeId", "data-v-9dab29e3"]]);
export {
  indexAttachments as default
};
//# sourceMappingURL=index-attachments.js.map
