import { j as isNumber, k as isString, o as isArray, b as buildProps, a as definePropType, u as useNamespace, _ as _export_sfc, w as withInstall, E as ElIcon, D as withNoopInstall } from "../../base-BXVDO6W4.js";
import { g as useIdInjection, E as ElButton } from "../../el-button-v5lTrsRk.js";
import { ref, watch, provide, computed, defineComponent, createElementBlock, openBlock, normalizeClass, unref, renderSlot, createBlock, Transition, mergeProps, toHandlers, withCtx, inject, createElementVNode, createVNode, withKeys, withModifiers, createTextVNode, toDisplayString, resolveDynamicComponent, withDirectives, vShow, h, createCommentVNode, normalizeStyle, useCssVars, onMounted, TransitionGroup, Fragment, renderList } from "vue";
import { q as arrow_right_default, n as close_default, y as check_default, l as loading_default } from "../../index-CnlpUR18.js";
import '../../index6.css';import '../../index5.css';import '../../index11.css';import '../../index4.css';import '../../index12.css';import '../../index2.css';import '../../index10.css';import '../../el-popover.css';import '../../index3.css';import '../../el-popper.css';import '../../index.css';import '../../index8.css';import '../../el-image-viewer.css';import '../../index9.css';import '../../index7.css';import './index.css';/* empty css                                                                   */
/* empty css                                                                   */
/* empty css                             */
/* empty css                                                                   */
import { T as Typewriter } from "../../index-CD6jtNKK.js";
/* empty css                                                                   */
import { c as castArray } from "../../el-tooltip-m3ef_CN2.js";
import { g as get } from "../../index.vue_vue_type_style_index_0_scoped_499173a8_lang-Dspc3KiZ.js";
/* empty css                       */
/* empty css                                                                   */
/* empty css                        */
/* empty css                                                                   */
/* empty css                                                                   */
import { C as CHANGE_EVENT, U as UPDATE_MODEL_EVENT } from "../../el-input-AN-kaimj.js";
/* empty css                                                                   */
/* empty css                                                                   */
/* empty css                                                                   */
/* empty css                                                                   */
/* empty css                                                                   */
import { i as iconPropType } from "../../icon-ql50nNgG.js";
import { m as mutable } from "../../typescript-D6L75muK.js";
import { _ as _export_sfc$1 } from "../../_plugin-vue_export-helper-1tPrXgE0.js";
const emitChangeFn = (value) => isNumber(value) || isString(value) || isArray(value);
const collapseProps = buildProps({
  accordion: Boolean,
  modelValue: {
    type: definePropType([Array, String, Number]),
    default: () => mutable([])
  }
});
const collapseEmits = {
  [UPDATE_MODEL_EVENT]: emitChangeFn,
  [CHANGE_EVENT]: emitChangeFn
};
const collapseContextKey = Symbol("collapseContextKey");
const useCollapse = (props, emit) => {
  const activeNames = ref(castArray(props.modelValue));
  const setActiveNames = (_activeNames) => {
    activeNames.value = _activeNames;
    const value = props.accordion ? activeNames.value[0] : activeNames.value;
    emit(UPDATE_MODEL_EVENT, value);
    emit(CHANGE_EVENT, value);
  };
  const handleItemClick = (name) => {
    if (props.accordion) {
      setActiveNames([activeNames.value[0] === name ? "" : name]);
    } else {
      const _activeNames = [...activeNames.value];
      const index = _activeNames.indexOf(name);
      if (index > -1) {
        _activeNames.splice(index, 1);
      } else {
        _activeNames.push(name);
      }
      setActiveNames(_activeNames);
    }
  };
  watch(() => props.modelValue, () => activeNames.value = castArray(props.modelValue), { deep: true });
  provide(collapseContextKey, {
    activeNames,
    handleItemClick
  });
  return {
    activeNames,
    setActiveNames
  };
};
const useCollapseDOM = () => {
  const ns = useNamespace("collapse");
  const rootKls = computed(() => ns.b());
  return {
    rootKls
  };
};
const __default__$3 = defineComponent({
  name: "ElCollapse"
});
const _sfc_main$4 = /* @__PURE__ */ defineComponent({
  ...__default__$3,
  props: collapseProps,
  emits: collapseEmits,
  setup(__props, { expose, emit }) {
    const props = __props;
    const { activeNames, setActiveNames } = useCollapse(props, emit);
    const { rootKls } = useCollapseDOM();
    expose({
      activeNames,
      setActiveNames
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(unref(rootKls))
      }, [
        renderSlot(_ctx.$slots, "default")
      ], 2);
    };
  }
});
var Collapse = /* @__PURE__ */ _export_sfc(_sfc_main$4, [["__file", "collapse.vue"]]);
const __default__$2 = defineComponent({
  name: "ElCollapseTransition"
});
const _sfc_main$3 = /* @__PURE__ */ defineComponent({
  ...__default__$2,
  setup(__props) {
    const ns = useNamespace("collapse-transition");
    const reset = (el) => {
      el.style.maxHeight = "";
      el.style.overflow = el.dataset.oldOverflow;
      el.style.paddingTop = el.dataset.oldPaddingTop;
      el.style.paddingBottom = el.dataset.oldPaddingBottom;
    };
    const on = {
      beforeEnter(el) {
        if (!el.dataset)
          el.dataset = {};
        el.dataset.oldPaddingTop = el.style.paddingTop;
        el.dataset.oldPaddingBottom = el.style.paddingBottom;
        if (el.style.height)
          el.dataset.elExistsHeight = el.style.height;
        el.style.maxHeight = 0;
        el.style.paddingTop = 0;
        el.style.paddingBottom = 0;
      },
      enter(el) {
        requestAnimationFrame(() => {
          el.dataset.oldOverflow = el.style.overflow;
          if (el.dataset.elExistsHeight) {
            el.style.maxHeight = el.dataset.elExistsHeight;
          } else if (el.scrollHeight !== 0) {
            el.style.maxHeight = `${el.scrollHeight}px`;
          } else {
            el.style.maxHeight = 0;
          }
          el.style.paddingTop = el.dataset.oldPaddingTop;
          el.style.paddingBottom = el.dataset.oldPaddingBottom;
          el.style.overflow = "hidden";
        });
      },
      afterEnter(el) {
        el.style.maxHeight = "";
        el.style.overflow = el.dataset.oldOverflow;
      },
      enterCancelled(el) {
        reset(el);
      },
      beforeLeave(el) {
        if (!el.dataset)
          el.dataset = {};
        el.dataset.oldPaddingTop = el.style.paddingTop;
        el.dataset.oldPaddingBottom = el.style.paddingBottom;
        el.dataset.oldOverflow = el.style.overflow;
        el.style.maxHeight = `${el.scrollHeight}px`;
        el.style.overflow = "hidden";
      },
      leave(el) {
        if (el.scrollHeight !== 0) {
          el.style.maxHeight = 0;
          el.style.paddingTop = 0;
          el.style.paddingBottom = 0;
        }
      },
      afterLeave(el) {
        reset(el);
      },
      leaveCancelled(el) {
        reset(el);
      }
    };
    return (_ctx, _cache) => {
      return openBlock(), createBlock(Transition, mergeProps({
        name: unref(ns).b()
      }, toHandlers(on)), {
        default: withCtx(() => [
          renderSlot(_ctx.$slots, "default")
        ]),
        _: 3
      }, 16, ["name"]);
    };
  }
});
var CollapseTransition = /* @__PURE__ */ _export_sfc(_sfc_main$3, [["__file", "collapse-transition.vue"]]);
const ElCollapseTransition = withInstall(CollapseTransition);
const collapseItemProps = buildProps({
  title: {
    type: String,
    default: ""
  },
  name: {
    type: definePropType([String, Number]),
    default: void 0
  },
  icon: {
    type: iconPropType,
    default: arrow_right_default
  },
  disabled: Boolean
});
const useCollapseItem = (props) => {
  const collapse = inject(collapseContextKey);
  const { namespace } = useNamespace("collapse");
  const focusing = ref(false);
  const isClick = ref(false);
  const idInjection = useIdInjection();
  const id = computed(() => idInjection.current++);
  const name = computed(() => {
    var _a;
    return (_a = props.name) != null ? _a : `${namespace.value}-id-${idInjection.prefix}-${unref(id)}`;
  });
  const isActive = computed(() => collapse == null ? void 0 : collapse.activeNames.value.includes(unref(name)));
  const handleFocus = () => {
    setTimeout(() => {
      if (!isClick.value) {
        focusing.value = true;
      } else {
        isClick.value = false;
      }
    }, 50);
  };
  const handleHeaderClick = () => {
    if (props.disabled)
      return;
    collapse == null ? void 0 : collapse.handleItemClick(unref(name));
    focusing.value = false;
    isClick.value = true;
  };
  const handleEnterClick = () => {
    collapse == null ? void 0 : collapse.handleItemClick(unref(name));
  };
  return {
    focusing,
    id,
    isActive,
    handleFocus,
    handleHeaderClick,
    handleEnterClick
  };
};
const useCollapseItemDOM = (props, { focusing, isActive, id }) => {
  const ns = useNamespace("collapse");
  const rootKls = computed(() => [
    ns.b("item"),
    ns.is("active", unref(isActive)),
    ns.is("disabled", props.disabled)
  ]);
  const headKls = computed(() => [
    ns.be("item", "header"),
    ns.is("active", unref(isActive)),
    { focusing: unref(focusing) && !props.disabled }
  ]);
  const arrowKls = computed(() => [
    ns.be("item", "arrow"),
    ns.is("active", unref(isActive))
  ]);
  const itemWrapperKls = computed(() => ns.be("item", "wrap"));
  const itemContentKls = computed(() => ns.be("item", "content"));
  const scopedContentId = computed(() => ns.b(`content-${unref(id)}`));
  const scopedHeadId = computed(() => ns.b(`head-${unref(id)}`));
  return {
    arrowKls,
    headKls,
    rootKls,
    itemWrapperKls,
    itemContentKls,
    scopedContentId,
    scopedHeadId
  };
};
const __default__$1 = defineComponent({
  name: "ElCollapseItem"
});
const _sfc_main$2 = /* @__PURE__ */ defineComponent({
  ...__default__$1,
  props: collapseItemProps,
  setup(__props, { expose }) {
    const props = __props;
    const {
      focusing,
      id,
      isActive,
      handleFocus,
      handleHeaderClick,
      handleEnterClick
    } = useCollapseItem(props);
    const {
      arrowKls,
      headKls,
      rootKls,
      itemWrapperKls,
      itemContentKls,
      scopedContentId,
      scopedHeadId
    } = useCollapseItemDOM(props, { focusing, isActive, id });
    expose({
      isActive
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(unref(rootKls))
      }, [
        createElementVNode("button", {
          id: unref(scopedHeadId),
          class: normalizeClass(unref(headKls)),
          "aria-expanded": unref(isActive),
          "aria-controls": unref(scopedContentId),
          "aria-describedby": unref(scopedContentId),
          tabindex: _ctx.disabled ? -1 : 0,
          type: "button",
          onClick: unref(handleHeaderClick),
          onKeydown: withKeys(withModifiers(unref(handleEnterClick), ["stop", "prevent"]), ["space", "enter"]),
          onFocus: unref(handleFocus),
          onBlur: ($event) => focusing.value = false
        }, [
          renderSlot(_ctx.$slots, "title", {}, () => [
            createTextVNode(toDisplayString(_ctx.title), 1)
          ]),
          renderSlot(_ctx.$slots, "icon", { isActive: unref(isActive) }, () => [
            createVNode(unref(ElIcon), {
              class: normalizeClass(unref(arrowKls))
            }, {
              default: withCtx(() => [
                (openBlock(), createBlock(resolveDynamicComponent(_ctx.icon)))
              ]),
              _: 1
            }, 8, ["class"])
          ])
        ], 42, ["id", "aria-expanded", "aria-controls", "aria-describedby", "tabindex", "onClick", "onKeydown", "onFocus", "onBlur"]),
        createVNode(unref(ElCollapseTransition), null, {
          default: withCtx(() => [
            withDirectives(createElementVNode("div", {
              id: unref(scopedContentId),
              role: "region",
              class: normalizeClass(unref(itemWrapperKls)),
              "aria-hidden": !unref(isActive),
              "aria-labelledby": unref(scopedHeadId)
            }, [
              createElementVNode("div", {
                class: normalizeClass(unref(itemContentKls))
              }, [
                renderSlot(_ctx.$slots, "default")
              ], 2)
            ], 10, ["id", "aria-hidden", "aria-labelledby"]), [
              [vShow, unref(isActive)]
            ])
          ]),
          _: 3
        })
      ], 2);
    };
  }
});
var CollapseItem = /* @__PURE__ */ _export_sfc(_sfc_main$2, [["__file", "collapse-item.vue"]]);
const ElCollapse = withInstall(Collapse, {
  CollapseItem
});
const ElCollapseItem = withNoopInstall(CollapseItem);
const Timeline = defineComponent({
  name: "ElTimeline",
  setup(_, { slots }) {
    const ns = useNamespace("timeline");
    provide("timeline", slots);
    return () => {
      return h("ul", { class: [ns.b()] }, [renderSlot(slots, "default")]);
    };
  }
});
const timelineItemProps = buildProps({
  timestamp: {
    type: String,
    default: ""
  },
  hideTimestamp: Boolean,
  center: Boolean,
  placement: {
    type: String,
    values: ["top", "bottom"],
    default: "bottom"
  },
  type: {
    type: String,
    values: ["primary", "success", "warning", "danger", "info"],
    default: ""
  },
  color: {
    type: String,
    default: ""
  },
  size: {
    type: String,
    values: ["normal", "large"],
    default: "normal"
  },
  icon: {
    type: iconPropType
  },
  hollow: Boolean
});
const __default__ = defineComponent({
  name: "ElTimelineItem"
});
const _sfc_main$1 = /* @__PURE__ */ defineComponent({
  ...__default__,
  props: timelineItemProps,
  setup(__props) {
    const props = __props;
    const ns = useNamespace("timeline-item");
    const defaultNodeKls = computed(() => [
      ns.e("node"),
      ns.em("node", props.size || ""),
      ns.em("node", props.type || ""),
      ns.is("hollow", props.hollow)
    ]);
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("li", {
        class: normalizeClass([unref(ns).b(), { [unref(ns).e("center")]: _ctx.center }])
      }, [
        createElementVNode("div", {
          class: normalizeClass(unref(ns).e("tail"))
        }, null, 2),
        !_ctx.$slots.dot ? (openBlock(), createElementBlock("div", {
          key: 0,
          class: normalizeClass(unref(defaultNodeKls)),
          style: normalizeStyle({
            backgroundColor: _ctx.color
          })
        }, [
          _ctx.icon ? (openBlock(), createBlock(unref(ElIcon), {
            key: 0,
            class: normalizeClass(unref(ns).e("icon"))
          }, {
            default: withCtx(() => [
              (openBlock(), createBlock(resolveDynamicComponent(_ctx.icon)))
            ]),
            _: 1
          }, 8, ["class"])) : createCommentVNode("v-if", true)
        ], 6)) : createCommentVNode("v-if", true),
        _ctx.$slots.dot ? (openBlock(), createElementBlock("div", {
          key: 1,
          class: normalizeClass(unref(ns).e("dot"))
        }, [
          renderSlot(_ctx.$slots, "dot")
        ], 2)) : createCommentVNode("v-if", true),
        createElementVNode("div", {
          class: normalizeClass(unref(ns).e("wrapper"))
        }, [
          !_ctx.hideTimestamp && _ctx.placement === "top" ? (openBlock(), createElementBlock("div", {
            key: 0,
            class: normalizeClass([unref(ns).e("timestamp"), unref(ns).is("top")])
          }, toDisplayString(_ctx.timestamp), 3)) : createCommentVNode("v-if", true),
          createElementVNode("div", {
            class: normalizeClass(unref(ns).e("content"))
          }, [
            renderSlot(_ctx.$slots, "default")
          ], 2),
          !_ctx.hideTimestamp && _ctx.placement === "bottom" ? (openBlock(), createElementBlock("div", {
            key: 1,
            class: normalizeClass([unref(ns).e("timestamp"), unref(ns).is("bottom")])
          }, toDisplayString(_ctx.timestamp), 3)) : createCommentVNode("v-if", true)
        ], 2)
      ], 2);
    };
  }
});
var TimelineItem = /* @__PURE__ */ _export_sfc(_sfc_main$1, [["__file", "timeline-item.vue"]]);
const ElTimeline = withInstall(Timeline, {
  TimelineItem
});
const ElTimelineItem = withNoopInstall(TimelineItem);
const _hoisted_1 = { class: "el-thought-chain" };
const _hoisted_2 = { key: 0 };
const _hoisted_3 = { class: "el-thought-chain-item-dot" };
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "index",
  props: {
    thinkingItems: { default: () => [] },
    rowKey: { default: "id" },
    titleKey: { default: "title" },
    thinkTitleKey: { default: "thinkTitle" },
    thinkContentKey: { default: "thinkContent" },
    statusKey: { default: "status" },
    statusEnum: { default: () => ({
      loading: {
        value: "loading",
        type: "warning"
      },
      error: {
        value: "error",
        type: "danger"
      },
      success: {
        value: "success",
        type: "success"
      }
    }) },
    dotSize: { default: "default" },
    maxWidth: { default: "600px" },
    lineGradient: { type: Boolean, default: false },
    mdPlugins: {}
  },
  emits: ["handleExpand"],
  setup(__props, { emit: __emit }) {
    useCssVars((_ctx) => ({
      "a9c299d2": dotMargin.value
    }));
    const props = __props;
    const emits = __emit;
    const dotMargin = computed(() => {
      switch (props.dotSize) {
        case "small":
          return "-4px 0 0 -7px";
        case "large":
          return "-11px 0 0 -15px";
        default:
          return "-8px 0 0 -11px";
      }
    });
    const colorArr = {
      info: "var(--el-color-primary)",
      success: "var(--el-color-success)",
      warning: "var(--el-color-warning)",
      danger: "var(--el-color-danger)",
      primary: "var(--el-color-primary)"
    };
    const timelineRef = ref();
    const getLineColor = computed(() => {
      if (props.thinkingItems.length) {
        const arr = props.thinkingItems.map((item) => {
          const _type_ = getType(item);
          if (_type_) {
            return colorArr[_type_];
          }
          return "";
        });
        return arr;
      }
      return [];
    });
    const activeNamesComputed = computed(
      () => props.thinkingItems.filter((item) => item.isCanExpand && item.isDefaultExpand).map((item) => String(getId(item)))
    );
    const defaultActiveNodes = ref([...activeNamesComputed.value]);
    function handleExpand(item) {
      emits("handleExpand", item);
    }
    function setRadialGradient(colors, ele) {
      const length = ele.length;
      Array.from(ele).forEach((item, index) => {
        const line = item.children[0];
        if (line) {
          line.setAttribute("style", `
      border: none;
      width:2px;
      background: linear-gradient(to bottom, ${colors[index]} 0% , ${colors[index < length ? index + 1 : index]} 100%);
    `);
        }
      });
    }
    function getEle() {
      if (getLineColor.value && timelineRef.value && props.lineGradient) {
        const ele = timelineRef.value.$el.children[0].children;
        setRadialGradient(getLineColor.value, ele);
      }
    }
    function isLoading(item) {
      const status = getStatus(item);
      return status === props.statusEnum.loading.value;
    }
    function isError(item) {
      const status = getStatus(item);
      return status === props.statusEnum.error.value;
    }
    function getId(item) {
      return get(item, props.rowKey);
    }
    function getType(item) {
      var _a;
      const status = getStatus(item);
      return ((_a = props.statusEnum[status]) == null ? void 0 : _a.type) ?? "success";
    }
    function getTitle(item) {
      return get(item, props.titleKey) ?? "";
    }
    function getThinkTitle(item) {
      return get(item, props.thinkTitleKey) ?? "";
    }
    function getThinkContent(item) {
      return get(item, props.thinkContentKey) ?? "";
    }
    function getStatus(item) {
      return get(item, props.statusKey);
    }
    watch(() => activeNamesComputed.value, (v) => {
      defaultActiveNodes.value = [...v];
    });
    watch(() => getLineColor.value, () => {
      getEle();
    });
    onMounted(() => {
      getEle();
    });
    return (_ctx, _cache) => {
      const _component_el_collapse_item = ElCollapseItem;
      const _component_el_collapse = ElCollapse;
      const _component_el_icon = ElIcon;
      const _component_el_button = ElButton;
      const _component_el_timeline_item = ElTimelineItem;
      const _component_el_timeline = ElTimeline;
      return openBlock(), createElementBlock("div", _hoisted_1, [
        createVNode(_component_el_timeline, {
          ref_key: "timelineRef",
          ref: timelineRef,
          style: normalizeStyle({
            maxWidth: `${_ctx.maxWidth}`
          })
        }, {
          default: withCtx(() => [
            createVNode(TransitionGroup, {
              name: "thought-chain",
              tag: "el-timeline-item"
            }, {
              default: withCtx(() => [
                (openBlock(true), createElementBlock(Fragment, null, renderList(props.thinkingItems, (item) => {
                  return openBlock(), createBlock(_component_el_timeline_item, {
                    key: getId(item),
                    type: getType(item),
                    timestamp: getTitle(item),
                    "hide-timestamp": item.hideTitle,
                    placement: item.placement ?? "top"
                  }, {
                    dot: withCtx(() => [
                      createElementVNode("div", _hoisted_3, [
                        renderSlot(_ctx.$slots, "icon", { item }, () => [
                          createVNode(_component_el_button, {
                            circle: "",
                            type: getType(item),
                            loading: isLoading(item),
                            size: _ctx.dotSize
                          }, {
                            loading: withCtx(() => [
                              createVNode(_component_el_icon, { class: "thought-chain-loading" }, {
                                default: withCtx(() => [
                                  createVNode(unref(loading_default))
                                ]),
                                _: 1
                              })
                            ]),
                            icon: withCtx(() => [
                              !isLoading(item) ? (openBlock(), createBlock(_component_el_icon, { key: 0 }, {
                                default: withCtx(() => [
                                  isError(item) ? (openBlock(), createBlock(unref(close_default), { key: 0 })) : (openBlock(), createBlock(unref(check_default), { key: 1 }))
                                ]),
                                _: 2
                              }, 1024)) : createCommentVNode("", true)
                            ]),
                            _: 2
                          }, 1032, ["type", "loading", "size"])
                        ], true)
                      ])
                    ]),
                    default: withCtx(() => [
                      !item.isCanExpand ? (openBlock(), createElementBlock("div", _hoisted_2, [
                        createVNode(unref(Typewriter), {
                          content: getThinkTitle(item),
                          "is-markdown": item.isMarkdown,
                          typing: item.typing
                        }, null, 8, ["content", "is-markdown", "typing"])
                      ])) : !item.isDefaultExpand ? (openBlock(), createBlock(_component_el_collapse, {
                        key: 1,
                        onChange: ($event) => handleExpand(item)
                      }, {
                        default: withCtx(() => [
                          createVNode(_component_el_collapse_item, {
                            title: getThinkTitle(item)
                          }, {
                            default: withCtx(() => [
                              createVNode(unref(Typewriter), {
                                content: getThinkContent(item),
                                "is-markdown": item.isMarkdown,
                                typing: item.typing
                              }, null, 8, ["content", "is-markdown", "typing"])
                            ]),
                            _: 2
                          }, 1032, ["title"])
                        ]),
                        _: 2
                      }, 1032, ["onChange"])) : item.isDefaultExpand ? (openBlock(), createBlock(_component_el_collapse, {
                        key: 2,
                        modelValue: defaultActiveNodes.value,
                        "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => defaultActiveNodes.value = $event),
                        onChange: ($event) => handleExpand(item)
                      }, {
                        default: withCtx(() => [
                          createVNode(_component_el_collapse_item, {
                            title: getThinkTitle(item),
                            name: String(getId(item))
                          }, {
                            default: withCtx(() => [
                              createVNode(unref(Typewriter), {
                                content: getThinkContent(item),
                                "is-markdown": item.isMarkdown,
                                typing: item.typing
                              }, null, 8, ["content", "is-markdown", "typing"])
                            ]),
                            _: 2
                          }, 1032, ["title", "name"])
                        ]),
                        _: 2
                      }, 1032, ["modelValue", "onChange"])) : createCommentVNode("", true)
                    ]),
                    _: 2
                  }, 1032, ["type", "timestamp", "hide-timestamp", "placement"]);
                }), 128))
              ]),
              _: 3
            })
          ]),
          _: 3
        }, 8, ["style"])
      ]);
    };
  }
});
const ThoughtChain = /* @__PURE__ */ _export_sfc$1(_sfc_main, [["__scopeId", "data-v-f176ff77"]]);
export {
  ThoughtChain as default
};
//# sourceMappingURL=index.js.map
