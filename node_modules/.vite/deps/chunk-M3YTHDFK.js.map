{
  "version": 3,
  "sources": ["../../.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/layout-DzgqTejS.js"],
  "sourcesContent": ["import { G as Graph } from \"./graph-BUMcCM19.js\";\nimport { g as castFunction, h as baseForOwn, c as baseIteratee, a as forEach, f as filter, v as values, r as reduce } from \"./_baseUniq-CyBKxUBB.js\";\nimport { b as baseExtremum, a as baseLt, c as baseMap, t as toFinite, m as map, d as min, h as has, f as find, l as last, e as defaults } from \"./min-DKZp8rBd.js\";\nimport { aJ as baseFor, aI as isIterateeCall, ar as baseRest, aX as merge } from \"./index-CD6jtNKK.js\";\nimport { i as isSymbol, a as arrayMap, b as baseGet, e as toString } from \"./_baseGet-3tygxliO.js\";\nimport { i as identity, c as constant } from \"./_overRest-GH34SvU2.js\";\nimport { b as baseFlatten, i as isUndefined } from \"./isUndefined-CK8yuUzU.js\";\nimport { f as flatten } from \"./_basePickBy-CNUbravK.js\";\nimport { a as isArray } from \"./memoize-DcHWeNg4.js\";\nimport { e as baseAssignValue, a as assignValue } from \"./isArguments-BS1MO8S5.js\";\nimport { k as keysIn, j as baseUnary } from \"./_initCloneObject-BD9UVboW.js\";\nimport { p as pick } from \"./pick-BGaY59Y-.js\";\nimport { c as cloneDeep } from \"./cloneDeep-BTtEY_-W.js\";\nfunction forIn(object, iteratee) {\n  return object == null ? object : baseFor(object, castFunction(iteratee), keysIn);\n}\nfunction forOwn(object, iteratee) {\n  return object && baseForOwn(object, castFunction(iteratee));\n}\nfunction baseGt(value, other) {\n  return value > other;\n}\nfunction mapValues(object, iteratee) {\n  var result = {};\n  iteratee = baseIteratee(iteratee);\n  baseForOwn(object, function(value, key, object2) {\n    baseAssignValue(result, key, iteratee(value, key, object2));\n  });\n  return result;\n}\nfunction max(array) {\n  return array && array.length ? baseExtremum(array, identity, baseGt) : void 0;\n}\nfunction minBy(array, iteratee) {\n  return array && array.length ? baseExtremum(array, baseIteratee(iteratee), baseLt) : void 0;\n}\nfunction baseSortBy(array, comparer) {\n  var length = array.length;\n  array.sort(comparer);\n  while (length--) {\n    array[length] = array[length].value;\n  }\n  return array;\n}\nfunction compareAscending(value, other) {\n  if (value !== other) {\n    var valIsDefined = value !== void 0, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = isSymbol(value);\n    var othIsDefined = other !== void 0, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol(other);\n    if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {\n      return 1;\n    }\n    if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {\n      return -1;\n    }\n  }\n  return 0;\n}\nfunction compareMultiple(object, other, orders) {\n  var index = -1, objCriteria = object.criteria, othCriteria = other.criteria, length = objCriteria.length, ordersLength = orders.length;\n  while (++index < length) {\n    var result = compareAscending(objCriteria[index], othCriteria[index]);\n    if (result) {\n      if (index >= ordersLength) {\n        return result;\n      }\n      var order2 = orders[index];\n      return result * (order2 == \"desc\" ? -1 : 1);\n    }\n  }\n  return object.index - other.index;\n}\nfunction baseOrderBy(collection, iteratees, orders) {\n  if (iteratees.length) {\n    iteratees = arrayMap(iteratees, function(iteratee) {\n      if (isArray(iteratee)) {\n        return function(value) {\n          return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);\n        };\n      }\n      return iteratee;\n    });\n  } else {\n    iteratees = [identity];\n  }\n  var index = -1;\n  iteratees = arrayMap(iteratees, baseUnary(baseIteratee));\n  var result = baseMap(collection, function(value, key, collection2) {\n    var criteria = arrayMap(iteratees, function(iteratee) {\n      return iteratee(value);\n    });\n    return { \"criteria\": criteria, \"index\": ++index, \"value\": value };\n  });\n  return baseSortBy(result, function(object, other) {\n    return compareMultiple(object, other, orders);\n  });\n}\nvar nativeCeil = Math.ceil, nativeMax = Math.max;\nfunction baseRange(start, end, step, fromRight) {\n  var index = -1, length = nativeMax(nativeCeil((end - start) / (step || 1)), 0), result = Array(length);\n  while (length--) {\n    result[++index] = start;\n    start += step;\n  }\n  return result;\n}\nfunction createRange(fromRight) {\n  return function(start, end, step) {\n    if (step && typeof step != \"number\" && isIterateeCall(start, end, step)) {\n      end = step = void 0;\n    }\n    start = toFinite(start);\n    if (end === void 0) {\n      end = start;\n      start = 0;\n    } else {\n      end = toFinite(end);\n    }\n    step = step === void 0 ? start < end ? 1 : -1 : toFinite(step);\n    return baseRange(start, end, step);\n  };\n}\nvar range = createRange();\nvar sortBy = baseRest(function(collection, iteratees) {\n  if (collection == null) {\n    return [];\n  }\n  var length = iteratees.length;\n  if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {\n    iteratees = [];\n  } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {\n    iteratees = [iteratees[0]];\n  }\n  return baseOrderBy(collection, baseFlatten(iteratees), []);\n});\nvar idCounter = 0;\nfunction uniqueId(prefix) {\n  var id = ++idCounter;\n  return toString(prefix) + id;\n}\nfunction baseZipObject(props, values2, assignFunc) {\n  var index = -1, length = props.length, valsLength = values2.length, result = {};\n  while (++index < length) {\n    var value = index < valsLength ? values2[index] : void 0;\n    assignFunc(result, props[index], value);\n  }\n  return result;\n}\nfunction zipObject(props, values2) {\n  return baseZipObject(props || [], values2 || [], assignValue);\n}\nclass List {\n  constructor() {\n    var sentinel = {};\n    sentinel._next = sentinel._prev = sentinel;\n    this._sentinel = sentinel;\n  }\n  dequeue() {\n    var sentinel = this._sentinel;\n    var entry = sentinel._prev;\n    if (entry !== sentinel) {\n      unlink(entry);\n      return entry;\n    }\n  }\n  enqueue(entry) {\n    var sentinel = this._sentinel;\n    if (entry._prev && entry._next) {\n      unlink(entry);\n    }\n    entry._next = sentinel._next;\n    sentinel._next._prev = entry;\n    sentinel._next = entry;\n    entry._prev = sentinel;\n  }\n  toString() {\n    var strs = [];\n    var sentinel = this._sentinel;\n    var curr = sentinel._prev;\n    while (curr !== sentinel) {\n      strs.push(JSON.stringify(curr, filterOutLinks));\n      curr = curr._prev;\n    }\n    return \"[\" + strs.join(\", \") + \"]\";\n  }\n}\nfunction unlink(entry) {\n  entry._prev._next = entry._next;\n  entry._next._prev = entry._prev;\n  delete entry._next;\n  delete entry._prev;\n}\nfunction filterOutLinks(k, v) {\n  if (k !== \"_next\" && k !== \"_prev\") {\n    return v;\n  }\n}\nvar DEFAULT_WEIGHT_FN = constant(1);\nfunction greedyFAS(g, weightFn) {\n  if (g.nodeCount() <= 1) {\n    return [];\n  }\n  var state = buildState(g, weightFn || DEFAULT_WEIGHT_FN);\n  var results = doGreedyFAS(state.graph, state.buckets, state.zeroIdx);\n  return flatten(\n    map(results, function(e) {\n      return g.outEdges(e.v, e.w);\n    })\n  );\n}\nfunction doGreedyFAS(g, buckets, zeroIdx) {\n  var results = [];\n  var sources = buckets[buckets.length - 1];\n  var sinks = buckets[0];\n  var entry;\n  while (g.nodeCount()) {\n    while (entry = sinks.dequeue()) {\n      removeNode(g, buckets, zeroIdx, entry);\n    }\n    while (entry = sources.dequeue()) {\n      removeNode(g, buckets, zeroIdx, entry);\n    }\n    if (g.nodeCount()) {\n      for (var i = buckets.length - 2; i > 0; --i) {\n        entry = buckets[i].dequeue();\n        if (entry) {\n          results = results.concat(removeNode(g, buckets, zeroIdx, entry, true));\n          break;\n        }\n      }\n    }\n  }\n  return results;\n}\nfunction removeNode(g, buckets, zeroIdx, entry, collectPredecessors) {\n  var results = collectPredecessors ? [] : void 0;\n  forEach(g.inEdges(entry.v), function(edge) {\n    var weight = g.edge(edge);\n    var uEntry = g.node(edge.v);\n    if (collectPredecessors) {\n      results.push({ v: edge.v, w: edge.w });\n    }\n    uEntry.out -= weight;\n    assignBucket(buckets, zeroIdx, uEntry);\n  });\n  forEach(g.outEdges(entry.v), function(edge) {\n    var weight = g.edge(edge);\n    var w = edge.w;\n    var wEntry = g.node(w);\n    wEntry[\"in\"] -= weight;\n    assignBucket(buckets, zeroIdx, wEntry);\n  });\n  g.removeNode(entry.v);\n  return results;\n}\nfunction buildState(g, weightFn) {\n  var fasGraph = new Graph();\n  var maxIn = 0;\n  var maxOut = 0;\n  forEach(g.nodes(), function(v) {\n    fasGraph.setNode(v, { v, in: 0, out: 0 });\n  });\n  forEach(g.edges(), function(e) {\n    var prevWeight = fasGraph.edge(e.v, e.w) || 0;\n    var weight = weightFn(e);\n    var edgeWeight = prevWeight + weight;\n    fasGraph.setEdge(e.v, e.w, edgeWeight);\n    maxOut = Math.max(maxOut, fasGraph.node(e.v).out += weight);\n    maxIn = Math.max(maxIn, fasGraph.node(e.w)[\"in\"] += weight);\n  });\n  var buckets = range(maxOut + maxIn + 3).map(function() {\n    return new List();\n  });\n  var zeroIdx = maxIn + 1;\n  forEach(fasGraph.nodes(), function(v) {\n    assignBucket(buckets, zeroIdx, fasGraph.node(v));\n  });\n  return { graph: fasGraph, buckets, zeroIdx };\n}\nfunction assignBucket(buckets, zeroIdx, entry) {\n  if (!entry.out) {\n    buckets[0].enqueue(entry);\n  } else if (!entry[\"in\"]) {\n    buckets[buckets.length - 1].enqueue(entry);\n  } else {\n    buckets[entry.out - entry[\"in\"] + zeroIdx].enqueue(entry);\n  }\n}\nfunction run$2(g) {\n  var fas = g.graph().acyclicer === \"greedy\" ? greedyFAS(g, weightFn(g)) : dfsFAS(g);\n  forEach(fas, function(e) {\n    var label = g.edge(e);\n    g.removeEdge(e);\n    label.forwardName = e.name;\n    label.reversed = true;\n    g.setEdge(e.w, e.v, label, uniqueId(\"rev\"));\n  });\n  function weightFn(g2) {\n    return function(e) {\n      return g2.edge(e).weight;\n    };\n  }\n}\nfunction dfsFAS(g) {\n  var fas = [];\n  var stack = {};\n  var visited = {};\n  function dfs2(v) {\n    if (Object.prototype.hasOwnProperty.call(visited, v)) {\n      return;\n    }\n    visited[v] = true;\n    stack[v] = true;\n    forEach(g.outEdges(v), function(e) {\n      if (Object.prototype.hasOwnProperty.call(stack, e.w)) {\n        fas.push(e);\n      } else {\n        dfs2(e.w);\n      }\n    });\n    delete stack[v];\n  }\n  forEach(g.nodes(), dfs2);\n  return fas;\n}\nfunction undo$2(g) {\n  forEach(g.edges(), function(e) {\n    var label = g.edge(e);\n    if (label.reversed) {\n      g.removeEdge(e);\n      var forwardName = label.forwardName;\n      delete label.reversed;\n      delete label.forwardName;\n      g.setEdge(e.w, e.v, label, forwardName);\n    }\n  });\n}\nfunction addDummyNode(g, type, attrs, name) {\n  var v;\n  do {\n    v = uniqueId(name);\n  } while (g.hasNode(v));\n  attrs.dummy = type;\n  g.setNode(v, attrs);\n  return v;\n}\nfunction simplify(g) {\n  var simplified = new Graph().setGraph(g.graph());\n  forEach(g.nodes(), function(v) {\n    simplified.setNode(v, g.node(v));\n  });\n  forEach(g.edges(), function(e) {\n    var simpleLabel = simplified.edge(e.v, e.w) || { weight: 0, minlen: 1 };\n    var label = g.edge(e);\n    simplified.setEdge(e.v, e.w, {\n      weight: simpleLabel.weight + label.weight,\n      minlen: Math.max(simpleLabel.minlen, label.minlen)\n    });\n  });\n  return simplified;\n}\nfunction asNonCompoundGraph(g) {\n  var simplified = new Graph({ multigraph: g.isMultigraph() }).setGraph(g.graph());\n  forEach(g.nodes(), function(v) {\n    if (!g.children(v).length) {\n      simplified.setNode(v, g.node(v));\n    }\n  });\n  forEach(g.edges(), function(e) {\n    simplified.setEdge(e, g.edge(e));\n  });\n  return simplified;\n}\nfunction intersectRect(rect, point) {\n  var x = rect.x;\n  var y = rect.y;\n  var dx = point.x - x;\n  var dy = point.y - y;\n  var w = rect.width / 2;\n  var h = rect.height / 2;\n  if (!dx && !dy) {\n    throw new Error(\"Not possible to find intersection inside of the rectangle\");\n  }\n  var sx, sy;\n  if (Math.abs(dy) * w > Math.abs(dx) * h) {\n    if (dy < 0) {\n      h = -h;\n    }\n    sx = h * dx / dy;\n    sy = h;\n  } else {\n    if (dx < 0) {\n      w = -w;\n    }\n    sx = w;\n    sy = w * dy / dx;\n  }\n  return { x: x + sx, y: y + sy };\n}\nfunction buildLayerMatrix(g) {\n  var layering = map(range(maxRank(g) + 1), function() {\n    return [];\n  });\n  forEach(g.nodes(), function(v) {\n    var node = g.node(v);\n    var rank2 = node.rank;\n    if (!isUndefined(rank2)) {\n      layering[rank2][node.order] = v;\n    }\n  });\n  return layering;\n}\nfunction normalizeRanks(g) {\n  var min$1 = min(\n    map(g.nodes(), function(v) {\n      return g.node(v).rank;\n    })\n  );\n  forEach(g.nodes(), function(v) {\n    var node = g.node(v);\n    if (has(node, \"rank\")) {\n      node.rank -= min$1;\n    }\n  });\n}\nfunction removeEmptyRanks(g) {\n  var offset = min(\n    map(g.nodes(), function(v) {\n      return g.node(v).rank;\n    })\n  );\n  var layers = [];\n  forEach(g.nodes(), function(v) {\n    var rank2 = g.node(v).rank - offset;\n    if (!layers[rank2]) {\n      layers[rank2] = [];\n    }\n    layers[rank2].push(v);\n  });\n  var delta = 0;\n  var nodeRankFactor = g.graph().nodeRankFactor;\n  forEach(layers, function(vs, i) {\n    if (isUndefined(vs) && i % nodeRankFactor !== 0) {\n      --delta;\n    } else if (delta) {\n      forEach(vs, function(v) {\n        g.node(v).rank += delta;\n      });\n    }\n  });\n}\nfunction addBorderNode$1(g, prefix, rank2, order2) {\n  var node = {\n    width: 0,\n    height: 0\n  };\n  if (arguments.length >= 4) {\n    node.rank = rank2;\n    node.order = order2;\n  }\n  return addDummyNode(g, \"border\", node, prefix);\n}\nfunction maxRank(g) {\n  return max(\n    map(g.nodes(), function(v) {\n      var rank2 = g.node(v).rank;\n      if (!isUndefined(rank2)) {\n        return rank2;\n      }\n    })\n  );\n}\nfunction partition(collection, fn) {\n  var result = { lhs: [], rhs: [] };\n  forEach(collection, function(value) {\n    if (fn(value)) {\n      result.lhs.push(value);\n    } else {\n      result.rhs.push(value);\n    }\n  });\n  return result;\n}\nfunction notime(name, fn) {\n  return fn();\n}\nfunction addBorderSegments(g) {\n  function dfs2(v) {\n    var children = g.children(v);\n    var node = g.node(v);\n    if (children.length) {\n      forEach(children, dfs2);\n    }\n    if (Object.prototype.hasOwnProperty.call(node, \"minRank\")) {\n      node.borderLeft = [];\n      node.borderRight = [];\n      for (var rank2 = node.minRank, maxRank2 = node.maxRank + 1; rank2 < maxRank2; ++rank2) {\n        addBorderNode(g, \"borderLeft\", \"_bl\", v, node, rank2);\n        addBorderNode(g, \"borderRight\", \"_br\", v, node, rank2);\n      }\n    }\n  }\n  forEach(g.children(), dfs2);\n}\nfunction addBorderNode(g, prop, prefix, sg, sgNode, rank2) {\n  var label = { width: 0, height: 0, rank: rank2, borderType: prop };\n  var prev = sgNode[prop][rank2 - 1];\n  var curr = addDummyNode(g, \"border\", label, prefix);\n  sgNode[prop][rank2] = curr;\n  g.setParent(curr, sg);\n  if (prev) {\n    g.setEdge(prev, curr, { weight: 1 });\n  }\n}\nfunction adjust(g) {\n  var rankDir = g.graph().rankdir.toLowerCase();\n  if (rankDir === \"lr\" || rankDir === \"rl\") {\n    swapWidthHeight(g);\n  }\n}\nfunction undo$1(g) {\n  var rankDir = g.graph().rankdir.toLowerCase();\n  if (rankDir === \"bt\" || rankDir === \"rl\") {\n    reverseY(g);\n  }\n  if (rankDir === \"lr\" || rankDir === \"rl\") {\n    swapXY(g);\n    swapWidthHeight(g);\n  }\n}\nfunction swapWidthHeight(g) {\n  forEach(g.nodes(), function(v) {\n    swapWidthHeightOne(g.node(v));\n  });\n  forEach(g.edges(), function(e) {\n    swapWidthHeightOne(g.edge(e));\n  });\n}\nfunction swapWidthHeightOne(attrs) {\n  var w = attrs.width;\n  attrs.width = attrs.height;\n  attrs.height = w;\n}\nfunction reverseY(g) {\n  forEach(g.nodes(), function(v) {\n    reverseYOne(g.node(v));\n  });\n  forEach(g.edges(), function(e) {\n    var edge = g.edge(e);\n    forEach(edge.points, reverseYOne);\n    if (Object.prototype.hasOwnProperty.call(edge, \"y\")) {\n      reverseYOne(edge);\n    }\n  });\n}\nfunction reverseYOne(attrs) {\n  attrs.y = -attrs.y;\n}\nfunction swapXY(g) {\n  forEach(g.nodes(), function(v) {\n    swapXYOne(g.node(v));\n  });\n  forEach(g.edges(), function(e) {\n    var edge = g.edge(e);\n    forEach(edge.points, swapXYOne);\n    if (Object.prototype.hasOwnProperty.call(edge, \"x\")) {\n      swapXYOne(edge);\n    }\n  });\n}\nfunction swapXYOne(attrs) {\n  var x = attrs.x;\n  attrs.x = attrs.y;\n  attrs.y = x;\n}\nfunction run$1(g) {\n  g.graph().dummyChains = [];\n  forEach(g.edges(), function(edge) {\n    normalizeEdge(g, edge);\n  });\n}\nfunction normalizeEdge(g, e) {\n  var v = e.v;\n  var vRank = g.node(v).rank;\n  var w = e.w;\n  var wRank = g.node(w).rank;\n  var name = e.name;\n  var edgeLabel = g.edge(e);\n  var labelRank = edgeLabel.labelRank;\n  if (wRank === vRank + 1) return;\n  g.removeEdge(e);\n  var attrs = void 0;\n  var dummy, i;\n  for (i = 0, ++vRank; vRank < wRank; ++i, ++vRank) {\n    edgeLabel.points = [];\n    attrs = {\n      width: 0,\n      height: 0,\n      edgeLabel,\n      edgeObj: e,\n      rank: vRank\n    };\n    dummy = addDummyNode(g, \"edge\", attrs, \"_d\");\n    if (vRank === labelRank) {\n      attrs.width = edgeLabel.width;\n      attrs.height = edgeLabel.height;\n      attrs.dummy = \"edge-label\";\n      attrs.labelpos = edgeLabel.labelpos;\n    }\n    g.setEdge(v, dummy, { weight: edgeLabel.weight }, name);\n    if (i === 0) {\n      g.graph().dummyChains.push(dummy);\n    }\n    v = dummy;\n  }\n  g.setEdge(v, w, { weight: edgeLabel.weight }, name);\n}\nfunction undo(g) {\n  forEach(g.graph().dummyChains, function(v) {\n    var node = g.node(v);\n    var origLabel = node.edgeLabel;\n    var w;\n    g.setEdge(node.edgeObj, origLabel);\n    while (node.dummy) {\n      w = g.successors(v)[0];\n      g.removeNode(v);\n      origLabel.points.push({ x: node.x, y: node.y });\n      if (node.dummy === \"edge-label\") {\n        origLabel.x = node.x;\n        origLabel.y = node.y;\n        origLabel.width = node.width;\n        origLabel.height = node.height;\n      }\n      v = w;\n      node = g.node(v);\n    }\n  });\n}\nfunction longestPath(g) {\n  var visited = {};\n  function dfs2(v) {\n    var label = g.node(v);\n    if (Object.prototype.hasOwnProperty.call(visited, v)) {\n      return label.rank;\n    }\n    visited[v] = true;\n    var rank2 = min(\n      map(g.outEdges(v), function(e) {\n        return dfs2(e.w) - g.edge(e).minlen;\n      })\n    );\n    if (rank2 === Number.POSITIVE_INFINITY || // return value of _.map([]) for Lodash 3\n    rank2 === void 0 || // return value of _.map([]) for Lodash 4\n    rank2 === null) {\n      rank2 = 0;\n    }\n    return label.rank = rank2;\n  }\n  forEach(g.sources(), dfs2);\n}\nfunction slack(g, e) {\n  return g.node(e.w).rank - g.node(e.v).rank - g.edge(e).minlen;\n}\nfunction feasibleTree(g) {\n  var t = new Graph({ directed: false });\n  var start = g.nodes()[0];\n  var size = g.nodeCount();\n  t.setNode(start, {});\n  var edge, delta;\n  while (tightTree(t, g) < size) {\n    edge = findMinSlackEdge(t, g);\n    delta = t.hasNode(edge.v) ? slack(g, edge) : -slack(g, edge);\n    shiftRanks(t, g, delta);\n  }\n  return t;\n}\nfunction tightTree(t, g) {\n  function dfs2(v) {\n    forEach(g.nodeEdges(v), function(e) {\n      var edgeV = e.v, w = v === edgeV ? e.w : edgeV;\n      if (!t.hasNode(w) && !slack(g, e)) {\n        t.setNode(w, {});\n        t.setEdge(v, w, {});\n        dfs2(w);\n      }\n    });\n  }\n  forEach(t.nodes(), dfs2);\n  return t.nodeCount();\n}\nfunction findMinSlackEdge(t, g) {\n  return minBy(g.edges(), function(e) {\n    if (t.hasNode(e.v) !== t.hasNode(e.w)) {\n      return slack(g, e);\n    }\n  });\n}\nfunction shiftRanks(t, g, delta) {\n  forEach(t.nodes(), function(v) {\n    g.node(v).rank += delta;\n  });\n}\nfunction CycleException() {\n}\nCycleException.prototype = new Error();\nfunction dfs$1(g, vs, order2) {\n  if (!isArray(vs)) {\n    vs = [vs];\n  }\n  var navigation = (g.isDirected() ? g.successors : g.neighbors).bind(g);\n  var acc = [];\n  var visited = {};\n  forEach(vs, function(v) {\n    if (!g.hasNode(v)) {\n      throw new Error(\"Graph does not have node: \" + v);\n    }\n    doDfs(g, v, order2 === \"post\", visited, navigation, acc);\n  });\n  return acc;\n}\nfunction doDfs(g, v, postorder2, visited, navigation, acc) {\n  if (!Object.prototype.hasOwnProperty.call(visited, v)) {\n    visited[v] = true;\n    if (!postorder2) {\n      acc.push(v);\n    }\n    forEach(navigation(v), function(w) {\n      doDfs(g, w, postorder2, visited, navigation, acc);\n    });\n    if (postorder2) {\n      acc.push(v);\n    }\n  }\n}\nfunction postorder$1(g, vs) {\n  return dfs$1(g, vs, \"post\");\n}\nfunction preorder(g, vs) {\n  return dfs$1(g, vs, \"pre\");\n}\nnetworkSimplex.initLowLimValues = initLowLimValues;\nnetworkSimplex.initCutValues = initCutValues;\nnetworkSimplex.calcCutValue = calcCutValue;\nnetworkSimplex.leaveEdge = leaveEdge;\nnetworkSimplex.enterEdge = enterEdge;\nnetworkSimplex.exchangeEdges = exchangeEdges;\nfunction networkSimplex(g) {\n  g = simplify(g);\n  longestPath(g);\n  var t = feasibleTree(g);\n  initLowLimValues(t);\n  initCutValues(t, g);\n  var e, f;\n  while (e = leaveEdge(t)) {\n    f = enterEdge(t, g, e);\n    exchangeEdges(t, g, e, f);\n  }\n}\nfunction initCutValues(t, g) {\n  var vs = postorder$1(t, t.nodes());\n  vs = vs.slice(0, vs.length - 1);\n  forEach(vs, function(v) {\n    assignCutValue(t, g, v);\n  });\n}\nfunction assignCutValue(t, g, child) {\n  var childLab = t.node(child);\n  var parent = childLab.parent;\n  t.edge(child, parent).cutvalue = calcCutValue(t, g, child);\n}\nfunction calcCutValue(t, g, child) {\n  var childLab = t.node(child);\n  var parent = childLab.parent;\n  var childIsTail = true;\n  var graphEdge = g.edge(child, parent);\n  var cutValue = 0;\n  if (!graphEdge) {\n    childIsTail = false;\n    graphEdge = g.edge(parent, child);\n  }\n  cutValue = graphEdge.weight;\n  forEach(g.nodeEdges(child), function(e) {\n    var isOutEdge = e.v === child, other = isOutEdge ? e.w : e.v;\n    if (other !== parent) {\n      var pointsToHead = isOutEdge === childIsTail, otherWeight = g.edge(e).weight;\n      cutValue += pointsToHead ? otherWeight : -otherWeight;\n      if (isTreeEdge(t, child, other)) {\n        var otherCutValue = t.edge(child, other).cutvalue;\n        cutValue += pointsToHead ? -otherCutValue : otherCutValue;\n      }\n    }\n  });\n  return cutValue;\n}\nfunction initLowLimValues(tree, root) {\n  if (arguments.length < 2) {\n    root = tree.nodes()[0];\n  }\n  dfsAssignLowLim(tree, {}, 1, root);\n}\nfunction dfsAssignLowLim(tree, visited, nextLim, v, parent) {\n  var low = nextLim;\n  var label = tree.node(v);\n  visited[v] = true;\n  forEach(tree.neighbors(v), function(w) {\n    if (!Object.prototype.hasOwnProperty.call(visited, w)) {\n      nextLim = dfsAssignLowLim(tree, visited, nextLim, w, v);\n    }\n  });\n  label.low = low;\n  label.lim = nextLim++;\n  if (parent) {\n    label.parent = parent;\n  } else {\n    delete label.parent;\n  }\n  return nextLim;\n}\nfunction leaveEdge(tree) {\n  return find(tree.edges(), function(e) {\n    return tree.edge(e).cutvalue < 0;\n  });\n}\nfunction enterEdge(t, g, edge) {\n  var v = edge.v;\n  var w = edge.w;\n  if (!g.hasEdge(v, w)) {\n    v = edge.w;\n    w = edge.v;\n  }\n  var vLabel = t.node(v);\n  var wLabel = t.node(w);\n  var tailLabel = vLabel;\n  var flip = false;\n  if (vLabel.lim > wLabel.lim) {\n    tailLabel = wLabel;\n    flip = true;\n  }\n  var candidates = filter(g.edges(), function(edge2) {\n    return flip === isDescendant(t, t.node(edge2.v), tailLabel) && flip !== isDescendant(t, t.node(edge2.w), tailLabel);\n  });\n  return minBy(candidates, function(edge2) {\n    return slack(g, edge2);\n  });\n}\nfunction exchangeEdges(t, g, e, f) {\n  var v = e.v;\n  var w = e.w;\n  t.removeEdge(v, w);\n  t.setEdge(f.v, f.w, {});\n  initLowLimValues(t);\n  initCutValues(t, g);\n  updateRanks(t, g);\n}\nfunction updateRanks(t, g) {\n  var root = find(t.nodes(), function(v) {\n    return !g.node(v).parent;\n  });\n  var vs = preorder(t, root);\n  vs = vs.slice(1);\n  forEach(vs, function(v) {\n    var parent = t.node(v).parent, edge = g.edge(v, parent), flipped = false;\n    if (!edge) {\n      edge = g.edge(parent, v);\n      flipped = true;\n    }\n    g.node(v).rank = g.node(parent).rank + (flipped ? edge.minlen : -edge.minlen);\n  });\n}\nfunction isTreeEdge(tree, u, v) {\n  return tree.hasEdge(u, v);\n}\nfunction isDescendant(tree, vLabel, rootLabel) {\n  return rootLabel.low <= vLabel.lim && vLabel.lim <= rootLabel.lim;\n}\nfunction rank(g) {\n  switch (g.graph().ranker) {\n    case \"network-simplex\":\n      networkSimplexRanker(g);\n      break;\n    case \"tight-tree\":\n      tightTreeRanker(g);\n      break;\n    case \"longest-path\":\n      longestPathRanker(g);\n      break;\n    default:\n      networkSimplexRanker(g);\n  }\n}\nvar longestPathRanker = longestPath;\nfunction tightTreeRanker(g) {\n  longestPath(g);\n  feasibleTree(g);\n}\nfunction networkSimplexRanker(g) {\n  networkSimplex(g);\n}\nfunction run(g) {\n  var root = addDummyNode(g, \"root\", {}, \"_root\");\n  var depths = treeDepths(g);\n  var height = max(values(depths)) - 1;\n  var nodeSep = 2 * height + 1;\n  g.graph().nestingRoot = root;\n  forEach(g.edges(), function(e) {\n    g.edge(e).minlen *= nodeSep;\n  });\n  var weight = sumWeights(g) + 1;\n  forEach(g.children(), function(child) {\n    dfs(g, root, nodeSep, weight, height, depths, child);\n  });\n  g.graph().nodeRankFactor = nodeSep;\n}\nfunction dfs(g, root, nodeSep, weight, height, depths, v) {\n  var children = g.children(v);\n  if (!children.length) {\n    if (v !== root) {\n      g.setEdge(root, v, { weight: 0, minlen: nodeSep });\n    }\n    return;\n  }\n  var top = addBorderNode$1(g, \"_bt\");\n  var bottom = addBorderNode$1(g, \"_bb\");\n  var label = g.node(v);\n  g.setParent(top, v);\n  label.borderTop = top;\n  g.setParent(bottom, v);\n  label.borderBottom = bottom;\n  forEach(children, function(child) {\n    dfs(g, root, nodeSep, weight, height, depths, child);\n    var childNode = g.node(child);\n    var childTop = childNode.borderTop ? childNode.borderTop : child;\n    var childBottom = childNode.borderBottom ? childNode.borderBottom : child;\n    var thisWeight = childNode.borderTop ? weight : 2 * weight;\n    var minlen = childTop !== childBottom ? 1 : height - depths[v] + 1;\n    g.setEdge(top, childTop, {\n      weight: thisWeight,\n      minlen,\n      nestingEdge: true\n    });\n    g.setEdge(childBottom, bottom, {\n      weight: thisWeight,\n      minlen,\n      nestingEdge: true\n    });\n  });\n  if (!g.parent(v)) {\n    g.setEdge(root, top, { weight: 0, minlen: height + depths[v] });\n  }\n}\nfunction treeDepths(g) {\n  var depths = {};\n  function dfs2(v, depth) {\n    var children = g.children(v);\n    if (children && children.length) {\n      forEach(children, function(child) {\n        dfs2(child, depth + 1);\n      });\n    }\n    depths[v] = depth;\n  }\n  forEach(g.children(), function(v) {\n    dfs2(v, 1);\n  });\n  return depths;\n}\nfunction sumWeights(g) {\n  return reduce(\n    g.edges(),\n    function(acc, e) {\n      return acc + g.edge(e).weight;\n    },\n    0\n  );\n}\nfunction cleanup(g) {\n  var graphLabel = g.graph();\n  g.removeNode(graphLabel.nestingRoot);\n  delete graphLabel.nestingRoot;\n  forEach(g.edges(), function(e) {\n    var edge = g.edge(e);\n    if (edge.nestingEdge) {\n      g.removeEdge(e);\n    }\n  });\n}\nfunction addSubgraphConstraints(g, cg, vs) {\n  var prev = {}, rootPrev;\n  forEach(vs, function(v) {\n    var child = g.parent(v), parent, prevChild;\n    while (child) {\n      parent = g.parent(child);\n      if (parent) {\n        prevChild = prev[parent];\n        prev[parent] = child;\n      } else {\n        prevChild = rootPrev;\n        rootPrev = child;\n      }\n      if (prevChild && prevChild !== child) {\n        cg.setEdge(prevChild, child);\n        return;\n      }\n      child = parent;\n    }\n  });\n}\nfunction buildLayerGraph(g, rank2, relationship) {\n  var root = createRootNode(g), result = new Graph({ compound: true }).setGraph({ root }).setDefaultNodeLabel(function(v) {\n    return g.node(v);\n  });\n  forEach(g.nodes(), function(v) {\n    var node = g.node(v), parent = g.parent(v);\n    if (node.rank === rank2 || node.minRank <= rank2 && rank2 <= node.maxRank) {\n      result.setNode(v);\n      result.setParent(v, parent || root);\n      forEach(g[relationship](v), function(e) {\n        var u = e.v === v ? e.w : e.v, edge = result.edge(u, v), weight = !isUndefined(edge) ? edge.weight : 0;\n        result.setEdge(u, v, { weight: g.edge(e).weight + weight });\n      });\n      if (Object.prototype.hasOwnProperty.call(node, \"minRank\")) {\n        result.setNode(v, {\n          borderLeft: node.borderLeft[rank2],\n          borderRight: node.borderRight[rank2]\n        });\n      }\n    }\n  });\n  return result;\n}\nfunction createRootNode(g) {\n  var v;\n  while (g.hasNode(v = uniqueId(\"_root\"))) ;\n  return v;\n}\nfunction crossCount(g, layering) {\n  var cc = 0;\n  for (var i = 1; i < layering.length; ++i) {\n    cc += twoLayerCrossCount(g, layering[i - 1], layering[i]);\n  }\n  return cc;\n}\nfunction twoLayerCrossCount(g, northLayer, southLayer) {\n  var southPos = zipObject(\n    southLayer,\n    map(southLayer, function(v, i) {\n      return i;\n    })\n  );\n  var southEntries = flatten(\n    map(northLayer, function(v) {\n      return sortBy(\n        map(g.outEdges(v), function(e) {\n          return { pos: southPos[e.w], weight: g.edge(e).weight };\n        }),\n        \"pos\"\n      );\n    })\n  );\n  var firstIndex = 1;\n  while (firstIndex < southLayer.length) firstIndex <<= 1;\n  var treeSize = 2 * firstIndex - 1;\n  firstIndex -= 1;\n  var tree = map(new Array(treeSize), function() {\n    return 0;\n  });\n  var cc = 0;\n  forEach(\n    // @ts-expect-error\n    southEntries.forEach(function(entry) {\n      var index = entry.pos + firstIndex;\n      tree[index] += entry.weight;\n      var weightSum = 0;\n      while (index > 0) {\n        if (index % 2) {\n          weightSum += tree[index + 1];\n        }\n        index = index - 1 >> 1;\n        tree[index] += entry.weight;\n      }\n      cc += entry.weight * weightSum;\n    })\n  );\n  return cc;\n}\nfunction initOrder(g) {\n  var visited = {};\n  var simpleNodes = filter(g.nodes(), function(v) {\n    return !g.children(v).length;\n  });\n  var maxRank2 = max(\n    map(simpleNodes, function(v) {\n      return g.node(v).rank;\n    })\n  );\n  var layers = map(range(maxRank2 + 1), function() {\n    return [];\n  });\n  function dfs2(v) {\n    if (has(visited, v)) return;\n    visited[v] = true;\n    var node = g.node(v);\n    layers[node.rank].push(v);\n    forEach(g.successors(v), dfs2);\n  }\n  var orderedVs = sortBy(simpleNodes, function(v) {\n    return g.node(v).rank;\n  });\n  forEach(orderedVs, dfs2);\n  return layers;\n}\nfunction barycenter(g, movable) {\n  return map(movable, function(v) {\n    var inV = g.inEdges(v);\n    if (!inV.length) {\n      return { v };\n    } else {\n      var result = reduce(\n        inV,\n        function(acc, e) {\n          var edge = g.edge(e), nodeU = g.node(e.v);\n          return {\n            sum: acc.sum + edge.weight * nodeU.order,\n            weight: acc.weight + edge.weight\n          };\n        },\n        { sum: 0, weight: 0 }\n      );\n      return {\n        v,\n        barycenter: result.sum / result.weight,\n        weight: result.weight\n      };\n    }\n  });\n}\nfunction resolveConflicts(entries, cg) {\n  var mappedEntries = {};\n  forEach(entries, function(entry, i) {\n    var tmp = mappedEntries[entry.v] = {\n      indegree: 0,\n      in: [],\n      out: [],\n      vs: [entry.v],\n      i\n    };\n    if (!isUndefined(entry.barycenter)) {\n      tmp.barycenter = entry.barycenter;\n      tmp.weight = entry.weight;\n    }\n  });\n  forEach(cg.edges(), function(e) {\n    var entryV = mappedEntries[e.v];\n    var entryW = mappedEntries[e.w];\n    if (!isUndefined(entryV) && !isUndefined(entryW)) {\n      entryW.indegree++;\n      entryV.out.push(mappedEntries[e.w]);\n    }\n  });\n  var sourceSet = filter(mappedEntries, function(entry) {\n    return !entry.indegree;\n  });\n  return doResolveConflicts(sourceSet);\n}\nfunction doResolveConflicts(sourceSet) {\n  var entries = [];\n  function handleIn(vEntry) {\n    return function(uEntry) {\n      if (uEntry.merged) {\n        return;\n      }\n      if (isUndefined(uEntry.barycenter) || isUndefined(vEntry.barycenter) || uEntry.barycenter >= vEntry.barycenter) {\n        mergeEntries(vEntry, uEntry);\n      }\n    };\n  }\n  function handleOut(vEntry) {\n    return function(wEntry) {\n      wEntry[\"in\"].push(vEntry);\n      if (--wEntry.indegree === 0) {\n        sourceSet.push(wEntry);\n      }\n    };\n  }\n  while (sourceSet.length) {\n    var entry = sourceSet.pop();\n    entries.push(entry);\n    forEach(entry[\"in\"].reverse(), handleIn(entry));\n    forEach(entry.out, handleOut(entry));\n  }\n  return map(\n    filter(entries, function(entry2) {\n      return !entry2.merged;\n    }),\n    function(entry2) {\n      return pick(entry2, [\"vs\", \"i\", \"barycenter\", \"weight\"]);\n    }\n  );\n}\nfunction mergeEntries(target, source) {\n  var sum = 0;\n  var weight = 0;\n  if (target.weight) {\n    sum += target.barycenter * target.weight;\n    weight += target.weight;\n  }\n  if (source.weight) {\n    sum += source.barycenter * source.weight;\n    weight += source.weight;\n  }\n  target.vs = source.vs.concat(target.vs);\n  target.barycenter = sum / weight;\n  target.weight = weight;\n  target.i = Math.min(source.i, target.i);\n  source.merged = true;\n}\nfunction sort(entries, biasRight) {\n  var parts = partition(entries, function(entry) {\n    return Object.prototype.hasOwnProperty.call(entry, \"barycenter\");\n  });\n  var sortable = parts.lhs, unsortable = sortBy(parts.rhs, function(entry) {\n    return -entry.i;\n  }), vs = [], sum = 0, weight = 0, vsIndex = 0;\n  sortable.sort(compareWithBias(!!biasRight));\n  vsIndex = consumeUnsortable(vs, unsortable, vsIndex);\n  forEach(sortable, function(entry) {\n    vsIndex += entry.vs.length;\n    vs.push(entry.vs);\n    sum += entry.barycenter * entry.weight;\n    weight += entry.weight;\n    vsIndex = consumeUnsortable(vs, unsortable, vsIndex);\n  });\n  var result = { vs: flatten(vs) };\n  if (weight) {\n    result.barycenter = sum / weight;\n    result.weight = weight;\n  }\n  return result;\n}\nfunction consumeUnsortable(vs, unsortable, index) {\n  var last$1;\n  while (unsortable.length && (last$1 = last(unsortable)).i <= index) {\n    unsortable.pop();\n    vs.push(last$1.vs);\n    index++;\n  }\n  return index;\n}\nfunction compareWithBias(bias) {\n  return function(entryV, entryW) {\n    if (entryV.barycenter < entryW.barycenter) {\n      return -1;\n    } else if (entryV.barycenter > entryW.barycenter) {\n      return 1;\n    }\n    return !bias ? entryV.i - entryW.i : entryW.i - entryV.i;\n  };\n}\nfunction sortSubgraph(g, v, cg, biasRight) {\n  var movable = g.children(v);\n  var node = g.node(v);\n  var bl = node ? node.borderLeft : void 0;\n  var br = node ? node.borderRight : void 0;\n  var subgraphs = {};\n  if (bl) {\n    movable = filter(movable, function(w) {\n      return w !== bl && w !== br;\n    });\n  }\n  var barycenters = barycenter(g, movable);\n  forEach(barycenters, function(entry) {\n    if (g.children(entry.v).length) {\n      var subgraphResult = sortSubgraph(g, entry.v, cg, biasRight);\n      subgraphs[entry.v] = subgraphResult;\n      if (Object.prototype.hasOwnProperty.call(subgraphResult, \"barycenter\")) {\n        mergeBarycenters(entry, subgraphResult);\n      }\n    }\n  });\n  var entries = resolveConflicts(barycenters, cg);\n  expandSubgraphs(entries, subgraphs);\n  var result = sort(entries, biasRight);\n  if (bl) {\n    result.vs = flatten([bl, result.vs, br]);\n    if (g.predecessors(bl).length) {\n      var blPred = g.node(g.predecessors(bl)[0]), brPred = g.node(g.predecessors(br)[0]);\n      if (!Object.prototype.hasOwnProperty.call(result, \"barycenter\")) {\n        result.barycenter = 0;\n        result.weight = 0;\n      }\n      result.barycenter = (result.barycenter * result.weight + blPred.order + brPred.order) / (result.weight + 2);\n      result.weight += 2;\n    }\n  }\n  return result;\n}\nfunction expandSubgraphs(entries, subgraphs) {\n  forEach(entries, function(entry) {\n    entry.vs = flatten(\n      entry.vs.map(function(v) {\n        if (subgraphs[v]) {\n          return subgraphs[v].vs;\n        }\n        return v;\n      })\n    );\n  });\n}\nfunction mergeBarycenters(target, other) {\n  if (!isUndefined(target.barycenter)) {\n    target.barycenter = (target.barycenter * target.weight + other.barycenter * other.weight) / (target.weight + other.weight);\n    target.weight += other.weight;\n  } else {\n    target.barycenter = other.barycenter;\n    target.weight = other.weight;\n  }\n}\nfunction order(g) {\n  var maxRank$1 = maxRank(g), downLayerGraphs = buildLayerGraphs(g, range(1, maxRank$1 + 1), \"inEdges\"), upLayerGraphs = buildLayerGraphs(g, range(maxRank$1 - 1, -1, -1), \"outEdges\");\n  var layering = initOrder(g);\n  assignOrder(g, layering);\n  var bestCC = Number.POSITIVE_INFINITY, best;\n  for (var i = 0, lastBest = 0; lastBest < 4; ++i, ++lastBest) {\n    sweepLayerGraphs(i % 2 ? downLayerGraphs : upLayerGraphs, i % 4 >= 2);\n    layering = buildLayerMatrix(g);\n    var cc = crossCount(g, layering);\n    if (cc < bestCC) {\n      lastBest = 0;\n      best = cloneDeep(layering);\n      bestCC = cc;\n    }\n  }\n  assignOrder(g, best);\n}\nfunction buildLayerGraphs(g, ranks, relationship) {\n  return map(ranks, function(rank2) {\n    return buildLayerGraph(g, rank2, relationship);\n  });\n}\nfunction sweepLayerGraphs(layerGraphs, biasRight) {\n  var cg = new Graph();\n  forEach(layerGraphs, function(lg) {\n    var root = lg.graph().root;\n    var sorted = sortSubgraph(lg, root, cg, biasRight);\n    forEach(sorted.vs, function(v, i) {\n      lg.node(v).order = i;\n    });\n    addSubgraphConstraints(lg, cg, sorted.vs);\n  });\n}\nfunction assignOrder(g, layering) {\n  forEach(layering, function(layer) {\n    forEach(layer, function(v, i) {\n      g.node(v).order = i;\n    });\n  });\n}\nfunction parentDummyChains(g) {\n  var postorderNums = postorder(g);\n  forEach(g.graph().dummyChains, function(v) {\n    var node = g.node(v);\n    var edgeObj = node.edgeObj;\n    var pathData = findPath(g, postorderNums, edgeObj.v, edgeObj.w);\n    var path = pathData.path;\n    var lca = pathData.lca;\n    var pathIdx = 0;\n    var pathV = path[pathIdx];\n    var ascending = true;\n    while (v !== edgeObj.w) {\n      node = g.node(v);\n      if (ascending) {\n        while ((pathV = path[pathIdx]) !== lca && g.node(pathV).maxRank < node.rank) {\n          pathIdx++;\n        }\n        if (pathV === lca) {\n          ascending = false;\n        }\n      }\n      if (!ascending) {\n        while (pathIdx < path.length - 1 && g.node(pathV = path[pathIdx + 1]).minRank <= node.rank) {\n          pathIdx++;\n        }\n        pathV = path[pathIdx];\n      }\n      g.setParent(v, pathV);\n      v = g.successors(v)[0];\n    }\n  });\n}\nfunction findPath(g, postorderNums, v, w) {\n  var vPath = [];\n  var wPath = [];\n  var low = Math.min(postorderNums[v].low, postorderNums[w].low);\n  var lim = Math.max(postorderNums[v].lim, postorderNums[w].lim);\n  var parent;\n  var lca;\n  parent = v;\n  do {\n    parent = g.parent(parent);\n    vPath.push(parent);\n  } while (parent && (postorderNums[parent].low > low || lim > postorderNums[parent].lim));\n  lca = parent;\n  parent = w;\n  while ((parent = g.parent(parent)) !== lca) {\n    wPath.push(parent);\n  }\n  return { path: vPath.concat(wPath.reverse()), lca };\n}\nfunction postorder(g) {\n  var result = {};\n  var lim = 0;\n  function dfs2(v) {\n    var low = lim;\n    forEach(g.children(v), dfs2);\n    result[v] = { low, lim: lim++ };\n  }\n  forEach(g.children(), dfs2);\n  return result;\n}\nfunction findType1Conflicts(g, layering) {\n  var conflicts = {};\n  function visitLayer(prevLayer, layer) {\n    var k0 = 0, scanPos = 0, prevLayerLength = prevLayer.length, lastNode = last(layer);\n    forEach(layer, function(v, i) {\n      var w = findOtherInnerSegmentNode(g, v), k1 = w ? g.node(w).order : prevLayerLength;\n      if (w || v === lastNode) {\n        forEach(layer.slice(scanPos, i + 1), function(scanNode) {\n          forEach(g.predecessors(scanNode), function(u) {\n            var uLabel = g.node(u), uPos = uLabel.order;\n            if ((uPos < k0 || k1 < uPos) && !(uLabel.dummy && g.node(scanNode).dummy)) {\n              addConflict(conflicts, u, scanNode);\n            }\n          });\n        });\n        scanPos = i + 1;\n        k0 = k1;\n      }\n    });\n    return layer;\n  }\n  reduce(layering, visitLayer);\n  return conflicts;\n}\nfunction findType2Conflicts(g, layering) {\n  var conflicts = {};\n  function scan(south, southPos, southEnd, prevNorthBorder, nextNorthBorder) {\n    var v;\n    forEach(range(southPos, southEnd), function(i) {\n      v = south[i];\n      if (g.node(v).dummy) {\n        forEach(g.predecessors(v), function(u) {\n          var uNode = g.node(u);\n          if (uNode.dummy && (uNode.order < prevNorthBorder || uNode.order > nextNorthBorder)) {\n            addConflict(conflicts, u, v);\n          }\n        });\n      }\n    });\n  }\n  function visitLayer(north, south) {\n    var prevNorthPos = -1, nextNorthPos, southPos = 0;\n    forEach(south, function(v, southLookahead) {\n      if (g.node(v).dummy === \"border\") {\n        var predecessors = g.predecessors(v);\n        if (predecessors.length) {\n          nextNorthPos = g.node(predecessors[0]).order;\n          scan(south, southPos, southLookahead, prevNorthPos, nextNorthPos);\n          southPos = southLookahead;\n          prevNorthPos = nextNorthPos;\n        }\n      }\n      scan(south, southPos, south.length, nextNorthPos, north.length);\n    });\n    return south;\n  }\n  reduce(layering, visitLayer);\n  return conflicts;\n}\nfunction findOtherInnerSegmentNode(g, v) {\n  if (g.node(v).dummy) {\n    return find(g.predecessors(v), function(u) {\n      return g.node(u).dummy;\n    });\n  }\n}\nfunction addConflict(conflicts, v, w) {\n  if (v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n  var conflictsV = conflicts[v];\n  if (!conflictsV) {\n    conflicts[v] = conflictsV = {};\n  }\n  conflictsV[w] = true;\n}\nfunction hasConflict(conflicts, v, w) {\n  if (v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n  return !!conflicts[v] && Object.prototype.hasOwnProperty.call(conflicts[v], w);\n}\nfunction verticalAlignment(g, layering, conflicts, neighborFn) {\n  var root = {}, align = {}, pos = {};\n  forEach(layering, function(layer) {\n    forEach(layer, function(v, order2) {\n      root[v] = v;\n      align[v] = v;\n      pos[v] = order2;\n    });\n  });\n  forEach(layering, function(layer) {\n    var prevIdx = -1;\n    forEach(layer, function(v) {\n      var ws = neighborFn(v);\n      if (ws.length) {\n        ws = sortBy(ws, function(w2) {\n          return pos[w2];\n        });\n        var mp = (ws.length - 1) / 2;\n        for (var i = Math.floor(mp), il = Math.ceil(mp); i <= il; ++i) {\n          var w = ws[i];\n          if (align[v] === v && prevIdx < pos[w] && !hasConflict(conflicts, v, w)) {\n            align[w] = v;\n            align[v] = root[v] = root[w];\n            prevIdx = pos[w];\n          }\n        }\n      }\n    });\n  });\n  return { root, align };\n}\nfunction horizontalCompaction(g, layering, root, align, reverseSep) {\n  var xs = {}, blockG = buildBlockGraph(g, layering, root, reverseSep), borderType = reverseSep ? \"borderLeft\" : \"borderRight\";\n  function iterate(setXsFunc, nextNodesFunc) {\n    var stack = blockG.nodes();\n    var elem = stack.pop();\n    var visited = {};\n    while (elem) {\n      if (visited[elem]) {\n        setXsFunc(elem);\n      } else {\n        visited[elem] = true;\n        stack.push(elem);\n        stack = stack.concat(nextNodesFunc(elem));\n      }\n      elem = stack.pop();\n    }\n  }\n  function pass1(elem) {\n    xs[elem] = blockG.inEdges(elem).reduce(function(acc, e) {\n      return Math.max(acc, xs[e.v] + blockG.edge(e));\n    }, 0);\n  }\n  function pass2(elem) {\n    var min2 = blockG.outEdges(elem).reduce(function(acc, e) {\n      return Math.min(acc, xs[e.w] - blockG.edge(e));\n    }, Number.POSITIVE_INFINITY);\n    var node = g.node(elem);\n    if (min2 !== Number.POSITIVE_INFINITY && node.borderType !== borderType) {\n      xs[elem] = Math.max(xs[elem], min2);\n    }\n  }\n  iterate(pass1, blockG.predecessors.bind(blockG));\n  iterate(pass2, blockG.successors.bind(blockG));\n  forEach(align, function(v) {\n    xs[v] = xs[root[v]];\n  });\n  return xs;\n}\nfunction buildBlockGraph(g, layering, root, reverseSep) {\n  var blockGraph = new Graph(), graphLabel = g.graph(), sepFn = sep(graphLabel.nodesep, graphLabel.edgesep, reverseSep);\n  forEach(layering, function(layer) {\n    var u;\n    forEach(layer, function(v) {\n      var vRoot = root[v];\n      blockGraph.setNode(vRoot);\n      if (u) {\n        var uRoot = root[u], prevMax = blockGraph.edge(uRoot, vRoot);\n        blockGraph.setEdge(uRoot, vRoot, Math.max(sepFn(g, v, u), prevMax || 0));\n      }\n      u = v;\n    });\n  });\n  return blockGraph;\n}\nfunction findSmallestWidthAlignment(g, xss) {\n  return minBy(values(xss), function(xs) {\n    var max2 = Number.NEGATIVE_INFINITY;\n    var min2 = Number.POSITIVE_INFINITY;\n    forIn(xs, function(x, v) {\n      var halfWidth = width(g, v) / 2;\n      max2 = Math.max(x + halfWidth, max2);\n      min2 = Math.min(x - halfWidth, min2);\n    });\n    return max2 - min2;\n  });\n}\nfunction alignCoordinates(xss, alignTo) {\n  var alignToVals = values(alignTo), alignToMin = min(alignToVals), alignToMax = max(alignToVals);\n  forEach([\"u\", \"d\"], function(vert) {\n    forEach([\"l\", \"r\"], function(horiz) {\n      var alignment = vert + horiz, xs = xss[alignment], delta;\n      if (xs === alignTo) return;\n      var xsVals = values(xs);\n      delta = horiz === \"l\" ? alignToMin - min(xsVals) : alignToMax - max(xsVals);\n      if (delta) {\n        xss[alignment] = mapValues(xs, function(x) {\n          return x + delta;\n        });\n      }\n    });\n  });\n}\nfunction balance(xss, align) {\n  return mapValues(xss.ul, function(ignore, v) {\n    if (align) {\n      return xss[align.toLowerCase()][v];\n    } else {\n      var xs = sortBy(map(xss, v));\n      return (xs[1] + xs[2]) / 2;\n    }\n  });\n}\nfunction positionX(g) {\n  var layering = buildLayerMatrix(g);\n  var conflicts = merge(findType1Conflicts(g, layering), findType2Conflicts(g, layering));\n  var xss = {};\n  var adjustedLayering;\n  forEach([\"u\", \"d\"], function(vert) {\n    adjustedLayering = vert === \"u\" ? layering : values(layering).reverse();\n    forEach([\"l\", \"r\"], function(horiz) {\n      if (horiz === \"r\") {\n        adjustedLayering = map(adjustedLayering, function(inner) {\n          return values(inner).reverse();\n        });\n      }\n      var neighborFn = (vert === \"u\" ? g.predecessors : g.successors).bind(g);\n      var align = verticalAlignment(g, adjustedLayering, conflicts, neighborFn);\n      var xs = horizontalCompaction(g, adjustedLayering, align.root, align.align, horiz === \"r\");\n      if (horiz === \"r\") {\n        xs = mapValues(xs, function(x) {\n          return -x;\n        });\n      }\n      xss[vert + horiz] = xs;\n    });\n  });\n  var smallestWidth = findSmallestWidthAlignment(g, xss);\n  alignCoordinates(xss, smallestWidth);\n  return balance(xss, g.graph().align);\n}\nfunction sep(nodeSep, edgeSep, reverseSep) {\n  return function(g, v, w) {\n    var vLabel = g.node(v);\n    var wLabel = g.node(w);\n    var sum = 0;\n    var delta;\n    sum += vLabel.width / 2;\n    if (Object.prototype.hasOwnProperty.call(vLabel, \"labelpos\")) {\n      switch (vLabel.labelpos.toLowerCase()) {\n        case \"l\":\n          delta = -vLabel.width / 2;\n          break;\n        case \"r\":\n          delta = vLabel.width / 2;\n          break;\n      }\n    }\n    if (delta) {\n      sum += reverseSep ? delta : -delta;\n    }\n    delta = 0;\n    sum += (vLabel.dummy ? edgeSep : nodeSep) / 2;\n    sum += (wLabel.dummy ? edgeSep : nodeSep) / 2;\n    sum += wLabel.width / 2;\n    if (Object.prototype.hasOwnProperty.call(wLabel, \"labelpos\")) {\n      switch (wLabel.labelpos.toLowerCase()) {\n        case \"l\":\n          delta = wLabel.width / 2;\n          break;\n        case \"r\":\n          delta = -wLabel.width / 2;\n          break;\n      }\n    }\n    if (delta) {\n      sum += reverseSep ? delta : -delta;\n    }\n    delta = 0;\n    return sum;\n  };\n}\nfunction width(g, v) {\n  return g.node(v).width;\n}\nfunction position(g) {\n  g = asNonCompoundGraph(g);\n  positionY(g);\n  forOwn(positionX(g), function(x, v) {\n    g.node(v).x = x;\n  });\n}\nfunction positionY(g) {\n  var layering = buildLayerMatrix(g);\n  var rankSep = g.graph().ranksep;\n  var prevY = 0;\n  forEach(layering, function(layer) {\n    var maxHeight = max(\n      map(layer, function(v) {\n        return g.node(v).height;\n      })\n    );\n    forEach(layer, function(v) {\n      g.node(v).y = prevY + maxHeight / 2;\n    });\n    prevY += maxHeight + rankSep;\n  });\n}\nfunction layout(g, opts) {\n  var time = notime;\n  time(\"layout\", () => {\n    var layoutGraph = time(\"  buildLayoutGraph\", () => buildLayoutGraph(g));\n    time(\"  runLayout\", () => runLayout(layoutGraph, time));\n    time(\"  updateInputGraph\", () => updateInputGraph(g, layoutGraph));\n  });\n}\nfunction runLayout(g, time) {\n  time(\"    makeSpaceForEdgeLabels\", () => makeSpaceForEdgeLabels(g));\n  time(\"    removeSelfEdges\", () => removeSelfEdges(g));\n  time(\"    acyclic\", () => run$2(g));\n  time(\"    nestingGraph.run\", () => run(g));\n  time(\"    rank\", () => rank(asNonCompoundGraph(g)));\n  time(\"    injectEdgeLabelProxies\", () => injectEdgeLabelProxies(g));\n  time(\"    removeEmptyRanks\", () => removeEmptyRanks(g));\n  time(\"    nestingGraph.cleanup\", () => cleanup(g));\n  time(\"    normalizeRanks\", () => normalizeRanks(g));\n  time(\"    assignRankMinMax\", () => assignRankMinMax(g));\n  time(\"    removeEdgeLabelProxies\", () => removeEdgeLabelProxies(g));\n  time(\"    normalize.run\", () => run$1(g));\n  time(\"    parentDummyChains\", () => parentDummyChains(g));\n  time(\"    addBorderSegments\", () => addBorderSegments(g));\n  time(\"    order\", () => order(g));\n  time(\"    insertSelfEdges\", () => insertSelfEdges(g));\n  time(\"    adjustCoordinateSystem\", () => adjust(g));\n  time(\"    position\", () => position(g));\n  time(\"    positionSelfEdges\", () => positionSelfEdges(g));\n  time(\"    removeBorderNodes\", () => removeBorderNodes(g));\n  time(\"    normalize.undo\", () => undo(g));\n  time(\"    fixupEdgeLabelCoords\", () => fixupEdgeLabelCoords(g));\n  time(\"    undoCoordinateSystem\", () => undo$1(g));\n  time(\"    translateGraph\", () => translateGraph(g));\n  time(\"    assignNodeIntersects\", () => assignNodeIntersects(g));\n  time(\"    reversePoints\", () => reversePointsForReversedEdges(g));\n  time(\"    acyclic.undo\", () => undo$2(g));\n}\nfunction updateInputGraph(inputGraph, layoutGraph) {\n  forEach(inputGraph.nodes(), function(v) {\n    var inputLabel = inputGraph.node(v);\n    var layoutLabel = layoutGraph.node(v);\n    if (inputLabel) {\n      inputLabel.x = layoutLabel.x;\n      inputLabel.y = layoutLabel.y;\n      if (layoutGraph.children(v).length) {\n        inputLabel.width = layoutLabel.width;\n        inputLabel.height = layoutLabel.height;\n      }\n    }\n  });\n  forEach(inputGraph.edges(), function(e) {\n    var inputLabel = inputGraph.edge(e);\n    var layoutLabel = layoutGraph.edge(e);\n    inputLabel.points = layoutLabel.points;\n    if (Object.prototype.hasOwnProperty.call(layoutLabel, \"x\")) {\n      inputLabel.x = layoutLabel.x;\n      inputLabel.y = layoutLabel.y;\n    }\n  });\n  inputGraph.graph().width = layoutGraph.graph().width;\n  inputGraph.graph().height = layoutGraph.graph().height;\n}\nvar graphNumAttrs = [\"nodesep\", \"edgesep\", \"ranksep\", \"marginx\", \"marginy\"];\nvar graphDefaults = { ranksep: 50, edgesep: 20, nodesep: 50, rankdir: \"tb\" };\nvar graphAttrs = [\"acyclicer\", \"ranker\", \"rankdir\", \"align\"];\nvar nodeNumAttrs = [\"width\", \"height\"];\nvar nodeDefaults = { width: 0, height: 0 };\nvar edgeNumAttrs = [\"minlen\", \"weight\", \"width\", \"height\", \"labeloffset\"];\nvar edgeDefaults = {\n  minlen: 1,\n  weight: 1,\n  width: 0,\n  height: 0,\n  labeloffset: 10,\n  labelpos: \"r\"\n};\nvar edgeAttrs = [\"labelpos\"];\nfunction buildLayoutGraph(inputGraph) {\n  var g = new Graph({ multigraph: true, compound: true });\n  var graph = canonicalize(inputGraph.graph());\n  g.setGraph(\n    merge({}, graphDefaults, selectNumberAttrs(graph, graphNumAttrs), pick(graph, graphAttrs))\n  );\n  forEach(inputGraph.nodes(), function(v) {\n    var node = canonicalize(inputGraph.node(v));\n    g.setNode(v, defaults(selectNumberAttrs(node, nodeNumAttrs), nodeDefaults));\n    g.setParent(v, inputGraph.parent(v));\n  });\n  forEach(inputGraph.edges(), function(e) {\n    var edge = canonicalize(inputGraph.edge(e));\n    g.setEdge(\n      e,\n      merge({}, edgeDefaults, selectNumberAttrs(edge, edgeNumAttrs), pick(edge, edgeAttrs))\n    );\n  });\n  return g;\n}\nfunction makeSpaceForEdgeLabels(g) {\n  var graph = g.graph();\n  graph.ranksep /= 2;\n  forEach(g.edges(), function(e) {\n    var edge = g.edge(e);\n    edge.minlen *= 2;\n    if (edge.labelpos.toLowerCase() !== \"c\") {\n      if (graph.rankdir === \"TB\" || graph.rankdir === \"BT\") {\n        edge.width += edge.labeloffset;\n      } else {\n        edge.height += edge.labeloffset;\n      }\n    }\n  });\n}\nfunction injectEdgeLabelProxies(g) {\n  forEach(g.edges(), function(e) {\n    var edge = g.edge(e);\n    if (edge.width && edge.height) {\n      var v = g.node(e.v);\n      var w = g.node(e.w);\n      var label = { rank: (w.rank - v.rank) / 2 + v.rank, e };\n      addDummyNode(g, \"edge-proxy\", label, \"_ep\");\n    }\n  });\n}\nfunction assignRankMinMax(g) {\n  var maxRank2 = 0;\n  forEach(g.nodes(), function(v) {\n    var node = g.node(v);\n    if (node.borderTop) {\n      node.minRank = g.node(node.borderTop).rank;\n      node.maxRank = g.node(node.borderBottom).rank;\n      maxRank2 = max(maxRank2, node.maxRank);\n    }\n  });\n  g.graph().maxRank = maxRank2;\n}\nfunction removeEdgeLabelProxies(g) {\n  forEach(g.nodes(), function(v) {\n    var node = g.node(v);\n    if (node.dummy === \"edge-proxy\") {\n      g.edge(node.e).labelRank = node.rank;\n      g.removeNode(v);\n    }\n  });\n}\nfunction translateGraph(g) {\n  var minX = Number.POSITIVE_INFINITY;\n  var maxX = 0;\n  var minY = Number.POSITIVE_INFINITY;\n  var maxY = 0;\n  var graphLabel = g.graph();\n  var marginX = graphLabel.marginx || 0;\n  var marginY = graphLabel.marginy || 0;\n  function getExtremes(attrs) {\n    var x = attrs.x;\n    var y = attrs.y;\n    var w = attrs.width;\n    var h = attrs.height;\n    minX = Math.min(minX, x - w / 2);\n    maxX = Math.max(maxX, x + w / 2);\n    minY = Math.min(minY, y - h / 2);\n    maxY = Math.max(maxY, y + h / 2);\n  }\n  forEach(g.nodes(), function(v) {\n    getExtremes(g.node(v));\n  });\n  forEach(g.edges(), function(e) {\n    var edge = g.edge(e);\n    if (Object.prototype.hasOwnProperty.call(edge, \"x\")) {\n      getExtremes(edge);\n    }\n  });\n  minX -= marginX;\n  minY -= marginY;\n  forEach(g.nodes(), function(v) {\n    var node = g.node(v);\n    node.x -= minX;\n    node.y -= minY;\n  });\n  forEach(g.edges(), function(e) {\n    var edge = g.edge(e);\n    forEach(edge.points, function(p) {\n      p.x -= minX;\n      p.y -= minY;\n    });\n    if (Object.prototype.hasOwnProperty.call(edge, \"x\")) {\n      edge.x -= minX;\n    }\n    if (Object.prototype.hasOwnProperty.call(edge, \"y\")) {\n      edge.y -= minY;\n    }\n  });\n  graphLabel.width = maxX - minX + marginX;\n  graphLabel.height = maxY - minY + marginY;\n}\nfunction assignNodeIntersects(g) {\n  forEach(g.edges(), function(e) {\n    var edge = g.edge(e);\n    var nodeV = g.node(e.v);\n    var nodeW = g.node(e.w);\n    var p1, p2;\n    if (!edge.points) {\n      edge.points = [];\n      p1 = nodeW;\n      p2 = nodeV;\n    } else {\n      p1 = edge.points[0];\n      p2 = edge.points[edge.points.length - 1];\n    }\n    edge.points.unshift(intersectRect(nodeV, p1));\n    edge.points.push(intersectRect(nodeW, p2));\n  });\n}\nfunction fixupEdgeLabelCoords(g) {\n  forEach(g.edges(), function(e) {\n    var edge = g.edge(e);\n    if (Object.prototype.hasOwnProperty.call(edge, \"x\")) {\n      if (edge.labelpos === \"l\" || edge.labelpos === \"r\") {\n        edge.width -= edge.labeloffset;\n      }\n      switch (edge.labelpos) {\n        case \"l\":\n          edge.x -= edge.width / 2 + edge.labeloffset;\n          break;\n        case \"r\":\n          edge.x += edge.width / 2 + edge.labeloffset;\n          break;\n      }\n    }\n  });\n}\nfunction reversePointsForReversedEdges(g) {\n  forEach(g.edges(), function(e) {\n    var edge = g.edge(e);\n    if (edge.reversed) {\n      edge.points.reverse();\n    }\n  });\n}\nfunction removeBorderNodes(g) {\n  forEach(g.nodes(), function(v) {\n    if (g.children(v).length) {\n      var node = g.node(v);\n      var t = g.node(node.borderTop);\n      var b = g.node(node.borderBottom);\n      var l = g.node(last(node.borderLeft));\n      var r = g.node(last(node.borderRight));\n      node.width = Math.abs(r.x - l.x);\n      node.height = Math.abs(b.y - t.y);\n      node.x = l.x + node.width / 2;\n      node.y = t.y + node.height / 2;\n    }\n  });\n  forEach(g.nodes(), function(v) {\n    if (g.node(v).dummy === \"border\") {\n      g.removeNode(v);\n    }\n  });\n}\nfunction removeSelfEdges(g) {\n  forEach(g.edges(), function(e) {\n    if (e.v === e.w) {\n      var node = g.node(e.v);\n      if (!node.selfEdges) {\n        node.selfEdges = [];\n      }\n      node.selfEdges.push({ e, label: g.edge(e) });\n      g.removeEdge(e);\n    }\n  });\n}\nfunction insertSelfEdges(g) {\n  var layers = buildLayerMatrix(g);\n  forEach(layers, function(layer) {\n    var orderShift = 0;\n    forEach(layer, function(v, i) {\n      var node = g.node(v);\n      node.order = i + orderShift;\n      forEach(node.selfEdges, function(selfEdge) {\n        addDummyNode(\n          g,\n          \"selfedge\",\n          {\n            width: selfEdge.label.width,\n            height: selfEdge.label.height,\n            rank: node.rank,\n            order: i + ++orderShift,\n            e: selfEdge.e,\n            label: selfEdge.label\n          },\n          \"_se\"\n        );\n      });\n      delete node.selfEdges;\n    });\n  });\n}\nfunction positionSelfEdges(g) {\n  forEach(g.nodes(), function(v) {\n    var node = g.node(v);\n    if (node.dummy === \"selfedge\") {\n      var selfNode = g.node(node.e.v);\n      var x = selfNode.x + selfNode.width / 2;\n      var y = selfNode.y;\n      var dx = node.x - x;\n      var dy = selfNode.height / 2;\n      g.setEdge(node.e, node.label);\n      g.removeNode(v);\n      node.label.points = [\n        { x: x + 2 * dx / 3, y: y - dy },\n        { x: x + 5 * dx / 6, y: y - dy },\n        { x: x + dx, y },\n        { x: x + 5 * dx / 6, y: y + dy },\n        { x: x + 2 * dx / 3, y: y + dy }\n      ];\n      node.label.x = node.x;\n      node.label.y = node.y;\n    }\n  });\n}\nfunction selectNumberAttrs(obj, attrs) {\n  return mapValues(pick(obj, attrs), Number);\n}\nfunction canonicalize(attrs) {\n  var newAttrs = {};\n  forEach(attrs, function(v, k) {\n    newAttrs[k.toLowerCase()] = v;\n  });\n  return newAttrs;\n}\nexport {\n  layout as l\n};\n//# sourceMappingURL=layout-DzgqTejS.js.map\n"],
  "mappings": "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",
  "names": []
}
