import {
  cloneDeep,
  pick
} from "./chunk-UAJ7CRMG.js";
import {
  toNumber
} from "./chunk-YQTLZH7V.js";
import {
  baseIsEqual,
  get,
  isUndefined
} from "./chunk-IH5FMJ33.js";
import {
  Typewriter,
  _export_sfc,
  isArray,
  isObject,
  root,
  usePrism
} from "./chunk-P22FNQEJ.js";
import {
  Comment,
  Fragment,
  Teleport,
  Text,
  Transition,
  TransitionGroup,
  cloneVNode,
  computed,
  createBaseVNode,
  createBlock,
  createCommentVNode,
  createElementBlock,
  createSlots,
  createStaticVNode,
  createTextVNode,
  createVNode,
  defineComponent,
  effectScope,
  getCurrentInstance,
  getCurrentScope,
  guardReactiveProps,
  h,
  inject,
  isRef,
  markRaw,
  mergeModels,
  mergeProps,
  nextTick,
  normalizeClass,
  normalizeProps,
  normalizeStyle,
  onActivated,
  onBeforeMount,
  onBeforeUnmount,
  onDeactivated,
  onMounted,
  onScopeDispose,
  onUnmounted,
  onUpdated,
  openBlock,
  provide,
  reactive,
  readonly,
  ref,
  renderList,
  renderSlot,
  resolveComponent,
  resolveDynamicComponent,
  shallowRef,
  toDisplayString,
  toHandlers,
  toRef,
  toRefs,
  unref,
  useAttrs,
  useCssVars,
  useModel,
  useSlots,
  vShow,
  warn,
  watch,
  watchEffect,
  withCtx,
  withDirectives,
  withKeys,
  withModifiers
} from "./chunk-HOEYDOSN.js";
import "./chunk-G3PMV62Z.js";

// node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/base-BXVDO6W4.js
import "/Users/Bone/Documents/Github/AI-RagFLow-Api/node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/base.css";
var defaultNamespace = "el";
var statePrefix = "is-";
var _bem = (namespace, block, blockSuffix, element, modifier) => {
  let cls = `${namespace}-${block}`;
  if (blockSuffix) {
    cls += `-${blockSuffix}`;
  }
  if (element) {
    cls += `__${element}`;
  }
  if (modifier) {
    cls += `--${modifier}`;
  }
  return cls;
};
var namespaceContextKey = Symbol("namespaceContextKey");
var useGetDerivedNamespace = (namespaceOverrides) => {
  const derivedNamespace = getCurrentInstance() ? inject(namespaceContextKey, ref(defaultNamespace)) : ref(defaultNamespace);
  const namespace = computed(() => {
    return unref(derivedNamespace) || defaultNamespace;
  });
  return namespace;
};
var useNamespace = (block, namespaceOverrides) => {
  const namespace = useGetDerivedNamespace();
  const b = (blockSuffix = "") => _bem(namespace.value, block, blockSuffix, "", "");
  const e = (element) => element ? _bem(namespace.value, block, "", element, "") : "";
  const m = (modifier) => modifier ? _bem(namespace.value, block, "", "", modifier) : "";
  const be2 = (blockSuffix, element) => blockSuffix && element ? _bem(namespace.value, block, blockSuffix, element, "") : "";
  const em = (element, modifier) => element && modifier ? _bem(namespace.value, block, "", element, modifier) : "";
  const bm = (blockSuffix, modifier) => blockSuffix && modifier ? _bem(namespace.value, block, blockSuffix, "", modifier) : "";
  const bem = (blockSuffix, element, modifier) => blockSuffix && element && modifier ? _bem(namespace.value, block, blockSuffix, element, modifier) : "";
  const is = (name, ...args) => {
    const state = args.length >= 1 ? args[0] : true;
    return name && state ? `${statePrefix}${name}` : "";
  };
  const cssVar = (object) => {
    const styles = {};
    for (const key in object) {
      if (object[key]) {
        styles[`--${namespace.value}-${key}`] = object[key];
      }
    }
    return styles;
  };
  const cssVarBlock = (object) => {
    const styles = {};
    for (const key in object) {
      if (object[key]) {
        styles[`--${namespace.value}-${block}-${key}`] = object[key];
      }
    }
    return styles;
  };
  const cssVarName = (name) => `--${namespace.value}-${name}`;
  const cssVarBlockName = (name) => `--${namespace.value}-${block}-${name}`;
  return {
    namespace,
    b,
    e,
    m,
    be: be2,
    em,
    bm,
    bem,
    is,
    cssVar,
    cssVarName,
    cssVarBlock,
    cssVarBlockName
  };
};
true ? Object.freeze({}) : {};
true ? Object.freeze([]) : [];
var NOOP = () => {
};
var hasOwnProperty = Object.prototype.hasOwnProperty;
var hasOwn = (val, key) => hasOwnProperty.call(val, key);
var isArray2 = Array.isArray;
var isFunction$1 = (val) => typeof val === "function";
var isString$1 = (val) => typeof val === "string";
var isObject2 = (val) => val !== null && typeof val === "object";
var objectToString = Object.prototype.toString;
var toTypeString = (value) => objectToString.call(value);
var isPlainObject = (val) => toTypeString(val) === "[object Object]";
var cacheStringFunction = (fn2) => {
  const cache = /* @__PURE__ */ Object.create(null);
  return (str) => {
    const hit = cache[str];
    return hit || (cache[str] = fn2(str));
  };
};
var camelizeRE = /-(\w)/g;
var camelize = cacheStringFunction(
  (str) => {
    return str.replace(camelizeRE, (_, c) => c ? c.toUpperCase() : "");
  }
);
function fromPairs(pairs) {
  var index = -1, length = pairs == null ? 0 : pairs.length, result = {};
  while (++index < length) {
    var pair = pairs[index];
    result[pair[0]] = pair[1];
  }
  return result;
}
var isUndefined2 = (val) => val === void 0;
var isBoolean = (val) => typeof val === "boolean";
var isNumber = (val) => typeof val === "number";
var isElement = (e) => {
  if (typeof Element === "undefined")
    return false;
  return e instanceof Element;
};
var isStringNumber = (val) => {
  if (!isString$1(val)) {
    return false;
  }
  return !Number.isNaN(Number(val));
};
var __defProp$9 = Object.defineProperty;
var __defProps$6 = Object.defineProperties;
var __getOwnPropDescs$6 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols$b = Object.getOwnPropertySymbols;
var __hasOwnProp$b = Object.prototype.hasOwnProperty;
var __propIsEnum$b = Object.prototype.propertyIsEnumerable;
var __defNormalProp$9 = (obj, key, value) => key in obj ? __defProp$9(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues$9 = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp$b.call(b, prop))
      __defNormalProp$9(a, prop, b[prop]);
  if (__getOwnPropSymbols$b)
    for (var prop of __getOwnPropSymbols$b(b)) {
      if (__propIsEnum$b.call(b, prop))
        __defNormalProp$9(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps$6 = (a, b) => __defProps$6(a, __getOwnPropDescs$6(b));
function computedEager(fn2, options) {
  var _a2;
  const result = shallowRef();
  watchEffect(() => {
    result.value = fn2();
  }, __spreadProps$6(__spreadValues$9({}, options), {
    flush: (_a2 = void 0) != null ? _a2 : "sync"
  }));
  return readonly(result);
}
var _a;
var isClient = typeof window !== "undefined";
var isDef = (val) => typeof val !== "undefined";
var isFunction = (val) => typeof val === "function";
var isString = (val) => typeof val === "string";
var noop = () => {
};
var isIOS = isClient && ((_a = window == null ? void 0 : window.navigator) == null ? void 0 : _a.userAgent) && /iP(ad|hone|od)/.test(window.navigator.userAgent);
function resolveUnref(r) {
  return typeof r === "function" ? r() : unref(r);
}
function createFilterWrapper(filter, fn2) {
  function wrapper(...args) {
    return new Promise((resolve, reject) => {
      Promise.resolve(filter(() => fn2.apply(this, args), { fn: fn2, thisArg: this, args })).then(resolve).catch(reject);
    });
  }
  return wrapper;
}
function throttleFilter(ms, trailing = true, leading = true, rejectOnCancel = false) {
  let lastExec = 0;
  let timer;
  let isLeading = true;
  let lastRejector = noop;
  let lastValue;
  const clear = () => {
    if (timer) {
      clearTimeout(timer);
      timer = void 0;
      lastRejector();
      lastRejector = noop;
    }
  };
  const filter = (_invoke) => {
    const duration = resolveUnref(ms);
    const elapsed = Date.now() - lastExec;
    const invoke = () => {
      return lastValue = _invoke();
    };
    clear();
    if (duration <= 0) {
      lastExec = Date.now();
      return invoke();
    }
    if (elapsed > duration && (leading || !isLeading)) {
      lastExec = Date.now();
      invoke();
    } else if (trailing) {
      lastValue = new Promise((resolve, reject) => {
        lastRejector = rejectOnCancel ? reject : resolve;
        timer = setTimeout(() => {
          lastExec = Date.now();
          isLeading = true;
          resolve(invoke());
          clear();
        }, Math.max(0, duration - elapsed));
      });
    }
    if (!leading && !timer)
      timer = setTimeout(() => isLeading = true, duration);
    isLeading = false;
    return lastValue;
  };
  return filter;
}
function identity(arg) {
  return arg;
}
function tryOnScopeDispose(fn2) {
  if (getCurrentScope()) {
    onScopeDispose(fn2);
    return true;
  }
  return false;
}
function useThrottleFn(fn2, ms = 200, trailing = false, leading = true, rejectOnCancel = false) {
  return createFilterWrapper(throttleFilter(ms, trailing, leading, rejectOnCancel), fn2);
}
function tryOnMounted(fn2, sync = true) {
  if (getCurrentInstance())
    onMounted(fn2);
  else if (sync)
    fn2();
  else
    nextTick(fn2);
}
var ElementPlusError = class extends Error {
  constructor(m) {
    super(m);
    this.name = "ElementPlusError";
  }
};
function throwError(scope, m) {
  throw new ElementPlusError(`[${scope}] ${m}`);
}
function debugWarn(scope, message) {
  if (true) {
    const error = isString$1(scope) ? new ElementPlusError(`[${scope}] ${message}`) : scope;
  }
}
var epPropKey = "__epPropKey";
var definePropType = (val) => val;
var isEpProp = (val) => isObject2(val) && !!val[epPropKey];
var buildProp = (prop, key) => {
  if (!isObject2(prop) || isEpProp(prop))
    return prop;
  const { values, required, default: defaultValue, type, validator } = prop;
  const _validator = values || validator ? (val) => {
    let valid = false;
    let allowedValues = [];
    if (values) {
      allowedValues = Array.from(values);
      if (hasOwn(prop, "default")) {
        allowedValues.push(defaultValue);
      }
      valid || (valid = allowedValues.includes(val));
    }
    if (validator)
      valid || (valid = validator(val));
    if (!valid && allowedValues.length > 0) {
      const allowValuesText = [...new Set(allowedValues)].map((value) => JSON.stringify(value)).join(", ");
      warn(`Invalid prop: validation failed${key ? ` for prop "${key}"` : ""}. Expected one of [${allowValuesText}], got value ${JSON.stringify(val)}.`);
    }
    return valid;
  } : void 0;
  const epProp = {
    type,
    required: !!required,
    validator: _validator,
    [epPropKey]: true
  };
  if (hasOwn(prop, "default"))
    epProp.default = defaultValue;
  return epProp;
};
var buildProps = (props) => fromPairs(Object.entries(props).map(([key, option]) => [
  key,
  buildProp(option, key)
]));
var _export_sfc2 = (sfc, props) => {
  const target = sfc.__vccOpts || sfc;
  for (const [key, val] of props) {
    target[key] = val;
  }
  return target;
};
var SCOPE = "utils/dom/style";
var getStyle = (element, styleName) => {
  var _a2;
  if (!isClient || !element || !styleName)
    return "";
  let key = camelize(styleName);
  if (key === "float")
    key = "cssFloat";
  try {
    const style = element.style[key];
    if (style)
      return style;
    const computed2 = (_a2 = document.defaultView) == null ? void 0 : _a2.getComputedStyle(element, "");
    return computed2 ? computed2[key] : "";
  } catch (e) {
    return element.style[key];
  }
};
function addUnit(value, defaultUnit = "px") {
  if (!value)
    return "";
  if (isNumber(value) || isStringNumber(value)) {
    return `${value}${defaultUnit}`;
  } else if (isString$1(value)) {
    return value;
  }
  debugWarn(SCOPE, "binding value must be a string or number");
}
var withInstall = (main, extra) => {
  main.install = (app) => {
    for (const comp of [main, ...Object.values(extra != null ? extra : {})]) {
      app.component(comp.name, comp);
    }
  };
  if (extra) {
    for (const [key, comp] of Object.entries(extra)) {
      main[key] = comp;
    }
  }
  return main;
};
var withInstallDirective = (directive, name) => {
  directive.install = (app) => {
    app.directive(name, directive);
  };
  return directive;
};
var withNoopInstall = (component) => {
  component.install = NOOP;
  return component;
};
var iconProps = buildProps({
  size: {
    type: definePropType([Number, String])
  },
  color: {
    type: String
  }
});
var __default__ = defineComponent({
  name: "ElIcon",
  inheritAttrs: false
});
var _sfc_main = defineComponent({
  ...__default__,
  props: iconProps,
  setup(__props) {
    const props = __props;
    const ns = useNamespace("icon");
    const style = computed(() => {
      const { size, color } = props;
      if (!size && !color)
        return {};
      return {
        fontSize: isUndefined2(size) ? void 0 : addUnit(size),
        "--color": color
      };
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("i", mergeProps({
        class: unref(ns).b(),
        style: unref(style)
      }, _ctx.$attrs), [
        renderSlot(_ctx.$slots, "default")
      ], 16);
    };
  }
});
var Icon = _export_sfc2(_sfc_main, [["__file", "icon.vue"]]);
var ElIcon = withInstall(Icon);

// node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/index-CnlpUR18.js
var arrow_down_bold_vue_vue_type_script_setup_true_lang_default = defineComponent({
  name: "ArrowDownBold",
  __name: "arrow-down-bold",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M104.704 338.752a64 64 0 0 1 90.496 0l316.8 316.8 316.8-316.8a64 64 0 0 1 90.496 90.496L557.248 791.296a64 64 0 0 1-90.496 0L104.704 429.248a64 64 0 0 1 0-90.496z"
      })
    ]));
  }
});
var arrow_down_bold_default = arrow_down_bold_vue_vue_type_script_setup_true_lang_default;
var arrow_down_vue_vue_type_script_setup_true_lang_default = defineComponent({
  name: "ArrowDown",
  __name: "arrow-down",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M831.872 340.864 512 652.672 192.128 340.864a30.592 30.592 0 0 0-42.752 0 29.12 29.12 0 0 0 0 41.6L489.664 714.24a32 32 0 0 0 44.672 0l340.288-331.712a29.12 29.12 0 0 0 0-41.728 30.592 30.592 0 0 0-42.752 0z"
      })
    ]));
  }
});
var arrow_down_default = arrow_down_vue_vue_type_script_setup_true_lang_default;
var arrow_left_bold_vue_vue_type_script_setup_true_lang_default = defineComponent({
  name: "ArrowLeftBold",
  __name: "arrow-left-bold",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M685.248 104.704a64 64 0 0 1 0 90.496L368.448 512l316.8 316.8a64 64 0 0 1-90.496 90.496L232.704 557.248a64 64 0 0 1 0-90.496l362.048-362.048a64 64 0 0 1 90.496 0z"
      })
    ]));
  }
});
var arrow_left_bold_default = arrow_left_bold_vue_vue_type_script_setup_true_lang_default;
var arrow_left_vue_vue_type_script_setup_true_lang_default = defineComponent({
  name: "ArrowLeft",
  __name: "arrow-left",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M609.408 149.376 277.76 489.6a32 32 0 0 0 0 44.672l331.648 340.352a29.12 29.12 0 0 0 41.728 0 30.592 30.592 0 0 0 0-42.752L339.264 511.936l311.872-319.872a30.592 30.592 0 0 0 0-42.688 29.12 29.12 0 0 0-41.728 0z"
      })
    ]));
  }
});
var arrow_left_default = arrow_left_vue_vue_type_script_setup_true_lang_default;
var arrow_right_bold_vue_vue_type_script_setup_true_lang_default = defineComponent({
  name: "ArrowRightBold",
  __name: "arrow-right-bold",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M338.752 104.704a64 64 0 0 0 0 90.496l316.8 316.8-316.8 316.8a64 64 0 0 0 90.496 90.496l362.048-362.048a64 64 0 0 0 0-90.496L429.248 104.704a64 64 0 0 0-90.496 0z"
      })
    ]));
  }
});
var arrow_right_bold_default = arrow_right_bold_vue_vue_type_script_setup_true_lang_default;
var arrow_right_vue_vue_type_script_setup_true_lang_default = defineComponent({
  name: "ArrowRight",
  __name: "arrow-right",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M340.864 149.312a30.592 30.592 0 0 0 0 42.752L652.736 512 340.864 831.872a30.592 30.592 0 0 0 0 42.752 29.12 29.12 0 0 0 41.728 0L714.24 534.336a32 32 0 0 0 0-44.672L382.592 149.376a29.12 29.12 0 0 0-41.728 0z"
      })
    ]));
  }
});
var arrow_right_default = arrow_right_vue_vue_type_script_setup_true_lang_default;
var arrow_up_bold_vue_vue_type_script_setup_true_lang_default = defineComponent({
  name: "ArrowUpBold",
  __name: "arrow-up-bold",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M104.704 685.248a64 64 0 0 0 90.496 0l316.8-316.8 316.8 316.8a64 64 0 0 0 90.496-90.496L557.248 232.704a64 64 0 0 0-90.496 0L104.704 594.752a64 64 0 0 0 0 90.496z"
      })
    ]));
  }
});
var arrow_up_bold_default = arrow_up_bold_vue_vue_type_script_setup_true_lang_default;
var brush_vue_vue_type_script_setup_true_lang_default = defineComponent({
  name: "Brush",
  __name: "brush",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M896 448H128v192a64 64 0 0 0 64 64h192v192h256V704h192a64 64 0 0 0 64-64zm-770.752-64c0-47.552 5.248-90.24 15.552-128 14.72-54.016 42.496-107.392 83.2-160h417.28l-15.36 70.336L736 96h211.2c-24.832 42.88-41.92 96.256-51.2 160a663.872 663.872 0 0 0-6.144 128H960v256a128 128 0 0 1-128 128H704v160a32 32 0 0 1-32 32H352a32 32 0 0 1-32-32V768H192A128 128 0 0 1 64 640V384h61.248zm64 0h636.544c-2.048-45.824.256-91.584 6.848-137.216 4.48-30.848 10.688-59.776 18.688-86.784h-96.64l-221.12 141.248L561.92 160H256.512c-25.856 37.888-43.776 75.456-53.952 112.832-8.768 32.064-13.248 69.12-13.312 111.168z"
      })
    ]));
  }
});
var brush_default = brush_vue_vue_type_script_setup_true_lang_default;
var check_vue_vue_type_script_setup_true_lang_default = defineComponent({
  name: "Check",
  __name: "check",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M406.656 706.944 195.84 496.256a32 32 0 1 0-45.248 45.248l256 256 512-512a32 32 0 0 0-45.248-45.248L406.592 706.944z"
      })
    ]));
  }
});
var check_default = check_vue_vue_type_script_setup_true_lang_default;
var circle_check_vue_vue_type_script_setup_true_lang_default = defineComponent({
  name: "CircleCheck",
  __name: "circle-check",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M512 896a384 384 0 1 0 0-768 384 384 0 0 0 0 768m0 64a448 448 0 1 1 0-896 448 448 0 0 1 0 896"
      }),
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M745.344 361.344a32 32 0 0 1 45.312 45.312l-288 288a32 32 0 0 1-45.312 0l-160-160a32 32 0 1 1 45.312-45.312L480 626.752l265.344-265.408z"
      })
    ]));
  }
});
var circle_check_default = circle_check_vue_vue_type_script_setup_true_lang_default;
var circle_close_filled_vue_vue_type_script_setup_true_lang_default = defineComponent({
  name: "CircleCloseFilled",
  __name: "circle-close-filled",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M512 64a448 448 0 1 1 0 896 448 448 0 0 1 0-896m0 393.664L407.936 353.6a38.4 38.4 0 1 0-54.336 54.336L457.664 512 353.6 616.064a38.4 38.4 0 1 0 54.336 54.336L512 566.336 616.064 670.4a38.4 38.4 0 1 0 54.336-54.336L566.336 512 670.4 407.936a38.4 38.4 0 1 0-54.336-54.336z"
      })
    ]));
  }
});
var circle_close_filled_default = circle_close_filled_vue_vue_type_script_setup_true_lang_default;
var circle_close_vue_vue_type_script_setup_true_lang_default = defineComponent({
  name: "CircleClose",
  __name: "circle-close",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "m466.752 512-90.496-90.496a32 32 0 0 1 45.248-45.248L512 466.752l90.496-90.496a32 32 0 1 1 45.248 45.248L557.248 512l90.496 90.496a32 32 0 1 1-45.248 45.248L512 557.248l-90.496 90.496a32 32 0 0 1-45.248-45.248z"
      }),
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M512 896a384 384 0 1 0 0-768 384 384 0 0 0 0 768m0 64a448 448 0 1 1 0-896 448 448 0 0 1 0 896"
      })
    ]));
  }
});
var circle_close_default = circle_close_vue_vue_type_script_setup_true_lang_default;
var close_vue_vue_type_script_setup_true_lang_default = defineComponent({
  name: "Close",
  __name: "close",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M764.288 214.592 512 466.88 259.712 214.592a31.936 31.936 0 0 0-45.12 45.12L466.752 512 214.528 764.224a31.936 31.936 0 1 0 45.12 45.184L512 557.184l252.288 252.288a31.936 31.936 0 0 0 45.12-45.12L557.12 512.064l252.288-252.352a31.936 31.936 0 1 0-45.12-45.184z"
      })
    ]));
  }
});
var close_default = close_vue_vue_type_script_setup_true_lang_default;
var delete_vue_vue_type_script_setup_true_lang_default = defineComponent({
  name: "Delete",
  __name: "delete",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M160 256H96a32 32 0 0 1 0-64h256V95.936a32 32 0 0 1 32-32h256a32 32 0 0 1 32 32V192h256a32 32 0 1 1 0 64h-64v672a32 32 0 0 1-32 32H192a32 32 0 0 1-32-32zm448-64v-64H416v64zM224 896h576V256H224zm192-128a32 32 0 0 1-32-32V416a32 32 0 0 1 64 0v320a32 32 0 0 1-32 32m192 0a32 32 0 0 1-32-32V416a32 32 0 0 1 64 0v320a32 32 0 0 1-32 32"
      })
    ]));
  }
});
var delete_default = delete_vue_vue_type_script_setup_true_lang_default;
var document_vue_vue_type_script_setup_true_lang_default = defineComponent({
  name: "Document",
  __name: "document",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M832 384H576V128H192v768h640zm-26.496-64L640 154.496V320zM160 64h480l256 256v608a32 32 0 0 1-32 32H160a32 32 0 0 1-32-32V96a32 32 0 0 1 32-32m160 448h384v64H320zm0-192h160v64H320zm0 384h384v64H320z"
      })
    ]));
  }
});
var document_default = document_vue_vue_type_script_setup_true_lang_default;
var edit_vue_vue_type_script_setup_true_lang_default = defineComponent({
  name: "Edit",
  __name: "edit",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M832 512a32 32 0 1 1 64 0v352a32 32 0 0 1-32 32H160a32 32 0 0 1-32-32V160a32 32 0 0 1 32-32h352a32 32 0 0 1 0 64H192v640h640z"
      }),
      createBaseVNode("path", {
        fill: "currentColor",
        d: "m469.952 554.24 52.8-7.552L847.104 222.4a32 32 0 1 0-45.248-45.248L477.44 501.44l-7.552 52.8zm422.4-422.4a96 96 0 0 1 0 135.808l-331.84 331.84a32 32 0 0 1-18.112 9.088L436.8 623.68a32 32 0 0 1-36.224-36.224l15.104-105.6a32 32 0 0 1 9.024-18.112l331.904-331.84a96 96 0 0 1 135.744 0z"
      })
    ]));
  }
});
var edit_default = edit_vue_vue_type_script_setup_true_lang_default;
var full_screen_vue_vue_type_script_setup_true_lang_default = defineComponent({
  name: "FullScreen",
  __name: "full-screen",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "m160 96.064 192 .192a32 32 0 0 1 0 64l-192-.192V352a32 32 0 0 1-64 0V96h64zm0 831.872V928H96V672a32 32 0 1 1 64 0v191.936l192-.192a32 32 0 1 1 0 64zM864 96.064V96h64v256a32 32 0 1 1-64 0V160.064l-192 .192a32 32 0 1 1 0-64l192-.192zm0 831.872-192-.192a32 32 0 0 1 0-64l192 .192V672a32 32 0 1 1 64 0v256h-64z"
      })
    ]));
  }
});
var full_screen_default = full_screen_vue_vue_type_script_setup_true_lang_default;
var hide_vue_vue_type_script_setup_true_lang_default = defineComponent({
  name: "Hide",
  __name: "hide",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M876.8 156.8c0-9.6-3.2-16-9.6-22.4-6.4-6.4-12.8-9.6-22.4-9.6-9.6 0-16 3.2-22.4 9.6L736 220.8c-64-32-137.6-51.2-224-60.8-160 16-288 73.6-377.6 176C44.8 438.4 0 496 0 512s48 73.6 134.4 176c22.4 25.6 44.8 48 73.6 67.2l-86.4 89.6c-6.4 6.4-9.6 12.8-9.6 22.4 0 9.6 3.2 16 9.6 22.4 6.4 6.4 12.8 9.6 22.4 9.6 9.6 0 16-3.2 22.4-9.6l704-710.4c3.2-6.4 6.4-12.8 6.4-22.4Zm-646.4 528c-76.8-70.4-128-128-153.6-172.8 28.8-48 80-105.6 153.6-172.8C304 272 400 230.4 512 224c64 3.2 124.8 19.2 176 44.8l-54.4 54.4C598.4 300.8 560 288 512 288c-64 0-115.2 22.4-160 64s-64 96-64 160c0 48 12.8 89.6 35.2 124.8L256 707.2c-9.6-6.4-19.2-16-25.6-22.4Zm140.8-96c-12.8-22.4-19.2-48-19.2-76.8 0-44.8 16-83.2 48-112 32-28.8 67.2-48 112-48 28.8 0 54.4 6.4 73.6 19.2zM889.599 336c-12.8-16-28.8-28.8-41.6-41.6l-48 48c73.6 67.2 124.8 124.8 150.4 169.6-28.8 48-80 105.6-153.6 172.8-73.6 67.2-172.8 108.8-284.8 115.2-51.2-3.2-99.2-12.8-140.8-28.8l-48 48c57.6 22.4 118.4 38.4 188.8 44.8 160-16 288-73.6 377.6-176C979.199 585.6 1024 528 1024 512s-48.001-73.6-134.401-176Z"
      }),
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M511.998 672c-12.8 0-25.6-3.2-38.4-6.4l-51.2 51.2c28.8 12.8 57.6 19.2 89.6 19.2 64 0 115.2-22.4 160-64 41.6-41.6 64-96 64-160 0-32-6.4-64-19.2-89.6l-51.2 51.2c3.2 12.8 6.4 25.6 6.4 38.4 0 44.8-16 83.2-48 112-32 28.8-67.2 48-112 48Z"
      })
    ]));
  }
});
var hide_default = hide_vue_vue_type_script_setup_true_lang_default;
var loading_vue_vue_type_script_setup_true_lang_default = defineComponent({
  name: "Loading",
  __name: "loading",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M512 64a32 32 0 0 1 32 32v192a32 32 0 0 1-64 0V96a32 32 0 0 1 32-32m0 640a32 32 0 0 1 32 32v192a32 32 0 1 1-64 0V736a32 32 0 0 1 32-32m448-192a32 32 0 0 1-32 32H736a32 32 0 1 1 0-64h192a32 32 0 0 1 32 32m-640 0a32 32 0 0 1-32 32H96a32 32 0 0 1 0-64h192a32 32 0 0 1 32 32M195.2 195.2a32 32 0 0 1 45.248 0L376.32 331.008a32 32 0 0 1-45.248 45.248L195.2 240.448a32 32 0 0 1 0-45.248zm452.544 452.544a32 32 0 0 1 45.248 0L828.8 783.552a32 32 0 0 1-45.248 45.248L647.744 692.992a32 32 0 0 1 0-45.248zM828.8 195.264a32 32 0 0 1 0 45.184L692.992 376.32a32 32 0 0 1-45.248-45.248l135.808-135.808a32 32 0 0 1 45.248 0m-452.544 452.48a32 32 0 0 1 0 45.248L240.448 828.8a32 32 0 0 1-45.248-45.248l135.808-135.808a32 32 0 0 1 45.248 0z"
      })
    ]));
  }
});
var loading_default = loading_vue_vue_type_script_setup_true_lang_default;
var microphone_vue_vue_type_script_setup_true_lang_default = defineComponent({
  name: "Microphone",
  __name: "microphone",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M512 128a128 128 0 0 0-128 128v256a128 128 0 1 0 256 0V256a128 128 0 0 0-128-128m0-64a192 192 0 0 1 192 192v256a192 192 0 1 1-384 0V256A192 192 0 0 1 512 64m-32 832v-64a288 288 0 0 1-288-288v-32a32 32 0 0 1 64 0v32a224 224 0 0 0 224 224h64a224 224 0 0 0 224-224v-32a32 32 0 1 1 64 0v32a288 288 0 0 1-288 288v64h64a32 32 0 1 1 0 64H416a32 32 0 1 1 0-64z"
      })
    ]));
  }
});
var microphone_default = microphone_vue_vue_type_script_setup_true_lang_default;
var more_filled_vue_vue_type_script_setup_true_lang_default = defineComponent({
  name: "MoreFilled",
  __name: "more-filled",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M176 416a112 112 0 1 1 0 224 112 112 0 0 1 0-224m336 0a112 112 0 1 1 0 224 112 112 0 0 1 0-224m336 0a112 112 0 1 1 0 224 112 112 0 0 1 0-224"
      })
    ]));
  }
});
var more_filled_default = more_filled_vue_vue_type_script_setup_true_lang_default;
var opportunity_vue_vue_type_script_setup_true_lang_default = defineComponent({
  name: "Opportunity",
  __name: "opportunity",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M384 960v-64h192.064v64zm448-544a350.656 350.656 0 0 1-128.32 271.424C665.344 719.04 640 763.776 640 813.504V832H320v-14.336c0-48-19.392-95.36-57.216-124.992a351.552 351.552 0 0 1-128.448-344.256c25.344-136.448 133.888-248.128 269.76-276.48A352.384 352.384 0 0 1 832 416m-544 32c0-132.288 75.904-224 192-224v-64c-154.432 0-256 122.752-256 288z"
      })
    ]));
  }
});
var opportunity_default = opportunity_vue_vue_type_script_setup_true_lang_default;
var plus_vue_vue_type_script_setup_true_lang_default = defineComponent({
  name: "Plus",
  __name: "plus",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M480 480V128a32 32 0 0 1 64 0v352h352a32 32 0 1 1 0 64H544v352a32 32 0 1 1-64 0V544H128a32 32 0 0 1 0-64z"
      })
    ]));
  }
});
var plus_default = plus_vue_vue_type_script_setup_true_lang_default;
var refresh_left_vue_vue_type_script_setup_true_lang_default = defineComponent({
  name: "RefreshLeft",
  __name: "refresh-left",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M289.088 296.704h92.992a32 32 0 0 1 0 64H232.96a32 32 0 0 1-32-32V179.712a32 32 0 0 1 64 0v50.56a384 384 0 0 1 643.84 282.88 384 384 0 0 1-383.936 384 384 384 0 0 1-384-384h64a320 320 0 1 0 640 0 320 320 0 0 0-555.712-216.448z"
      })
    ]));
  }
});
var refresh_left_default = refresh_left_vue_vue_type_script_setup_true_lang_default;
var refresh_right_vue_vue_type_script_setup_true_lang_default = defineComponent({
  name: "RefreshRight",
  __name: "refresh-right",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M784.512 230.272v-50.56a32 32 0 1 1 64 0v149.056a32 32 0 0 1-32 32H667.52a32 32 0 1 1 0-64h92.992A320 320 0 1 0 524.8 833.152a320 320 0 0 0 320-320h64a384 384 0 0 1-384 384 384 384 0 0 1-384-384 384 384 0 0 1 643.712-282.88z"
      })
    ]));
  }
});
var refresh_right_default = refresh_right_vue_vue_type_script_setup_true_lang_default;
var scale_to_original_vue_vue_type_script_setup_true_lang_default = defineComponent({
  name: "ScaleToOriginal",
  __name: "scale-to-original",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M813.176 180.706a60.235 60.235 0 0 1 60.236 60.235v481.883a60.235 60.235 0 0 1-60.236 60.235H210.824a60.235 60.235 0 0 1-60.236-60.235V240.94a60.235 60.235 0 0 1 60.236-60.235h602.352zm0-60.235H210.824A120.47 120.47 0 0 0 90.353 240.94v481.883a120.47 120.47 0 0 0 120.47 120.47h602.353a120.47 120.47 0 0 0 120.471-120.47V240.94a120.47 120.47 0 0 0-120.47-120.47zm-120.47 180.705a30.118 30.118 0 0 0-30.118 30.118v301.177a30.118 30.118 0 0 0 60.236 0V331.294a30.118 30.118 0 0 0-30.118-30.118zm-361.412 0a30.118 30.118 0 0 0-30.118 30.118v301.177a30.118 30.118 0 1 0 60.236 0V331.294a30.118 30.118 0 0 0-30.118-30.118M512 361.412a30.118 30.118 0 0 0-30.118 30.117v30.118a30.118 30.118 0 0 0 60.236 0V391.53A30.118 30.118 0 0 0 512 361.412M512 512a30.118 30.118 0 0 0-30.118 30.118v30.117a30.118 30.118 0 0 0 60.236 0v-30.117A30.118 30.118 0 0 0 512 512"
      })
    ]));
  }
});
var scale_to_original_default = scale_to_original_vue_vue_type_script_setup_true_lang_default;
var success_filled_vue_vue_type_script_setup_true_lang_default = defineComponent({
  name: "SuccessFilled",
  __name: "success-filled",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M512 64a448 448 0 1 1 0 896 448 448 0 0 1 0-896m-55.808 536.384-99.52-99.584a38.4 38.4 0 1 0-54.336 54.336l126.72 126.72a38.272 38.272 0 0 0 54.336 0l262.4-262.464a38.4 38.4 0 1 0-54.272-54.336z"
      })
    ]));
  }
});
var success_filled_default = success_filled_vue_vue_type_script_setup_true_lang_default;
var top_vue_vue_type_script_setup_true_lang_default = defineComponent({
  name: "Top",
  __name: "top",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M572.235 205.282v600.365a30.118 30.118 0 1 1-60.235 0V205.282L292.382 438.633a28.913 28.913 0 0 1-42.646 0 33.43 33.43 0 0 1 0-45.236l271.058-288.045a28.913 28.913 0 0 1 42.647 0L834.5 393.397a33.43 33.43 0 0 1 0 45.176 28.913 28.913 0 0 1-42.647 0l-219.618-233.23z"
      })
    ]));
  }
});
var top_default = top_vue_vue_type_script_setup_true_lang_default;
var upload_filled_vue_vue_type_script_setup_true_lang_default = defineComponent({
  name: "UploadFilled",
  __name: "upload-filled",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M544 864V672h128L512 480 352 672h128v192H320v-1.6c-5.376.32-10.496 1.6-16 1.6A240 240 0 0 1 64 624c0-123.136 93.12-223.488 212.608-237.248A239.808 239.808 0 0 1 512 192a239.872 239.872 0 0 1 235.456 194.752c119.488 13.76 212.48 114.112 212.48 237.248a240 240 0 0 1-240 240c-5.376 0-10.56-1.28-16-1.6v1.6z"
      })
    ]));
  }
});
var upload_filled_default = upload_filled_vue_vue_type_script_setup_true_lang_default;
var view_vue_vue_type_script_setup_true_lang_default = defineComponent({
  name: "View",
  __name: "view",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M512 160c320 0 512 352 512 352S832 864 512 864 0 512 0 512s192-352 512-352m0 64c-225.28 0-384.128 208.064-436.8 288 52.608 79.872 211.456 288 436.8 288 225.28 0 384.128-208.064 436.8-288-52.608-79.872-211.456-288-436.8-288zm0 64a224 224 0 1 1 0 448 224 224 0 0 1 0-448m0 64a160.192 160.192 0 0 0-160 160c0 88.192 71.744 160 160 160s160-71.808 160-160-71.744-160-160-160"
      })
    ]));
  }
});
var view_default = view_vue_vue_type_script_setup_true_lang_default;
var warning_filled_vue_vue_type_script_setup_true_lang_default = defineComponent({
  name: "WarningFilled",
  __name: "warning-filled",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "M512 64a448 448 0 1 1 0 896 448 448 0 0 1 0-896m0 192a58.432 58.432 0 0 0-58.24 63.744l23.36 256.384a35.072 35.072 0 0 0 69.76 0l23.296-256.384A58.432 58.432 0 0 0 512 256m0 512a51.2 51.2 0 1 0 0-102.4 51.2 51.2 0 0 0 0 102.4"
      })
    ]));
  }
});
var warning_filled_default = warning_filled_vue_vue_type_script_setup_true_lang_default;
var zoom_in_vue_vue_type_script_setup_true_lang_default = defineComponent({
  name: "ZoomIn",
  __name: "zoom-in",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "m795.904 750.72 124.992 124.928a32 32 0 0 1-45.248 45.248L750.656 795.904a416 416 0 1 1 45.248-45.248zM480 832a352 352 0 1 0 0-704 352 352 0 0 0 0 704m-32-384v-96a32 32 0 0 1 64 0v96h96a32 32 0 0 1 0 64h-96v96a32 32 0 0 1-64 0v-96h-96a32 32 0 0 1 0-64z"
      })
    ]));
  }
});
var zoom_in_default = zoom_in_vue_vue_type_script_setup_true_lang_default;
var zoom_out_vue_vue_type_script_setup_true_lang_default = defineComponent({
  name: "ZoomOut",
  __name: "zoom-out",
  setup(__props) {
    return (_ctx, _cache) => (openBlock(), createElementBlock("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 1024 1024"
    }, [
      createBaseVNode("path", {
        fill: "currentColor",
        d: "m795.904 750.72 124.992 124.928a32 32 0 0 1-45.248 45.248L750.656 795.904a416 416 0 1 1 45.248-45.248zM480 832a352 352 0 1 0 0-704 352 352 0 0 0 0 704M352 448h256a32 32 0 0 1 0 64H352a32 32 0 0 1 0-64"
      })
    ]));
  }
});
var zoom_out_default = zoom_out_vue_vue_type_script_setup_true_lang_default;

// node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/icon-ql50nNgG.js
var componentSizes = ["", "default", "small", "large"];
var iconPropType = definePropType([
  String,
  Object,
  Function
]);
var ValidateComponentsMap = {
  validating: loading_default,
  success: circle_check_default,
  error: circle_close_default
};

// node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/el-button-v5lTrsRk.js
import "/Users/Bone/Documents/Github/AI-RagFLow-Api/node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/el-button.css";
var configProviderContextKey = Symbol();
var useSizeProp = buildProp({
  type: String,
  values: componentSizes,
  required: false
});
var SIZE_INJECTION_KEY = Symbol("size");
var useGlobalSize = () => {
  const injectedSize = inject(SIZE_INJECTION_KEY, {});
  return computed(() => {
    return unref(injectedSize.size) || "";
  });
};
var globalConfig = ref();
function useGlobalConfig(key, defaultValue = void 0) {
  const config = getCurrentInstance() ? inject(configProviderContextKey, globalConfig) : globalConfig;
  {
    return computed(() => {
      var _a2, _b;
      return (_b = (_a2 = config.value) == null ? void 0 : _a2[key]) != null ? _b : defaultValue;
    });
  }
}
var formContextKey = Symbol("formContextKey");
var formItemContextKey = Symbol("formItemContextKey");
var defaultIdInjection = {
  prefix: Math.floor(Math.random() * 1e4),
  current: 0
};
var ID_INJECTION_KEY = Symbol("elIdInjection");
var useIdInjection = () => {
  return getCurrentInstance() ? inject(ID_INJECTION_KEY, defaultIdInjection) : defaultIdInjection;
};
var useId = (deterministicId) => {
  const idInjection = useIdInjection();
  if (!isClient && idInjection === defaultIdInjection) {
    debugWarn("IdInjection", `Looks like you are using server rendering, you must provide a id provider to ensure the hydration process to be succeed
usage: app.provide(ID_INJECTION_KEY, {
  prefix: number,
  current: number,
})`);
  }
  const namespace = useGetDerivedNamespace();
  const idRef = computedEager(() => unref(deterministicId) || `${namespace.value}-id-${idInjection.prefix}-${idInjection.current++}`);
  return idRef;
};
var useFormItem = () => {
  const form = inject(formContextKey, void 0);
  const formItem = inject(formItemContextKey, void 0);
  return {
    form,
    formItem
  };
};
var useFormItemInputId = (props, {
  formItemContext,
  disableIdGeneration,
  disableIdManagement
}) => {
  if (!disableIdGeneration) {
    disableIdGeneration = ref(false);
  }
  if (!disableIdManagement) {
    disableIdManagement = ref(false);
  }
  const inputId = ref();
  let idUnwatch = void 0;
  const isLabeledByFormItem = computed(() => {
    var _a2;
    return !!(!(props.label || props.ariaLabel) && formItemContext && formItemContext.inputIds && ((_a2 = formItemContext.inputIds) == null ? void 0 : _a2.length) <= 1);
  });
  onMounted(() => {
    idUnwatch = watch([toRef(props, "id"), disableIdGeneration], ([id, disableIdGeneration2]) => {
      const newId = id != null ? id : !disableIdGeneration2 ? useId().value : void 0;
      if (newId !== inputId.value) {
        if (formItemContext == null ? void 0 : formItemContext.removeInputId) {
          inputId.value && formItemContext.removeInputId(inputId.value);
          if (!(disableIdManagement == null ? void 0 : disableIdManagement.value) && !disableIdGeneration2 && newId) {
            formItemContext.addInputId(newId);
          }
        }
        inputId.value = newId;
      }
    }, { immediate: true });
  });
  onUnmounted(() => {
    idUnwatch && idUnwatch();
    if (formItemContext == null ? void 0 : formItemContext.removeInputId) {
      inputId.value && formItemContext.removeInputId(inputId.value);
    }
  });
  return {
    isLabeledByFormItem,
    inputId
  };
};
var useProp = (name) => {
  const vm = getCurrentInstance();
  return computed(() => {
    var _a2, _b;
    return (_b = (_a2 = vm == null ? void 0 : vm.proxy) == null ? void 0 : _a2.$props) == null ? void 0 : _b[name];
  });
};
var useFormSize = (fallback, ignore = {}) => {
  const emptyRef = ref(void 0);
  const size = ignore.prop ? emptyRef : useProp("size");
  const globalConfig2 = ignore.global ? emptyRef : useGlobalSize();
  const form = ignore.form ? { size: void 0 } : inject(formContextKey, void 0);
  const formItem = ignore.formItem ? { size: void 0 } : inject(formItemContextKey, void 0);
  return computed(() => size.value || unref(fallback) || (formItem == null ? void 0 : formItem.size) || (form == null ? void 0 : form.size) || globalConfig2.value || "");
};
var useFormDisabled = (fallback) => {
  const disabled = useProp("disabled");
  const form = inject(formContextKey, void 0);
  return computed(() => disabled.value || unref(fallback) || (form == null ? void 0 : form.disabled) || false);
};
var buttonGroupContextKey = Symbol("buttonGroupContextKey");
var useDeprecated = ({ from, replacement, scope, version, ref: ref2, type = "API" }, condition) => {
  watch(() => unref(condition), (val) => {
    if (val) {
      debugWarn(scope, `[${type}] ${from} is about to be deprecated in version ${version}, please use ${replacement} instead.
For more detail, please visit: ${ref2}
`);
    }
  }, {
    immediate: true
  });
};
var useButton = (props, emit) => {
  useDeprecated({
    from: "type.text",
    replacement: "link",
    version: "3.0.0",
    scope: "props",
    ref: "https://element-plus.org/en-US/component/button.html#button-attributes"
  }, computed(() => props.type === "text"));
  const buttonGroupContext = inject(buttonGroupContextKey, void 0);
  const globalConfig2 = useGlobalConfig("button");
  const { form } = useFormItem();
  const _size = useFormSize(computed(() => buttonGroupContext == null ? void 0 : buttonGroupContext.size));
  const _disabled = useFormDisabled();
  const _ref = ref();
  const slots = useSlots();
  const _type2 = computed(() => props.type || (buttonGroupContext == null ? void 0 : buttonGroupContext.type) || "");
  const autoInsertSpace = computed(() => {
    var _a2, _b, _c;
    return (_c = (_b = props.autoInsertSpace) != null ? _b : (_a2 = globalConfig2.value) == null ? void 0 : _a2.autoInsertSpace) != null ? _c : false;
  });
  const _props = computed(() => {
    if (props.tag === "button") {
      return {
        ariaDisabled: _disabled.value || props.loading,
        disabled: _disabled.value || props.loading,
        autofocus: props.autofocus,
        type: props.nativeType
      };
    }
    return {};
  });
  const shouldAddSpace = computed(() => {
    var _a2;
    const defaultSlot = (_a2 = slots.default) == null ? void 0 : _a2.call(slots);
    if (autoInsertSpace.value && (defaultSlot == null ? void 0 : defaultSlot.length) === 1) {
      const slot = defaultSlot[0];
      if ((slot == null ? void 0 : slot.type) === Text) {
        const text = slot.children;
        return new RegExp("^\\p{Unified_Ideograph}{2}$", "u").test(text.trim());
      }
    }
    return false;
  });
  const handleClick = (evt) => {
    if (_disabled.value || props.loading) {
      evt.stopPropagation();
      return;
    }
    if (props.nativeType === "reset") {
      form == null ? void 0 : form.resetFields();
    }
    emit("click", evt);
  };
  return {
    _disabled,
    _size,
    _type: _type2,
    _ref,
    _props,
    shouldAddSpace,
    handleClick
  };
};
var buttonTypes = [
  "default",
  "primary",
  "success",
  "warning",
  "info",
  "danger",
  "text",
  ""
];
var buttonNativeTypes = ["button", "submit", "reset"];
var buttonProps = buildProps({
  size: useSizeProp,
  disabled: Boolean,
  type: {
    type: String,
    values: buttonTypes,
    default: ""
  },
  icon: {
    type: iconPropType
  },
  nativeType: {
    type: String,
    values: buttonNativeTypes,
    default: "button"
  },
  loading: Boolean,
  loadingIcon: {
    type: iconPropType,
    default: () => loading_default
  },
  plain: Boolean,
  text: Boolean,
  link: Boolean,
  bg: Boolean,
  autofocus: Boolean,
  round: Boolean,
  circle: Boolean,
  color: String,
  dark: Boolean,
  autoInsertSpace: {
    type: Boolean,
    default: void 0
  },
  tag: {
    type: definePropType([String, Object]),
    default: "button"
  }
});
var buttonEmits = {
  click: (evt) => evt instanceof MouseEvent
};
function bound01(n, max) {
  if (isOnePointZero(n)) {
    n = "100%";
  }
  var isPercent = isPercentage(n);
  n = max === 360 ? n : Math.min(max, Math.max(0, parseFloat(n)));
  if (isPercent) {
    n = parseInt(String(n * max), 10) / 100;
  }
  if (Math.abs(n - max) < 1e-6) {
    return 1;
  }
  if (max === 360) {
    n = (n < 0 ? n % max + max : n % max) / parseFloat(String(max));
  } else {
    n = n % max / parseFloat(String(max));
  }
  return n;
}
function clamp01(val) {
  return Math.min(1, Math.max(0, val));
}
function isOnePointZero(n) {
  return typeof n === "string" && n.indexOf(".") !== -1 && parseFloat(n) === 1;
}
function isPercentage(n) {
  return typeof n === "string" && n.indexOf("%") !== -1;
}
function boundAlpha(a) {
  a = parseFloat(a);
  if (isNaN(a) || a < 0 || a > 1) {
    a = 1;
  }
  return a;
}
function convertToPercentage(n) {
  if (n <= 1) {
    return "".concat(Number(n) * 100, "%");
  }
  return n;
}
function pad2(c) {
  return c.length === 1 ? "0" + c : String(c);
}
function rgbToRgb(r, g, b) {
  return {
    r: bound01(r, 255) * 255,
    g: bound01(g, 255) * 255,
    b: bound01(b, 255) * 255
  };
}
function rgbToHsl(r, g, b) {
  r = bound01(r, 255);
  g = bound01(g, 255);
  b = bound01(b, 255);
  var max = Math.max(r, g, b);
  var min = Math.min(r, g, b);
  var h2 = 0;
  var s = 0;
  var l = (max + min) / 2;
  if (max === min) {
    s = 0;
    h2 = 0;
  } else {
    var d = max - min;
    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
    switch (max) {
      case r:
        h2 = (g - b) / d + (g < b ? 6 : 0);
        break;
      case g:
        h2 = (b - r) / d + 2;
        break;
      case b:
        h2 = (r - g) / d + 4;
        break;
    }
    h2 /= 6;
  }
  return { h: h2, s, l };
}
function hue2rgb(p, q2, t) {
  if (t < 0) {
    t += 1;
  }
  if (t > 1) {
    t -= 1;
  }
  if (t < 1 / 6) {
    return p + (q2 - p) * (6 * t);
  }
  if (t < 1 / 2) {
    return q2;
  }
  if (t < 2 / 3) {
    return p + (q2 - p) * (2 / 3 - t) * 6;
  }
  return p;
}
function hslToRgb(h2, s, l) {
  var r;
  var g;
  var b;
  h2 = bound01(h2, 360);
  s = bound01(s, 100);
  l = bound01(l, 100);
  if (s === 0) {
    g = l;
    b = l;
    r = l;
  } else {
    var q2 = l < 0.5 ? l * (1 + s) : l + s - l * s;
    var p = 2 * l - q2;
    r = hue2rgb(p, q2, h2 + 1 / 3);
    g = hue2rgb(p, q2, h2);
    b = hue2rgb(p, q2, h2 - 1 / 3);
  }
  return { r: r * 255, g: g * 255, b: b * 255 };
}
function rgbToHsv(r, g, b) {
  r = bound01(r, 255);
  g = bound01(g, 255);
  b = bound01(b, 255);
  var max = Math.max(r, g, b);
  var min = Math.min(r, g, b);
  var h2 = 0;
  var v = max;
  var d = max - min;
  var s = max === 0 ? 0 : d / max;
  if (max === min) {
    h2 = 0;
  } else {
    switch (max) {
      case r:
        h2 = (g - b) / d + (g < b ? 6 : 0);
        break;
      case g:
        h2 = (b - r) / d + 2;
        break;
      case b:
        h2 = (r - g) / d + 4;
        break;
    }
    h2 /= 6;
  }
  return { h: h2, s, v };
}
function hsvToRgb(h2, s, v) {
  h2 = bound01(h2, 360) * 6;
  s = bound01(s, 100);
  v = bound01(v, 100);
  var i = Math.floor(h2);
  var f = h2 - i;
  var p = v * (1 - s);
  var q2 = v * (1 - f * s);
  var t = v * (1 - (1 - f) * s);
  var mod = i % 6;
  var r = [v, q2, p, p, t, v][mod];
  var g = [t, v, v, q2, p, p][mod];
  var b = [p, p, t, v, v, q2][mod];
  return { r: r * 255, g: g * 255, b: b * 255 };
}
function rgbToHex(r, g, b, allow3Char) {
  var hex = [
    pad2(Math.round(r).toString(16)),
    pad2(Math.round(g).toString(16)),
    pad2(Math.round(b).toString(16))
  ];
  if (allow3Char && hex[0].startsWith(hex[0].charAt(1)) && hex[1].startsWith(hex[1].charAt(1)) && hex[2].startsWith(hex[2].charAt(1))) {
    return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);
  }
  return hex.join("");
}
function rgbaToHex(r, g, b, a, allow4Char) {
  var hex = [
    pad2(Math.round(r).toString(16)),
    pad2(Math.round(g).toString(16)),
    pad2(Math.round(b).toString(16)),
    pad2(convertDecimalToHex(a))
  ];
  if (allow4Char && hex[0].startsWith(hex[0].charAt(1)) && hex[1].startsWith(hex[1].charAt(1)) && hex[2].startsWith(hex[2].charAt(1)) && hex[3].startsWith(hex[3].charAt(1))) {
    return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);
  }
  return hex.join("");
}
function convertDecimalToHex(d) {
  return Math.round(parseFloat(d) * 255).toString(16);
}
function convertHexToDecimal(h2) {
  return parseIntFromHex(h2) / 255;
}
function parseIntFromHex(val) {
  return parseInt(val, 16);
}
function numberInputToObject(color) {
  return {
    r: color >> 16,
    g: (color & 65280) >> 8,
    b: color & 255
  };
}
var names = {
  aliceblue: "#f0f8ff",
  antiquewhite: "#faebd7",
  aqua: "#00ffff",
  aquamarine: "#7fffd4",
  azure: "#f0ffff",
  beige: "#f5f5dc",
  bisque: "#ffe4c4",
  black: "#000000",
  blanchedalmond: "#ffebcd",
  blue: "#0000ff",
  blueviolet: "#8a2be2",
  brown: "#a52a2a",
  burlywood: "#deb887",
  cadetblue: "#5f9ea0",
  chartreuse: "#7fff00",
  chocolate: "#d2691e",
  coral: "#ff7f50",
  cornflowerblue: "#6495ed",
  cornsilk: "#fff8dc",
  crimson: "#dc143c",
  cyan: "#00ffff",
  darkblue: "#00008b",
  darkcyan: "#008b8b",
  darkgoldenrod: "#b8860b",
  darkgray: "#a9a9a9",
  darkgreen: "#006400",
  darkgrey: "#a9a9a9",
  darkkhaki: "#bdb76b",
  darkmagenta: "#8b008b",
  darkolivegreen: "#556b2f",
  darkorange: "#ff8c00",
  darkorchid: "#9932cc",
  darkred: "#8b0000",
  darksalmon: "#e9967a",
  darkseagreen: "#8fbc8f",
  darkslateblue: "#483d8b",
  darkslategray: "#2f4f4f",
  darkslategrey: "#2f4f4f",
  darkturquoise: "#00ced1",
  darkviolet: "#9400d3",
  deeppink: "#ff1493",
  deepskyblue: "#00bfff",
  dimgray: "#696969",
  dimgrey: "#696969",
  dodgerblue: "#1e90ff",
  firebrick: "#b22222",
  floralwhite: "#fffaf0",
  forestgreen: "#228b22",
  fuchsia: "#ff00ff",
  gainsboro: "#dcdcdc",
  ghostwhite: "#f8f8ff",
  goldenrod: "#daa520",
  gold: "#ffd700",
  gray: "#808080",
  green: "#008000",
  greenyellow: "#adff2f",
  grey: "#808080",
  honeydew: "#f0fff0",
  hotpink: "#ff69b4",
  indianred: "#cd5c5c",
  indigo: "#4b0082",
  ivory: "#fffff0",
  khaki: "#f0e68c",
  lavenderblush: "#fff0f5",
  lavender: "#e6e6fa",
  lawngreen: "#7cfc00",
  lemonchiffon: "#fffacd",
  lightblue: "#add8e6",
  lightcoral: "#f08080",
  lightcyan: "#e0ffff",
  lightgoldenrodyellow: "#fafad2",
  lightgray: "#d3d3d3",
  lightgreen: "#90ee90",
  lightgrey: "#d3d3d3",
  lightpink: "#ffb6c1",
  lightsalmon: "#ffa07a",
  lightseagreen: "#20b2aa",
  lightskyblue: "#87cefa",
  lightslategray: "#778899",
  lightslategrey: "#778899",
  lightsteelblue: "#b0c4de",
  lightyellow: "#ffffe0",
  lime: "#00ff00",
  limegreen: "#32cd32",
  linen: "#faf0e6",
  magenta: "#ff00ff",
  maroon: "#800000",
  mediumaquamarine: "#66cdaa",
  mediumblue: "#0000cd",
  mediumorchid: "#ba55d3",
  mediumpurple: "#9370db",
  mediumseagreen: "#3cb371",
  mediumslateblue: "#7b68ee",
  mediumspringgreen: "#00fa9a",
  mediumturquoise: "#48d1cc",
  mediumvioletred: "#c71585",
  midnightblue: "#191970",
  mintcream: "#f5fffa",
  mistyrose: "#ffe4e1",
  moccasin: "#ffe4b5",
  navajowhite: "#ffdead",
  navy: "#000080",
  oldlace: "#fdf5e6",
  olive: "#808000",
  olivedrab: "#6b8e23",
  orange: "#ffa500",
  orangered: "#ff4500",
  orchid: "#da70d6",
  palegoldenrod: "#eee8aa",
  palegreen: "#98fb98",
  paleturquoise: "#afeeee",
  palevioletred: "#db7093",
  papayawhip: "#ffefd5",
  peachpuff: "#ffdab9",
  peru: "#cd853f",
  pink: "#ffc0cb",
  plum: "#dda0dd",
  powderblue: "#b0e0e6",
  purple: "#800080",
  rebeccapurple: "#663399",
  red: "#ff0000",
  rosybrown: "#bc8f8f",
  royalblue: "#4169e1",
  saddlebrown: "#8b4513",
  salmon: "#fa8072",
  sandybrown: "#f4a460",
  seagreen: "#2e8b57",
  seashell: "#fff5ee",
  sienna: "#a0522d",
  silver: "#c0c0c0",
  skyblue: "#87ceeb",
  slateblue: "#6a5acd",
  slategray: "#708090",
  slategrey: "#708090",
  snow: "#fffafa",
  springgreen: "#00ff7f",
  steelblue: "#4682b4",
  tan: "#d2b48c",
  teal: "#008080",
  thistle: "#d8bfd8",
  tomato: "#ff6347",
  turquoise: "#40e0d0",
  violet: "#ee82ee",
  wheat: "#f5deb3",
  white: "#ffffff",
  whitesmoke: "#f5f5f5",
  yellow: "#ffff00",
  yellowgreen: "#9acd32"
};
function inputToRGB(color) {
  var rgb = { r: 0, g: 0, b: 0 };
  var a = 1;
  var s = null;
  var v = null;
  var l = null;
  var ok = false;
  var format = false;
  if (typeof color === "string") {
    color = stringInputToObject(color);
  }
  if (typeof color === "object") {
    if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {
      rgb = rgbToRgb(color.r, color.g, color.b);
      ok = true;
      format = String(color.r).substr(-1) === "%" ? "prgb" : "rgb";
    } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {
      s = convertToPercentage(color.s);
      v = convertToPercentage(color.v);
      rgb = hsvToRgb(color.h, s, v);
      ok = true;
      format = "hsv";
    } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {
      s = convertToPercentage(color.s);
      l = convertToPercentage(color.l);
      rgb = hslToRgb(color.h, s, l);
      ok = true;
      format = "hsl";
    }
    if (Object.prototype.hasOwnProperty.call(color, "a")) {
      a = color.a;
    }
  }
  a = boundAlpha(a);
  return {
    ok,
    format: color.format || format,
    r: Math.min(255, Math.max(rgb.r, 0)),
    g: Math.min(255, Math.max(rgb.g, 0)),
    b: Math.min(255, Math.max(rgb.b, 0)),
    a
  };
}
var CSS_INTEGER = "[-\\+]?\\d+%?";
var CSS_NUMBER = "[-\\+]?\\d*\\.\\d+%?";
var CSS_UNIT = "(?:".concat(CSS_NUMBER, ")|(?:").concat(CSS_INTEGER, ")");
var PERMISSIVE_MATCH3 = "[\\s|\\(]+(".concat(CSS_UNIT, ")[,|\\s]+(").concat(CSS_UNIT, ")[,|\\s]+(").concat(CSS_UNIT, ")\\s*\\)?");
var PERMISSIVE_MATCH4 = "[\\s|\\(]+(".concat(CSS_UNIT, ")[,|\\s]+(").concat(CSS_UNIT, ")[,|\\s]+(").concat(CSS_UNIT, ")[,|\\s]+(").concat(CSS_UNIT, ")\\s*\\)?");
var matchers = {
  CSS_UNIT: new RegExp(CSS_UNIT),
  rgb: new RegExp("rgb" + PERMISSIVE_MATCH3),
  rgba: new RegExp("rgba" + PERMISSIVE_MATCH4),
  hsl: new RegExp("hsl" + PERMISSIVE_MATCH3),
  hsla: new RegExp("hsla" + PERMISSIVE_MATCH4),
  hsv: new RegExp("hsv" + PERMISSIVE_MATCH3),
  hsva: new RegExp("hsva" + PERMISSIVE_MATCH4),
  hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
  hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
  hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
  hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
};
function stringInputToObject(color) {
  color = color.trim().toLowerCase();
  if (color.length === 0) {
    return false;
  }
  var named = false;
  if (names[color]) {
    color = names[color];
    named = true;
  } else if (color === "transparent") {
    return { r: 0, g: 0, b: 0, a: 0, format: "name" };
  }
  var match = matchers.rgb.exec(color);
  if (match) {
    return { r: match[1], g: match[2], b: match[3] };
  }
  match = matchers.rgba.exec(color);
  if (match) {
    return { r: match[1], g: match[2], b: match[3], a: match[4] };
  }
  match = matchers.hsl.exec(color);
  if (match) {
    return { h: match[1], s: match[2], l: match[3] };
  }
  match = matchers.hsla.exec(color);
  if (match) {
    return { h: match[1], s: match[2], l: match[3], a: match[4] };
  }
  match = matchers.hsv.exec(color);
  if (match) {
    return { h: match[1], s: match[2], v: match[3] };
  }
  match = matchers.hsva.exec(color);
  if (match) {
    return { h: match[1], s: match[2], v: match[3], a: match[4] };
  }
  match = matchers.hex8.exec(color);
  if (match) {
    return {
      r: parseIntFromHex(match[1]),
      g: parseIntFromHex(match[2]),
      b: parseIntFromHex(match[3]),
      a: convertHexToDecimal(match[4]),
      format: named ? "name" : "hex8"
    };
  }
  match = matchers.hex6.exec(color);
  if (match) {
    return {
      r: parseIntFromHex(match[1]),
      g: parseIntFromHex(match[2]),
      b: parseIntFromHex(match[3]),
      format: named ? "name" : "hex"
    };
  }
  match = matchers.hex4.exec(color);
  if (match) {
    return {
      r: parseIntFromHex(match[1] + match[1]),
      g: parseIntFromHex(match[2] + match[2]),
      b: parseIntFromHex(match[3] + match[3]),
      a: convertHexToDecimal(match[4] + match[4]),
      format: named ? "name" : "hex8"
    };
  }
  match = matchers.hex3.exec(color);
  if (match) {
    return {
      r: parseIntFromHex(match[1] + match[1]),
      g: parseIntFromHex(match[2] + match[2]),
      b: parseIntFromHex(match[3] + match[3]),
      format: named ? "name" : "hex"
    };
  }
  return false;
}
function isValidCSSUnit(color) {
  return Boolean(matchers.CSS_UNIT.exec(String(color)));
}
var TinyColor = (
  /** @class */
  (function() {
    function TinyColor2(color, opts) {
      if (color === void 0) {
        color = "";
      }
      if (opts === void 0) {
        opts = {};
      }
      var _a2;
      if (color instanceof TinyColor2) {
        return color;
      }
      if (typeof color === "number") {
        color = numberInputToObject(color);
      }
      this.originalInput = color;
      var rgb = inputToRGB(color);
      this.originalInput = color;
      this.r = rgb.r;
      this.g = rgb.g;
      this.b = rgb.b;
      this.a = rgb.a;
      this.roundA = Math.round(100 * this.a) / 100;
      this.format = (_a2 = opts.format) !== null && _a2 !== void 0 ? _a2 : rgb.format;
      this.gradientType = opts.gradientType;
      if (this.r < 1) {
        this.r = Math.round(this.r);
      }
      if (this.g < 1) {
        this.g = Math.round(this.g);
      }
      if (this.b < 1) {
        this.b = Math.round(this.b);
      }
      this.isValid = rgb.ok;
    }
    TinyColor2.prototype.isDark = function() {
      return this.getBrightness() < 128;
    };
    TinyColor2.prototype.isLight = function() {
      return !this.isDark();
    };
    TinyColor2.prototype.getBrightness = function() {
      var rgb = this.toRgb();
      return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1e3;
    };
    TinyColor2.prototype.getLuminance = function() {
      var rgb = this.toRgb();
      var R2;
      var G2;
      var B2;
      var RsRGB = rgb.r / 255;
      var GsRGB = rgb.g / 255;
      var BsRGB = rgb.b / 255;
      if (RsRGB <= 0.03928) {
        R2 = RsRGB / 12.92;
      } else {
        R2 = Math.pow((RsRGB + 0.055) / 1.055, 2.4);
      }
      if (GsRGB <= 0.03928) {
        G2 = GsRGB / 12.92;
      } else {
        G2 = Math.pow((GsRGB + 0.055) / 1.055, 2.4);
      }
      if (BsRGB <= 0.03928) {
        B2 = BsRGB / 12.92;
      } else {
        B2 = Math.pow((BsRGB + 0.055) / 1.055, 2.4);
      }
      return 0.2126 * R2 + 0.7152 * G2 + 0.0722 * B2;
    };
    TinyColor2.prototype.getAlpha = function() {
      return this.a;
    };
    TinyColor2.prototype.setAlpha = function(alpha) {
      this.a = boundAlpha(alpha);
      this.roundA = Math.round(100 * this.a) / 100;
      return this;
    };
    TinyColor2.prototype.isMonochrome = function() {
      var s = this.toHsl().s;
      return s === 0;
    };
    TinyColor2.prototype.toHsv = function() {
      var hsv = rgbToHsv(this.r, this.g, this.b);
      return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this.a };
    };
    TinyColor2.prototype.toHsvString = function() {
      var hsv = rgbToHsv(this.r, this.g, this.b);
      var h2 = Math.round(hsv.h * 360);
      var s = Math.round(hsv.s * 100);
      var v = Math.round(hsv.v * 100);
      return this.a === 1 ? "hsv(".concat(h2, ", ").concat(s, "%, ").concat(v, "%)") : "hsva(".concat(h2, ", ").concat(s, "%, ").concat(v, "%, ").concat(this.roundA, ")");
    };
    TinyColor2.prototype.toHsl = function() {
      var hsl = rgbToHsl(this.r, this.g, this.b);
      return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this.a };
    };
    TinyColor2.prototype.toHslString = function() {
      var hsl = rgbToHsl(this.r, this.g, this.b);
      var h2 = Math.round(hsl.h * 360);
      var s = Math.round(hsl.s * 100);
      var l = Math.round(hsl.l * 100);
      return this.a === 1 ? "hsl(".concat(h2, ", ").concat(s, "%, ").concat(l, "%)") : "hsla(".concat(h2, ", ").concat(s, "%, ").concat(l, "%, ").concat(this.roundA, ")");
    };
    TinyColor2.prototype.toHex = function(allow3Char) {
      if (allow3Char === void 0) {
        allow3Char = false;
      }
      return rgbToHex(this.r, this.g, this.b, allow3Char);
    };
    TinyColor2.prototype.toHexString = function(allow3Char) {
      if (allow3Char === void 0) {
        allow3Char = false;
      }
      return "#" + this.toHex(allow3Char);
    };
    TinyColor2.prototype.toHex8 = function(allow4Char) {
      if (allow4Char === void 0) {
        allow4Char = false;
      }
      return rgbaToHex(this.r, this.g, this.b, this.a, allow4Char);
    };
    TinyColor2.prototype.toHex8String = function(allow4Char) {
      if (allow4Char === void 0) {
        allow4Char = false;
      }
      return "#" + this.toHex8(allow4Char);
    };
    TinyColor2.prototype.toHexShortString = function(allowShortChar) {
      if (allowShortChar === void 0) {
        allowShortChar = false;
      }
      return this.a === 1 ? this.toHexString(allowShortChar) : this.toHex8String(allowShortChar);
    };
    TinyColor2.prototype.toRgb = function() {
      return {
        r: Math.round(this.r),
        g: Math.round(this.g),
        b: Math.round(this.b),
        a: this.a
      };
    };
    TinyColor2.prototype.toRgbString = function() {
      var r = Math.round(this.r);
      var g = Math.round(this.g);
      var b = Math.round(this.b);
      return this.a === 1 ? "rgb(".concat(r, ", ").concat(g, ", ").concat(b, ")") : "rgba(".concat(r, ", ").concat(g, ", ").concat(b, ", ").concat(this.roundA, ")");
    };
    TinyColor2.prototype.toPercentageRgb = function() {
      var fmt = function(x) {
        return "".concat(Math.round(bound01(x, 255) * 100), "%");
      };
      return {
        r: fmt(this.r),
        g: fmt(this.g),
        b: fmt(this.b),
        a: this.a
      };
    };
    TinyColor2.prototype.toPercentageRgbString = function() {
      var rnd = function(x) {
        return Math.round(bound01(x, 255) * 100);
      };
      return this.a === 1 ? "rgb(".concat(rnd(this.r), "%, ").concat(rnd(this.g), "%, ").concat(rnd(this.b), "%)") : "rgba(".concat(rnd(this.r), "%, ").concat(rnd(this.g), "%, ").concat(rnd(this.b), "%, ").concat(this.roundA, ")");
    };
    TinyColor2.prototype.toName = function() {
      if (this.a === 0) {
        return "transparent";
      }
      if (this.a < 1) {
        return false;
      }
      var hex = "#" + rgbToHex(this.r, this.g, this.b, false);
      for (var _i = 0, _a2 = Object.entries(names); _i < _a2.length; _i++) {
        var _b = _a2[_i], key = _b[0], value = _b[1];
        if (hex === value) {
          return key;
        }
      }
      return false;
    };
    TinyColor2.prototype.toString = function(format) {
      var formatSet = Boolean(format);
      format = format !== null && format !== void 0 ? format : this.format;
      var formattedString = false;
      var hasAlpha = this.a < 1 && this.a >= 0;
      var needsAlphaFormat = !formatSet && hasAlpha && (format.startsWith("hex") || format === "name");
      if (needsAlphaFormat) {
        if (format === "name" && this.a === 0) {
          return this.toName();
        }
        return this.toRgbString();
      }
      if (format === "rgb") {
        formattedString = this.toRgbString();
      }
      if (format === "prgb") {
        formattedString = this.toPercentageRgbString();
      }
      if (format === "hex" || format === "hex6") {
        formattedString = this.toHexString();
      }
      if (format === "hex3") {
        formattedString = this.toHexString(true);
      }
      if (format === "hex4") {
        formattedString = this.toHex8String(true);
      }
      if (format === "hex8") {
        formattedString = this.toHex8String();
      }
      if (format === "name") {
        formattedString = this.toName();
      }
      if (format === "hsl") {
        formattedString = this.toHslString();
      }
      if (format === "hsv") {
        formattedString = this.toHsvString();
      }
      return formattedString || this.toHexString();
    };
    TinyColor2.prototype.toNumber = function() {
      return (Math.round(this.r) << 16) + (Math.round(this.g) << 8) + Math.round(this.b);
    };
    TinyColor2.prototype.clone = function() {
      return new TinyColor2(this.toString());
    };
    TinyColor2.prototype.lighten = function(amount) {
      if (amount === void 0) {
        amount = 10;
      }
      var hsl = this.toHsl();
      hsl.l += amount / 100;
      hsl.l = clamp01(hsl.l);
      return new TinyColor2(hsl);
    };
    TinyColor2.prototype.brighten = function(amount) {
      if (amount === void 0) {
        amount = 10;
      }
      var rgb = this.toRgb();
      rgb.r = Math.max(0, Math.min(255, rgb.r - Math.round(255 * -(amount / 100))));
      rgb.g = Math.max(0, Math.min(255, rgb.g - Math.round(255 * -(amount / 100))));
      rgb.b = Math.max(0, Math.min(255, rgb.b - Math.round(255 * -(amount / 100))));
      return new TinyColor2(rgb);
    };
    TinyColor2.prototype.darken = function(amount) {
      if (amount === void 0) {
        amount = 10;
      }
      var hsl = this.toHsl();
      hsl.l -= amount / 100;
      hsl.l = clamp01(hsl.l);
      return new TinyColor2(hsl);
    };
    TinyColor2.prototype.tint = function(amount) {
      if (amount === void 0) {
        amount = 10;
      }
      return this.mix("white", amount);
    };
    TinyColor2.prototype.shade = function(amount) {
      if (amount === void 0) {
        amount = 10;
      }
      return this.mix("black", amount);
    };
    TinyColor2.prototype.desaturate = function(amount) {
      if (amount === void 0) {
        amount = 10;
      }
      var hsl = this.toHsl();
      hsl.s -= amount / 100;
      hsl.s = clamp01(hsl.s);
      return new TinyColor2(hsl);
    };
    TinyColor2.prototype.saturate = function(amount) {
      if (amount === void 0) {
        amount = 10;
      }
      var hsl = this.toHsl();
      hsl.s += amount / 100;
      hsl.s = clamp01(hsl.s);
      return new TinyColor2(hsl);
    };
    TinyColor2.prototype.greyscale = function() {
      return this.desaturate(100);
    };
    TinyColor2.prototype.spin = function(amount) {
      var hsl = this.toHsl();
      var hue = (hsl.h + amount) % 360;
      hsl.h = hue < 0 ? 360 + hue : hue;
      return new TinyColor2(hsl);
    };
    TinyColor2.prototype.mix = function(color, amount) {
      if (amount === void 0) {
        amount = 50;
      }
      var rgb1 = this.toRgb();
      var rgb2 = new TinyColor2(color).toRgb();
      var p = amount / 100;
      var rgba = {
        r: (rgb2.r - rgb1.r) * p + rgb1.r,
        g: (rgb2.g - rgb1.g) * p + rgb1.g,
        b: (rgb2.b - rgb1.b) * p + rgb1.b,
        a: (rgb2.a - rgb1.a) * p + rgb1.a
      };
      return new TinyColor2(rgba);
    };
    TinyColor2.prototype.analogous = function(results, slices) {
      if (results === void 0) {
        results = 6;
      }
      if (slices === void 0) {
        slices = 30;
      }
      var hsl = this.toHsl();
      var part = 360 / slices;
      var ret = [this];
      for (hsl.h = (hsl.h - (part * results >> 1) + 720) % 360; --results; ) {
        hsl.h = (hsl.h + part) % 360;
        ret.push(new TinyColor2(hsl));
      }
      return ret;
    };
    TinyColor2.prototype.complement = function() {
      var hsl = this.toHsl();
      hsl.h = (hsl.h + 180) % 360;
      return new TinyColor2(hsl);
    };
    TinyColor2.prototype.monochromatic = function(results) {
      if (results === void 0) {
        results = 6;
      }
      var hsv = this.toHsv();
      var h2 = hsv.h;
      var s = hsv.s;
      var v = hsv.v;
      var res = [];
      var modification = 1 / results;
      while (results--) {
        res.push(new TinyColor2({ h: h2, s, v }));
        v = (v + modification) % 1;
      }
      return res;
    };
    TinyColor2.prototype.splitcomplement = function() {
      var hsl = this.toHsl();
      var h2 = hsl.h;
      return [
        this,
        new TinyColor2({ h: (h2 + 72) % 360, s: hsl.s, l: hsl.l }),
        new TinyColor2({ h: (h2 + 216) % 360, s: hsl.s, l: hsl.l })
      ];
    };
    TinyColor2.prototype.onBackground = function(background) {
      var fg = this.toRgb();
      var bg = new TinyColor2(background).toRgb();
      var alpha = fg.a + bg.a * (1 - fg.a);
      return new TinyColor2({
        r: (fg.r * fg.a + bg.r * bg.a * (1 - fg.a)) / alpha,
        g: (fg.g * fg.a + bg.g * bg.a * (1 - fg.a)) / alpha,
        b: (fg.b * fg.a + bg.b * bg.a * (1 - fg.a)) / alpha,
        a: alpha
      });
    };
    TinyColor2.prototype.triad = function() {
      return this.polyad(3);
    };
    TinyColor2.prototype.tetrad = function() {
      return this.polyad(4);
    };
    TinyColor2.prototype.polyad = function(n) {
      var hsl = this.toHsl();
      var h2 = hsl.h;
      var result = [this];
      var increment = 360 / n;
      for (var i = 1; i < n; i++) {
        result.push(new TinyColor2({ h: (h2 + i * increment) % 360, s: hsl.s, l: hsl.l }));
      }
      return result;
    };
    TinyColor2.prototype.equals = function(color) {
      return this.toRgbString() === new TinyColor2(color).toRgbString();
    };
    return TinyColor2;
  })()
);
function darken(color, amount = 20) {
  return color.mix("#141414", amount).toString();
}
function useButtonCustomStyle(props) {
  const _disabled = useFormDisabled();
  const ns = useNamespace("button");
  return computed(() => {
    let styles = {};
    let buttonColor = props.color;
    if (buttonColor) {
      const match = buttonColor.match(/var\((.*?)\)/);
      if (match) {
        buttonColor = window.getComputedStyle(window.document.documentElement).getPropertyValue(match[1]);
      }
      const color = new TinyColor(buttonColor);
      const activeBgColor = props.dark ? color.tint(20).toString() : darken(color, 20);
      if (props.plain) {
        styles = ns.cssVarBlock({
          "bg-color": props.dark ? darken(color, 90) : color.tint(90).toString(),
          "text-color": buttonColor,
          "border-color": props.dark ? darken(color, 50) : color.tint(50).toString(),
          "hover-text-color": `var(${ns.cssVarName("color-white")})`,
          "hover-bg-color": buttonColor,
          "hover-border-color": buttonColor,
          "active-bg-color": activeBgColor,
          "active-text-color": `var(${ns.cssVarName("color-white")})`,
          "active-border-color": activeBgColor
        });
        if (_disabled.value) {
          styles[ns.cssVarBlockName("disabled-bg-color")] = props.dark ? darken(color, 90) : color.tint(90).toString();
          styles[ns.cssVarBlockName("disabled-text-color")] = props.dark ? darken(color, 50) : color.tint(50).toString();
          styles[ns.cssVarBlockName("disabled-border-color")] = props.dark ? darken(color, 80) : color.tint(80).toString();
        }
      } else {
        const hoverBgColor = props.dark ? darken(color, 30) : color.tint(30).toString();
        const textColor = color.isDark() ? `var(${ns.cssVarName("color-white")})` : `var(${ns.cssVarName("color-black")})`;
        styles = ns.cssVarBlock({
          "bg-color": buttonColor,
          "text-color": textColor,
          "border-color": buttonColor,
          "hover-bg-color": hoverBgColor,
          "hover-text-color": textColor,
          "hover-border-color": hoverBgColor,
          "active-bg-color": activeBgColor,
          "active-border-color": activeBgColor
        });
        if (_disabled.value) {
          const disabledButtonColor = props.dark ? darken(color, 50) : color.tint(50).toString();
          styles[ns.cssVarBlockName("disabled-bg-color")] = disabledButtonColor;
          styles[ns.cssVarBlockName("disabled-text-color")] = props.dark ? "rgba(255, 255, 255, 0.5)" : `var(${ns.cssVarName("color-white")})`;
          styles[ns.cssVarBlockName("disabled-border-color")] = disabledButtonColor;
        }
      }
    }
    return styles;
  });
}
var __default__$1 = defineComponent({
  name: "ElButton"
});
var _sfc_main$1 = defineComponent({
  ...__default__$1,
  props: buttonProps,
  emits: buttonEmits,
  setup(__props, { expose, emit }) {
    const props = __props;
    const buttonStyle = useButtonCustomStyle(props);
    const ns = useNamespace("button");
    const { _ref, _size, _type: _type2, _disabled, _props, shouldAddSpace, handleClick } = useButton(props, emit);
    const buttonKls = computed(() => [
      ns.b(),
      ns.m(_type2.value),
      ns.m(_size.value),
      ns.is("disabled", _disabled.value),
      ns.is("loading", props.loading),
      ns.is("plain", props.plain),
      ns.is("round", props.round),
      ns.is("circle", props.circle),
      ns.is("text", props.text),
      ns.is("link", props.link),
      ns.is("has-bg", props.bg)
    ]);
    expose({
      ref: _ref,
      size: _size,
      type: _type2,
      disabled: _disabled,
      shouldAddSpace
    });
    return (_ctx, _cache) => {
      return openBlock(), createBlock(resolveDynamicComponent(_ctx.tag), mergeProps({
        ref_key: "_ref",
        ref: _ref
      }, unref(_props), {
        class: unref(buttonKls),
        style: unref(buttonStyle),
        onClick: unref(handleClick)
      }), {
        default: withCtx(() => [
          _ctx.loading ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
            _ctx.$slots.loading ? renderSlot(_ctx.$slots, "loading", { key: 0 }) : (openBlock(), createBlock(unref(ElIcon), {
              key: 1,
              class: normalizeClass(unref(ns).is("loading"))
            }, {
              default: withCtx(() => [
                (openBlock(), createBlock(resolveDynamicComponent(_ctx.loadingIcon)))
              ]),
              _: 1
            }, 8, ["class"]))
          ], 64)) : _ctx.icon || _ctx.$slots.icon ? (openBlock(), createBlock(unref(ElIcon), { key: 1 }, {
            default: withCtx(() => [
              _ctx.icon ? (openBlock(), createBlock(resolveDynamicComponent(_ctx.icon), { key: 0 })) : renderSlot(_ctx.$slots, "icon", { key: 1 })
            ]),
            _: 3
          })) : createCommentVNode("v-if", true),
          _ctx.$slots.default ? (openBlock(), createElementBlock("span", {
            key: 2,
            class: normalizeClass({ [unref(ns).em("text", "expand")]: unref(shouldAddSpace) })
          }, [
            renderSlot(_ctx.$slots, "default")
          ], 2)) : createCommentVNode("v-if", true)
        ]),
        _: 3
      }, 16, ["class", "style", "onClick"]);
    };
  }
});
var Button = _export_sfc2(_sfc_main$1, [["__file", "button.vue"]]);
var buttonGroupProps = {
  size: buttonProps.size,
  type: buttonProps.type
};
var __default__2 = defineComponent({
  name: "ElButtonGroup"
});
var _sfc_main2 = defineComponent({
  ...__default__2,
  props: buttonGroupProps,
  setup(__props) {
    const props = __props;
    provide(buttonGroupContextKey, reactive({
      size: toRef(props, "size"),
      type: toRef(props, "type")
    }));
    const ns = useNamespace("button");
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(unref(ns).b("group"))
      }, [
        renderSlot(_ctx.$slots, "default")
      ], 2);
    };
  }
});
var ButtonGroup = _export_sfc2(_sfc_main2, [["__file", "button-group.vue"]]);
var ElButton = withInstall(Button, {
  ButtonGroup
});
withNoopInstall(ButtonGroup);

// node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/es/Attachments/index.js
import "/Users/Bone/Documents/Github/AI-RagFLow-Api/node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/index9.css";
import "/Users/Bone/Documents/Github/AI-RagFLow-Api/node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/index7.css";

// node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/index-BvufZeL0.js
import "/Users/Bone/Documents/Github/AI-RagFLow-Api/node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/el-image-viewer.css";
import "/Users/Bone/Documents/Github/AI-RagFLow-Api/node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/index9.css";

// node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/es/FilesCard/options.js
var colorMap = {
  word: "#0078D4",
  excel: "#00C851",
  ppt: "#FF5722",
  pdf: "#E53935",
  txt: "#424242",
  mark: "#6C6C6C",
  image: "#FF80AB",
  audio: "#FF7878",
  video: "#8B72F7",
  three: "#29B6F6",
  code: "#00008B",
  database: "#FF9800",
  link: "#2962FF",
  zip: "#673AB7",
  file: "#FFC757",
  unknown: "#6E9DA4"
};

// node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/index-CQYjZvuF.js
function isNil(value) {
  return value == null;
}
function unrefElement(elRef) {
  var _a2;
  const plain = resolveUnref(elRef);
  return (_a2 = plain == null ? void 0 : plain.$el) != null ? _a2 : plain;
}
var defaultWindow = isClient ? window : void 0;
function useEventListener(...args) {
  let target;
  let events;
  let listeners;
  let options;
  if (isString(args[0]) || Array.isArray(args[0])) {
    [events, listeners, options] = args;
    target = defaultWindow;
  } else {
    [target, events, listeners, options] = args;
  }
  if (!target)
    return noop;
  if (!Array.isArray(events))
    events = [events];
  if (!Array.isArray(listeners))
    listeners = [listeners];
  const cleanups = [];
  const cleanup = () => {
    cleanups.forEach((fn2) => fn2());
    cleanups.length = 0;
  };
  const register = (el, event, listener, options2) => {
    el.addEventListener(event, listener, options2);
    return () => el.removeEventListener(event, listener, options2);
  };
  const stopWatch = watch(() => [unrefElement(target), resolveUnref(options)], ([el, options2]) => {
    cleanup();
    if (!el)
      return;
    cleanups.push(...events.flatMap((event) => {
      return listeners.map((listener) => register(el, event, listener, options2));
    }));
  }, { immediate: true, flush: "post" });
  const stop = () => {
    stopWatch();
    cleanup();
  };
  tryOnScopeDispose(stop);
  return stop;
}
var _iOSWorkaround = false;
function onClickOutside(target, handler, options = {}) {
  const { window: window2 = defaultWindow, ignore = [], capture = true, detectIframe = false } = options;
  if (!window2)
    return;
  if (isIOS && !_iOSWorkaround) {
    _iOSWorkaround = true;
    Array.from(window2.document.body.children).forEach((el) => el.addEventListener("click", noop));
  }
  let shouldListen = true;
  const shouldIgnore = (event) => {
    return ignore.some((target2) => {
      if (typeof target2 === "string") {
        return Array.from(window2.document.querySelectorAll(target2)).some((el) => el === event.target || event.composedPath().includes(el));
      } else {
        const el = unrefElement(target2);
        return el && (event.target === el || event.composedPath().includes(el));
      }
    });
  };
  const listener = (event) => {
    const el = unrefElement(target);
    if (!el || el === event.target || event.composedPath().includes(el))
      return;
    if (event.detail === 0)
      shouldListen = !shouldIgnore(event);
    if (!shouldListen) {
      shouldListen = true;
      return;
    }
    handler(event);
  };
  const cleanup = [
    useEventListener(window2, "click", listener, { passive: true, capture }),
    useEventListener(window2, "pointerdown", (e) => {
      const el = unrefElement(target);
      if (el)
        shouldListen = !e.composedPath().includes(el) && !shouldIgnore(e);
    }, { passive: true }),
    detectIframe && useEventListener(window2, "blur", (event) => {
      var _a2;
      const el = unrefElement(target);
      if (((_a2 = window2.document.activeElement) == null ? void 0 : _a2.tagName) === "IFRAME" && !(el == null ? void 0 : el.contains(window2.document.activeElement)))
        handler(event);
    })
  ].filter(Boolean);
  const stop = () => cleanup.forEach((fn2) => fn2());
  return stop;
}
function useSupported(callback, sync = false) {
  const isSupported = ref();
  const update = () => isSupported.value = Boolean(callback());
  update();
  tryOnMounted(update, sync);
  return isSupported;
}
function cloneFnJSON(source) {
  return JSON.parse(JSON.stringify(source));
}
var _global = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
var globalKey = "__vueuse_ssr_handlers__";
_global[globalKey] = _global[globalKey] || {};
var __getOwnPropSymbols$g = Object.getOwnPropertySymbols;
var __hasOwnProp$g = Object.prototype.hasOwnProperty;
var __propIsEnum$g = Object.prototype.propertyIsEnumerable;
var __objRest$2 = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp$g.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols$g)
    for (var prop of __getOwnPropSymbols$g(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum$g.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
function useResizeObserver(target, callback, options = {}) {
  const _a2 = options, { window: window2 = defaultWindow } = _a2, observerOptions = __objRest$2(_a2, ["window"]);
  let observer;
  const isSupported = useSupported(() => window2 && "ResizeObserver" in window2);
  const cleanup = () => {
    if (observer) {
      observer.disconnect();
      observer = void 0;
    }
  };
  const stopWatch = watch(() => unrefElement(target), (el) => {
    cleanup();
    if (isSupported.value && window2 && el) {
      observer = new ResizeObserver(callback);
      observer.observe(el, observerOptions);
    }
  }, { immediate: true, flush: "post" });
  const stop = () => {
    cleanup();
    stopWatch();
  };
  tryOnScopeDispose(stop);
  return {
    isSupported,
    stop
  };
}
var SwipeDirection;
(function(SwipeDirection2) {
  SwipeDirection2["UP"] = "UP";
  SwipeDirection2["RIGHT"] = "RIGHT";
  SwipeDirection2["DOWN"] = "DOWN";
  SwipeDirection2["LEFT"] = "LEFT";
  SwipeDirection2["NONE"] = "NONE";
})(SwipeDirection || (SwipeDirection = {}));
var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var _TransitionPresets = {
  easeInSine: [0.12, 0, 0.39, 0],
  easeOutSine: [0.61, 1, 0.88, 1],
  easeInOutSine: [0.37, 0, 0.63, 1],
  easeInQuad: [0.11, 0, 0.5, 0],
  easeOutQuad: [0.5, 1, 0.89, 1],
  easeInOutQuad: [0.45, 0, 0.55, 1],
  easeInCubic: [0.32, 0, 0.67, 0],
  easeOutCubic: [0.33, 1, 0.68, 1],
  easeInOutCubic: [0.65, 0, 0.35, 1],
  easeInQuart: [0.5, 0, 0.75, 0],
  easeOutQuart: [0.25, 1, 0.5, 1],
  easeInOutQuart: [0.76, 0, 0.24, 1],
  easeInQuint: [0.64, 0, 0.78, 0],
  easeOutQuint: [0.22, 1, 0.36, 1],
  easeInOutQuint: [0.83, 0, 0.17, 1],
  easeInExpo: [0.7, 0, 0.84, 0],
  easeOutExpo: [0.16, 1, 0.3, 1],
  easeInOutExpo: [0.87, 0, 0.13, 1],
  easeInCirc: [0.55, 0, 1, 0.45],
  easeOutCirc: [0, 0.55, 0.45, 1],
  easeInOutCirc: [0.85, 0, 0.15, 1],
  easeInBack: [0.36, 0, 0.66, -0.56],
  easeOutBack: [0.34, 1.56, 0.64, 1],
  easeInOutBack: [0.68, -0.6, 0.32, 1.6]
};
__spreadValues({
  linear: identity
}, _TransitionPresets);
function useVModel(props, key, emit, options = {}) {
  var _a2, _b, _c;
  const {
    clone = false,
    passive = false,
    eventName,
    deep = false,
    defaultValue
  } = options;
  const vm = getCurrentInstance();
  const _emit = (vm == null ? void 0 : vm.emit) || ((_a2 = vm == null ? void 0 : vm.$emit) == null ? void 0 : _a2.bind(vm)) || ((_c = (_b = vm == null ? void 0 : vm.proxy) == null ? void 0 : _b.$emit) == null ? void 0 : _c.bind(vm == null ? void 0 : vm.proxy));
  let event = eventName;
  event = eventName || event || `update:${key.toString()}`;
  const cloneFn = (val) => !clone ? val : isFunction(clone) ? clone(val) : cloneFnJSON(val);
  const getValue = () => isDef(props[key]) ? cloneFn(props[key]) : defaultValue;
  if (passive) {
    const initialValue = getValue();
    const proxy = ref(initialValue);
    watch(() => props[key], (v) => proxy.value = cloneFn(v));
    watch(proxy, (v) => {
      if (v !== props[key] || deep)
        _emit(event, v);
    }, { deep });
    return proxy;
  } else {
    return computed({
      get() {
        return getValue();
      },
      set(value) {
        _emit(event, value);
      }
    });
  }
}
var initial = {
  current: 0
};
var zIndex = ref(0);
var defaultInitialZIndex = 2e3;
var ZINDEX_INJECTION_KEY = Symbol("elZIndexContextKey");
var zIndexContextKey = Symbol("zIndexContextKey");
var useZIndex = (zIndexOverrides) => {
  const increasingInjection = getCurrentInstance() ? inject(ZINDEX_INJECTION_KEY, initial) : initial;
  const zIndexInjection = getCurrentInstance() ? inject(zIndexContextKey, void 0) : void 0;
  const initialZIndex = computed(() => {
    const zIndexFromInjection = unref(zIndexInjection);
    return isNumber(zIndexFromInjection) ? zIndexFromInjection : defaultInitialZIndex;
  });
  const currentZIndex = computed(() => initialZIndex.value + zIndex.value);
  const nextZIndex = () => {
    increasingInjection.current++;
    zIndex.value = increasingInjection.current;
    return currentZIndex.value;
  };
  if (!isClient && !inject(ZINDEX_INJECTION_KEY)) {
    debugWarn("ZIndexInjection", `Looks like you are using server rendering, you must provide a z-index provider to ensure the hydration process to be succeed
usage: app.provide(ZINDEX_INJECTION_KEY, { current: 0 })`);
  }
  return {
    initialZIndex,
    currentZIndex,
    nextZIndex
  };
};
var isFocusable = (element) => {
  if (element.tabIndex > 0 || element.tabIndex === 0 && element.getAttribute("tabIndex") !== null) {
    return true;
  }
  if (element.tabIndex < 0 || element.hasAttribute("disabled") || element.getAttribute("aria-disabled") === "true") {
    return false;
  }
  switch (element.nodeName) {
    case "A": {
      return !!element.href && element.rel !== "ignore";
    }
    case "INPUT": {
      return !(element.type === "hidden" || element.type === "file");
    }
    case "BUTTON":
    case "SELECT":
    case "TEXTAREA": {
      return true;
    }
    default: {
      return false;
    }
  }
};
var FOCUS_AFTER_TRAPPED = "focus-trap.focus-after-trapped";
var FOCUS_AFTER_RELEASED = "focus-trap.focus-after-released";
var FOCUSOUT_PREVENTED = "focus-trap.focusout-prevented";
var FOCUS_AFTER_TRAPPED_OPTS = {
  cancelable: true,
  bubbles: false
};
var FOCUSOUT_PREVENTED_OPTS = {
  cancelable: true,
  bubbles: false
};
var ON_TRAP_FOCUS_EVT = "focusAfterTrapped";
var ON_RELEASE_FOCUS_EVT = "focusAfterReleased";
var FOCUS_TRAP_INJECTION_KEY = Symbol("elFocusTrap");
var focusReason = ref();
var lastUserFocusTimestamp = ref(0);
var lastAutomatedFocusTimestamp = ref(0);
var focusReasonUserCount = 0;
var obtainAllFocusableElements = (element) => {
  const nodes = [];
  const walker = document.createTreeWalker(element, NodeFilter.SHOW_ELEMENT, {
    acceptNode: (node) => {
      const isHiddenInput = node.tagName === "INPUT" && node.type === "hidden";
      if (node.disabled || node.hidden || isHiddenInput)
        return NodeFilter.FILTER_SKIP;
      return node.tabIndex >= 0 || node === document.activeElement ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;
    }
  });
  while (walker.nextNode())
    nodes.push(walker.currentNode);
  return nodes;
};
var getVisibleElement = (elements, container) => {
  for (const element of elements) {
    if (!isHidden(element, container))
      return element;
  }
};
var isHidden = (element, container) => {
  if (false)
    return false;
  if (getComputedStyle(element).visibility === "hidden")
    return true;
  while (element) {
    if (container && element === container)
      return false;
    if (getComputedStyle(element).display === "none")
      return true;
    element = element.parentElement;
  }
  return false;
};
var getEdges = (container) => {
  const focusable = obtainAllFocusableElements(container);
  const first = getVisibleElement(focusable, container);
  const last = getVisibleElement(focusable.reverse(), container);
  return [first, last];
};
var isSelectable = (element) => {
  return element instanceof HTMLInputElement && "select" in element;
};
var tryFocus = (element, shouldSelect) => {
  if (element && element.focus) {
    const prevFocusedElement = document.activeElement;
    let cleanup = false;
    if (isElement(element) && !isFocusable(element) && !element.getAttribute("tabindex")) {
      element.setAttribute("tabindex", "-1");
      cleanup = true;
    }
    element.focus({ preventScroll: true });
    lastAutomatedFocusTimestamp.value = window.performance.now();
    if (element !== prevFocusedElement && isSelectable(element) && shouldSelect) {
      element.select();
    }
    if (isElement(element) && cleanup) {
      element.removeAttribute("tabindex");
    }
  }
};
function removeFromStack(list, item) {
  const copy = [...list];
  const idx = list.indexOf(item);
  if (idx !== -1) {
    copy.splice(idx, 1);
  }
  return copy;
}
var createFocusableStack = () => {
  let stack = [];
  const push = (layer) => {
    const currentLayer = stack[0];
    if (currentLayer && layer !== currentLayer) {
      currentLayer.pause();
    }
    stack = removeFromStack(stack, layer);
    stack.unshift(layer);
  };
  const remove = (layer) => {
    var _a2, _b;
    stack = removeFromStack(stack, layer);
    (_b = (_a2 = stack[0]) == null ? void 0 : _a2.resume) == null ? void 0 : _b.call(_a2);
  };
  return {
    push,
    remove
  };
};
var focusFirstDescendant = (elements, shouldSelect = false) => {
  const prevFocusedElement = document.activeElement;
  for (const element of elements) {
    tryFocus(element, shouldSelect);
    if (document.activeElement !== prevFocusedElement)
      return;
  }
};
var focusableStack = createFocusableStack();
var isFocusCausedByUserEvent = () => {
  return lastUserFocusTimestamp.value > lastAutomatedFocusTimestamp.value;
};
var notifyFocusReasonPointer = () => {
  focusReason.value = "pointer";
  lastUserFocusTimestamp.value = window.performance.now();
};
var notifyFocusReasonKeydown = () => {
  focusReason.value = "keyboard";
  lastUserFocusTimestamp.value = window.performance.now();
};
var useFocusReason = () => {
  onMounted(() => {
    if (focusReasonUserCount === 0) {
      document.addEventListener("mousedown", notifyFocusReasonPointer);
      document.addEventListener("touchstart", notifyFocusReasonPointer);
      document.addEventListener("keydown", notifyFocusReasonKeydown);
    }
    focusReasonUserCount++;
  });
  onBeforeUnmount(() => {
    focusReasonUserCount--;
    if (focusReasonUserCount <= 0) {
      document.removeEventListener("mousedown", notifyFocusReasonPointer);
      document.removeEventListener("touchstart", notifyFocusReasonPointer);
      document.removeEventListener("keydown", notifyFocusReasonKeydown);
    }
  });
  return {
    focusReason,
    lastUserFocusTimestamp,
    lastAutomatedFocusTimestamp
  };
};
var createFocusOutPreventedEvent = (detail) => {
  return new CustomEvent(FOCUSOUT_PREVENTED, {
    ...FOCUSOUT_PREVENTED_OPTS,
    detail
  });
};
var EVENT_CODE = {
  tab: "Tab",
  enter: "Enter",
  space: "Space",
  left: "ArrowLeft",
  up: "ArrowUp",
  right: "ArrowRight",
  down: "ArrowDown",
  esc: "Escape",
  backspace: "Backspace",
  numpadEnter: "NumpadEnter",
  pageUp: "PageUp",
  pageDown: "PageDown",
  home: "Home",
  end: "End"
};
var registeredEscapeHandlers = [];
var cachedHandler = (event) => {
  if (event.code === EVENT_CODE.esc) {
    registeredEscapeHandlers.forEach((registeredHandler) => registeredHandler(event));
  }
};
var useEscapeKeydown = (handler) => {
  onMounted(() => {
    if (registeredEscapeHandlers.length === 0) {
      document.addEventListener("keydown", cachedHandler);
    }
    if (isClient)
      registeredEscapeHandlers.push(handler);
  });
  onBeforeUnmount(() => {
    registeredEscapeHandlers = registeredEscapeHandlers.filter((registeredHandler) => registeredHandler !== handler);
    if (registeredEscapeHandlers.length === 0) {
      if (isClient)
        document.removeEventListener("keydown", cachedHandler);
    }
  });
};
var _sfc_main$12 = defineComponent({
  name: "ElFocusTrap",
  inheritAttrs: false,
  props: {
    loop: Boolean,
    trapped: Boolean,
    focusTrapEl: Object,
    focusStartEl: {
      type: [Object, String],
      default: "first"
    }
  },
  emits: [
    ON_TRAP_FOCUS_EVT,
    ON_RELEASE_FOCUS_EVT,
    "focusin",
    "focusout",
    "focusout-prevented",
    "release-requested"
  ],
  setup(props, { emit }) {
    const forwardRef = ref();
    let lastFocusBeforeTrapped;
    let lastFocusAfterTrapped;
    const { focusReason: focusReason2 } = useFocusReason();
    useEscapeKeydown((event) => {
      if (props.trapped && !focusLayer.paused) {
        emit("release-requested", event);
      }
    });
    const focusLayer = {
      paused: false,
      pause() {
        this.paused = true;
      },
      resume() {
        this.paused = false;
      }
    };
    const onKeydown = (e) => {
      if (!props.loop && !props.trapped)
        return;
      if (focusLayer.paused)
        return;
      const { code: code2, altKey, ctrlKey, metaKey, currentTarget, shiftKey } = e;
      const { loop } = props;
      const isTabbing = code2 === EVENT_CODE.tab && !altKey && !ctrlKey && !metaKey;
      const currentFocusingEl = document.activeElement;
      if (isTabbing && currentFocusingEl) {
        const container = currentTarget;
        const [first, last] = getEdges(container);
        const isTabbable = first && last;
        if (!isTabbable) {
          if (currentFocusingEl === container) {
            const focusoutPreventedEvent = createFocusOutPreventedEvent({
              focusReason: focusReason2.value
            });
            emit("focusout-prevented", focusoutPreventedEvent);
            if (!focusoutPreventedEvent.defaultPrevented) {
              e.preventDefault();
            }
          }
        } else {
          if (!shiftKey && currentFocusingEl === last) {
            const focusoutPreventedEvent = createFocusOutPreventedEvent({
              focusReason: focusReason2.value
            });
            emit("focusout-prevented", focusoutPreventedEvent);
            if (!focusoutPreventedEvent.defaultPrevented) {
              e.preventDefault();
              if (loop)
                tryFocus(first, true);
            }
          } else if (shiftKey && [first, container].includes(currentFocusingEl)) {
            const focusoutPreventedEvent = createFocusOutPreventedEvent({
              focusReason: focusReason2.value
            });
            emit("focusout-prevented", focusoutPreventedEvent);
            if (!focusoutPreventedEvent.defaultPrevented) {
              e.preventDefault();
              if (loop)
                tryFocus(last, true);
            }
          }
        }
      }
    };
    provide(FOCUS_TRAP_INJECTION_KEY, {
      focusTrapRef: forwardRef,
      onKeydown
    });
    watch(() => props.focusTrapEl, (focusTrapEl) => {
      if (focusTrapEl) {
        forwardRef.value = focusTrapEl;
      }
    }, { immediate: true });
    watch([forwardRef], ([forwardRef2], [oldForwardRef]) => {
      if (forwardRef2) {
        forwardRef2.addEventListener("keydown", onKeydown);
        forwardRef2.addEventListener("focusin", onFocusIn);
        forwardRef2.addEventListener("focusout", onFocusOut);
      }
      if (oldForwardRef) {
        oldForwardRef.removeEventListener("keydown", onKeydown);
        oldForwardRef.removeEventListener("focusin", onFocusIn);
        oldForwardRef.removeEventListener("focusout", onFocusOut);
      }
    });
    const trapOnFocus = (e) => {
      emit(ON_TRAP_FOCUS_EVT, e);
    };
    const releaseOnFocus = (e) => emit(ON_RELEASE_FOCUS_EVT, e);
    const onFocusIn = (e) => {
      const trapContainer = unref(forwardRef);
      if (!trapContainer)
        return;
      const target = e.target;
      const relatedTarget = e.relatedTarget;
      const isFocusedInTrap = target && trapContainer.contains(target);
      if (!props.trapped) {
        const isPrevFocusedInTrap = relatedTarget && trapContainer.contains(relatedTarget);
        if (!isPrevFocusedInTrap) {
          lastFocusBeforeTrapped = relatedTarget;
        }
      }
      if (isFocusedInTrap)
        emit("focusin", e);
      if (focusLayer.paused)
        return;
      if (props.trapped) {
        if (isFocusedInTrap) {
          lastFocusAfterTrapped = target;
        } else {
          tryFocus(lastFocusAfterTrapped, true);
        }
      }
    };
    const onFocusOut = (e) => {
      const trapContainer = unref(forwardRef);
      if (focusLayer.paused || !trapContainer)
        return;
      if (props.trapped) {
        const relatedTarget = e.relatedTarget;
        if (!isNil(relatedTarget) && !trapContainer.contains(relatedTarget)) {
          setTimeout(() => {
            if (!focusLayer.paused && props.trapped) {
              const focusoutPreventedEvent = createFocusOutPreventedEvent({
                focusReason: focusReason2.value
              });
              emit("focusout-prevented", focusoutPreventedEvent);
              if (!focusoutPreventedEvent.defaultPrevented) {
                tryFocus(lastFocusAfterTrapped, true);
              }
            }
          }, 0);
        }
      } else {
        const target = e.target;
        const isFocusedInTrap = target && trapContainer.contains(target);
        if (!isFocusedInTrap)
          emit("focusout", e);
      }
    };
    async function startTrap() {
      await nextTick();
      const trapContainer = unref(forwardRef);
      if (trapContainer) {
        focusableStack.push(focusLayer);
        const prevFocusedElement = trapContainer.contains(document.activeElement) ? lastFocusBeforeTrapped : document.activeElement;
        lastFocusBeforeTrapped = prevFocusedElement;
        const isPrevFocusContained = trapContainer.contains(prevFocusedElement);
        if (!isPrevFocusContained) {
          const focusEvent = new Event(FOCUS_AFTER_TRAPPED, FOCUS_AFTER_TRAPPED_OPTS);
          trapContainer.addEventListener(FOCUS_AFTER_TRAPPED, trapOnFocus);
          trapContainer.dispatchEvent(focusEvent);
          if (!focusEvent.defaultPrevented) {
            nextTick(() => {
              let focusStartEl = props.focusStartEl;
              if (!isString$1(focusStartEl)) {
                tryFocus(focusStartEl);
                if (document.activeElement !== focusStartEl) {
                  focusStartEl = "first";
                }
              }
              if (focusStartEl === "first") {
                focusFirstDescendant(obtainAllFocusableElements(trapContainer), true);
              }
              if (document.activeElement === prevFocusedElement || focusStartEl === "container") {
                tryFocus(trapContainer);
              }
            });
          }
        }
      }
    }
    function stopTrap() {
      const trapContainer = unref(forwardRef);
      if (trapContainer) {
        trapContainer.removeEventListener(FOCUS_AFTER_TRAPPED, trapOnFocus);
        const releasedEvent = new CustomEvent(FOCUS_AFTER_RELEASED, {
          ...FOCUS_AFTER_TRAPPED_OPTS,
          detail: {
            focusReason: focusReason2.value
          }
        });
        trapContainer.addEventListener(FOCUS_AFTER_RELEASED, releaseOnFocus);
        trapContainer.dispatchEvent(releasedEvent);
        if (!releasedEvent.defaultPrevented && (focusReason2.value == "keyboard" || !isFocusCausedByUserEvent() || trapContainer.contains(document.activeElement))) {
          tryFocus(lastFocusBeforeTrapped != null ? lastFocusBeforeTrapped : document.body);
        }
        trapContainer.removeEventListener(FOCUS_AFTER_RELEASED, releaseOnFocus);
        focusableStack.remove(focusLayer);
      }
    }
    onMounted(() => {
      if (props.trapped) {
        startTrap();
      }
      watch(() => props.trapped, (trapped) => {
        if (trapped) {
          startTrap();
        } else {
          stopTrap();
        }
      });
    });
    onBeforeUnmount(() => {
      if (props.trapped) {
        stopTrap();
      }
      if (forwardRef.value) {
        forwardRef.value.removeEventListener("keydown", onKeydown);
        forwardRef.value.removeEventListener("focusin", onFocusIn);
        forwardRef.value.removeEventListener("focusout", onFocusOut);
        forwardRef.value = void 0;
      }
    });
    return {
      onKeydown
    };
  }
});
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return renderSlot(_ctx.$slots, "default", { handleKeydown: _ctx.onKeydown });
}
var ElFocusTrap = _export_sfc2(_sfc_main$12, [["render", _sfc_render], ["__file", "focus-trap.vue"]]);
var teleportProps = buildProps({
  to: {
    type: definePropType([String, Object]),
    required: true
  },
  disabled: Boolean
});
var _sfc_main3 = defineComponent({
  __name: "teleport",
  props: teleportProps,
  setup(__props) {
    return (_ctx, _cache) => {
      return _ctx.disabled ? renderSlot(_ctx.$slots, "default", { key: 0 }) : (openBlock(), createBlock(Teleport, {
        key: 1,
        to: _ctx.to
      }, [
        renderSlot(_ctx.$slots, "default")
      ], 8, ["to"]));
    };
  }
});
var Teleport2 = _export_sfc2(_sfc_main3, [["__file", "teleport.vue"]]);
var ElTeleport = withInstall(Teleport2);

// node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/typescript-D6L75muK.js
var mutable = (val) => val;

// node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/index-B1Zzy14a.js
var English = {
  name: "en",
  el: {
    breadcrumb: {
      label: "Breadcrumb"
    },
    colorpicker: {
      confirm: "OK",
      clear: "Clear",
      defaultLabel: "color picker",
      description: "current color is {color}. press enter to select a new color.",
      alphaLabel: "pick alpha value"
    },
    datepicker: {
      now: "Now",
      today: "Today",
      cancel: "Cancel",
      clear: "Clear",
      confirm: "OK",
      dateTablePrompt: "Use the arrow keys and enter to select the day of the month",
      monthTablePrompt: "Use the arrow keys and enter to select the month",
      yearTablePrompt: "Use the arrow keys and enter to select the year",
      selectedDate: "Selected date",
      selectDate: "Select date",
      selectTime: "Select time",
      startDate: "Start Date",
      startTime: "Start Time",
      endDate: "End Date",
      endTime: "End Time",
      prevYear: "Previous Year",
      nextYear: "Next Year",
      prevMonth: "Previous Month",
      nextMonth: "Next Month",
      year: "",
      month1: "January",
      month2: "February",
      month3: "March",
      month4: "April",
      month5: "May",
      month6: "June",
      month7: "July",
      month8: "August",
      month9: "September",
      month10: "October",
      month11: "November",
      month12: "December",
      week: "week",
      weeks: {
        sun: "Sun",
        mon: "Mon",
        tue: "Tue",
        wed: "Wed",
        thu: "Thu",
        fri: "Fri",
        sat: "Sat"
      },
      weeksFull: {
        sun: "Sunday",
        mon: "Monday",
        tue: "Tuesday",
        wed: "Wednesday",
        thu: "Thursday",
        fri: "Friday",
        sat: "Saturday"
      },
      months: {
        jan: "Jan",
        feb: "Feb",
        mar: "Mar",
        apr: "Apr",
        may: "May",
        jun: "Jun",
        jul: "Jul",
        aug: "Aug",
        sep: "Sep",
        oct: "Oct",
        nov: "Nov",
        dec: "Dec"
      }
    },
    inputNumber: {
      decrease: "decrease number",
      increase: "increase number"
    },
    select: {
      loading: "Loading",
      noMatch: "No matching data",
      noData: "No data",
      placeholder: "Select"
    },
    mention: {
      loading: "Loading"
    },
    dropdown: {
      toggleDropdown: "Toggle Dropdown"
    },
    cascader: {
      noMatch: "No matching data",
      loading: "Loading",
      placeholder: "Select",
      noData: "No data"
    },
    pagination: {
      goto: "Go to",
      pagesize: "/page",
      total: "Total {total}",
      pageClassifier: "",
      page: "Page",
      prev: "Go to previous page",
      next: "Go to next page",
      currentPage: "page {pager}",
      prevPages: "Previous {pager} pages",
      nextPages: "Next {pager} pages",
      deprecationWarning: "Deprecated usages detected, please refer to the el-pagination documentation for more details"
    },
    dialog: {
      close: "Close this dialog"
    },
    drawer: {
      close: "Close this dialog"
    },
    messagebox: {
      title: "Message",
      confirm: "OK",
      cancel: "Cancel",
      error: "Illegal input",
      close: "Close this dialog"
    },
    upload: {
      deleteTip: "press delete to remove",
      delete: "Delete",
      preview: "Preview",
      continue: "Continue"
    },
    slider: {
      defaultLabel: "slider between {min} and {max}",
      defaultRangeStartLabel: "pick start value",
      defaultRangeEndLabel: "pick end value"
    },
    table: {
      emptyText: "No Data",
      confirmFilter: "Confirm",
      resetFilter: "Reset",
      clearFilter: "All",
      sumText: "Sum"
    },
    tour: {
      next: "Next",
      previous: "Previous",
      finish: "Finish"
    },
    tree: {
      emptyText: "No Data"
    },
    transfer: {
      noMatch: "No matching data",
      noData: "No data",
      titles: ["List 1", "List 2"],
      filterPlaceholder: "Enter keyword",
      noCheckedFormat: "{total} items",
      hasCheckedFormat: "{checked}/{total} checked"
    },
    image: {
      error: "FAILED"
    },
    pageHeader: {
      title: "Back"
    },
    popconfirm: {
      confirmButtonText: "Yes",
      cancelButtonText: "No"
    },
    carousel: {
      leftArrow: "Carousel arrow left",
      rightArrow: "Carousel arrow right",
      indicator: "Carousel switch to index {index}"
    }
  }
};
var buildTranslator = (locale) => (path, option) => translate(path, option, unref(locale));
var translate = (path, option, locale) => get(locale, path, path).replace(/\{(\w+)\}/g, (_, key) => {
  var _a2;
  return `${(_a2 = option == null ? void 0 : option[key]) != null ? _a2 : `{${key}}`}`;
});
var buildLocaleContext = (locale) => {
  const lang = computed(() => unref(locale).name);
  const localeRef = isRef(locale) ? locale : ref(locale);
  return {
    lang,
    locale: localeRef,
    t: buildTranslator(locale)
  };
};
var localeContextKey = Symbol("localeContextKey");
var useLocale = (localeOverrides) => {
  const locale = inject(localeContextKey, ref());
  return buildLocaleContext(computed(() => locale.value || English));
};

// node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/index-DX0Z3atr.js
var DEFAULT_EXCLUDE_KEYS = ["class", "style"];
var LISTENER_PREFIX = /^on[A-Z]/;
var useAttrs2 = (params = {}) => {
  const { excludeListeners = false, excludeKeys } = params;
  const allExcludeKeys = computed(() => {
    return ((excludeKeys == null ? void 0 : excludeKeys.value) || []).concat(DEFAULT_EXCLUDE_KEYS);
  });
  const instance = getCurrentInstance();
  if (!instance) {
    debugWarn("use-attrs", "getCurrentInstance() returned null. useAttrs() must be called at the top of a setup function");
    return computed(() => ({}));
  }
  return computed(() => {
    var _a2;
    return fromPairs(Object.entries((_a2 = instance.proxy) == null ? void 0 : _a2.$attrs).filter(([key]) => !allExcludeKeys.value.includes(key) && !(excludeListeners && LISTENER_PREFIX.test(key))));
  });
};

// node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/scroll-D2njqSuW.js
var isScroll = (el, isVertical) => {
  if (!isClient)
    return false;
  const key = {
    undefined: "overflow",
    true: "overflow-y",
    false: "overflow-x"
  }[String(isVertical)];
  const overflow = getStyle(el, key);
  return ["scroll", "auto", "overlay"].some((s) => overflow.includes(s));
};
var getScrollContainer = (el, isVertical) => {
  if (!isClient)
    return;
  let parent = el;
  while (parent) {
    if ([window, document, document.documentElement].includes(parent))
      return window;
    if (isScroll(parent, isVertical))
      return parent;
    parent = parent.parentNode;
  }
  return parent;
};
function scrollIntoView(container, selected) {
  if (!isClient)
    return;
  if (!selected) {
    container.scrollTop = 0;
    return;
  }
  const offsetParents = [];
  let pointer = selected.offsetParent;
  while (pointer !== null && container !== pointer && container.contains(pointer)) {
    offsetParents.push(pointer);
    pointer = pointer.offsetParent;
  }
  const top = selected.offsetTop + offsetParents.reduce((prev, curr) => prev + curr.offsetTop, 0);
  const bottom = top + selected.offsetHeight;
  const viewRectTop = container.scrollTop;
  const viewRectBottom = viewRectTop + container.clientHeight;
  if (top < viewRectTop) {
    container.scrollTop = top;
  } else if (bottom > viewRectBottom) {
    container.scrollTop = bottom - container.clientHeight;
  }
}

// node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/index-FA7Ddj3W.js
var now = function() {
  return root.Date.now();
};
var FUNC_ERROR_TEXT$1 = "Expected a function";
var nativeMax = Math.max;
var nativeMin = Math.min;
function debounce(func, wait, options) {
  var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
  if (typeof func != "function") {
    throw new TypeError(FUNC_ERROR_TEXT$1);
  }
  wait = toNumber(wait) || 0;
  if (isObject(options)) {
    leading = !!options.leading;
    maxing = "maxWait" in options;
    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
    trailing = "trailing" in options ? !!options.trailing : trailing;
  }
  function invokeFunc(time) {
    var args = lastArgs, thisArg = lastThis;
    lastArgs = lastThis = void 0;
    lastInvokeTime = time;
    result = func.apply(thisArg, args);
    return result;
  }
  function leadingEdge(time) {
    lastInvokeTime = time;
    timerId = setTimeout(timerExpired, wait);
    return leading ? invokeFunc(time) : result;
  }
  function remainingWait(time) {
    var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
    return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
  }
  function shouldInvoke(time) {
    var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
    return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
  }
  function timerExpired() {
    var time = now();
    if (shouldInvoke(time)) {
      return trailingEdge(time);
    }
    timerId = setTimeout(timerExpired, remainingWait(time));
  }
  function trailingEdge(time) {
    timerId = void 0;
    if (trailing && lastArgs) {
      return invokeFunc(time);
    }
    lastArgs = lastThis = void 0;
    return result;
  }
  function cancel() {
    if (timerId !== void 0) {
      clearTimeout(timerId);
    }
    lastInvokeTime = 0;
    lastArgs = lastCallTime = lastThis = timerId = void 0;
  }
  function flush() {
    return timerId === void 0 ? result : trailingEdge(now());
  }
  function debounced() {
    var time = now(), isInvoking = shouldInvoke(time);
    lastArgs = arguments;
    lastThis = this;
    lastCallTime = time;
    if (isInvoking) {
      if (timerId === void 0) {
        return leadingEdge(lastCallTime);
      }
      if (maxing) {
        clearTimeout(timerId);
        timerId = setTimeout(timerExpired, wait);
        return invokeFunc(lastCallTime);
      }
    }
    if (timerId === void 0) {
      timerId = setTimeout(timerExpired, wait);
    }
    return result;
  }
  debounced.cancel = cancel;
  debounced.flush = flush;
  return debounced;
}
var FUNC_ERROR_TEXT = "Expected a function";
function throttle(func, wait, options) {
  var leading = true, trailing = true;
  if (typeof func != "function") {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  if (isObject(options)) {
    leading = "leading" in options ? !!options.leading : leading;
    trailing = "trailing" in options ? !!options.trailing : trailing;
  }
  return debounce(func, wait, {
    "leading": leading,
    "maxWait": wait,
    "trailing": trailing
  });
}
var keysOf = (arr) => Object.keys(arr);
var entriesOf = (arr) => Object.entries(arr);
var isInContainer = (el, container) => {
  if (!isClient || !el || !container)
    return false;
  const elRect = el.getBoundingClientRect();
  let containerRect;
  if (container instanceof Element) {
    containerRect = container.getBoundingClientRect();
  } else {
    containerRect = {
      top: 0,
      right: window.innerWidth,
      bottom: window.innerHeight,
      left: 0
    };
  }
  return elRect.top < containerRect.bottom && elRect.bottom > containerRect.top && elRect.right > containerRect.left && elRect.left < containerRect.right;
};
var imageViewerProps = buildProps({
  urlList: {
    type: definePropType(Array),
    default: () => mutable([])
  },
  zIndex: {
    type: Number
  },
  initialIndex: {
    type: Number,
    default: 0
  },
  infinite: {
    type: Boolean,
    default: true
  },
  hideOnClickModal: Boolean,
  teleported: Boolean,
  closeOnPressEscape: {
    type: Boolean,
    default: true
  },
  zoomRate: {
    type: Number,
    default: 1.2
  },
  minScale: {
    type: Number,
    default: 0.2
  },
  maxScale: {
    type: Number,
    default: 7
  },
  showProgress: {
    type: Boolean,
    default: false
  },
  crossorigin: {
    type: definePropType(String)
  }
});
var imageViewerEmits = {
  close: () => true,
  switch: (index) => isNumber(index),
  rotate: (deg) => isNumber(deg)
};
var __default__$12 = defineComponent({
  name: "ElImageViewer"
});
var _sfc_main$13 = defineComponent({
  ...__default__$12,
  props: imageViewerProps,
  emits: imageViewerEmits,
  setup(__props, { expose, emit }) {
    var _a2;
    const props = __props;
    const modes = {
      CONTAIN: {
        name: "contain",
        icon: markRaw(full_screen_default)
      },
      ORIGINAL: {
        name: "original",
        icon: markRaw(scale_to_original_default)
      }
    };
    let stopWheelListener;
    let prevOverflow = "";
    const { t } = useLocale();
    const ns = useNamespace("image-viewer");
    const { nextZIndex } = useZIndex();
    const wrapper = ref();
    const imgRefs = ref([]);
    const scopeEventListener = effectScope();
    const loading4 = ref(true);
    const activeIndex = ref(props.initialIndex);
    const mode = shallowRef(modes.CONTAIN);
    const transform = ref({
      scale: 1,
      deg: 0,
      offsetX: 0,
      offsetY: 0,
      enableTransition: false
    });
    const zIndex2 = ref((_a2 = props.zIndex) != null ? _a2 : nextZIndex());
    const isSingle = computed(() => {
      const { urlList } = props;
      return urlList.length <= 1;
    });
    const isFirst = computed(() => activeIndex.value === 0);
    const isLast = computed(() => activeIndex.value === props.urlList.length - 1);
    const currentImg = computed(() => props.urlList[activeIndex.value]);
    const arrowPrevKls = computed(() => [
      ns.e("btn"),
      ns.e("prev"),
      ns.is("disabled", !props.infinite && isFirst.value)
    ]);
    const arrowNextKls = computed(() => [
      ns.e("btn"),
      ns.e("next"),
      ns.is("disabled", !props.infinite && isLast.value)
    ]);
    const imgStyle = computed(() => {
      const { scale, deg, offsetX, offsetY, enableTransition } = transform.value;
      let translateX = offsetX / scale;
      let translateY = offsetY / scale;
      const radian = deg * Math.PI / 180;
      const cosRadian = Math.cos(radian);
      const sinRadian = Math.sin(radian);
      translateX = translateX * cosRadian + translateY * sinRadian;
      translateY = translateY * cosRadian - offsetX / scale * sinRadian;
      const style = {
        transform: `scale(${scale}) rotate(${deg}deg) translate(${translateX}px, ${translateY}px)`,
        transition: enableTransition ? "transform .3s" : ""
      };
      if (mode.value.name === modes.CONTAIN.name) {
        style.maxWidth = style.maxHeight = "100%";
      }
      return style;
    });
    const progress = computed(() => `${activeIndex.value + 1} / ${props.urlList.length}`);
    function hide() {
      unregisterEventListener();
      stopWheelListener == null ? void 0 : stopWheelListener();
      document.body.style.overflow = prevOverflow;
      emit("close");
    }
    function registerEventListener() {
      const keydownHandler = throttle((e) => {
        switch (e.code) {
          case EVENT_CODE.esc:
            props.closeOnPressEscape && hide();
            break;
          case EVENT_CODE.space:
            toggleMode();
            break;
          case EVENT_CODE.left:
            prev();
            break;
          case EVENT_CODE.up:
            handleActions("zoomIn");
            break;
          case EVENT_CODE.right:
            next();
            break;
          case EVENT_CODE.down:
            handleActions("zoomOut");
            break;
        }
      });
      const mousewheelHandler = throttle((e) => {
        const delta = e.deltaY || e.deltaX;
        handleActions(delta < 0 ? "zoomIn" : "zoomOut", {
          zoomRate: props.zoomRate,
          enableTransition: false
        });
      });
      scopeEventListener.run(() => {
        useEventListener(document, "keydown", keydownHandler);
        useEventListener(document, "wheel", mousewheelHandler);
      });
    }
    function unregisterEventListener() {
      scopeEventListener.stop();
    }
    function handleImgLoad() {
      loading4.value = false;
    }
    function handleImgError(e) {
      loading4.value = false;
      e.target.alt = t("el.image.error");
    }
    function handleMouseDown(e) {
      if (loading4.value || e.button !== 0 || !wrapper.value)
        return;
      transform.value.enableTransition = false;
      const { offsetX, offsetY } = transform.value;
      const startX = e.pageX;
      const startY = e.pageY;
      const dragHandler = throttle((ev) => {
        transform.value = {
          ...transform.value,
          offsetX: offsetX + ev.pageX - startX,
          offsetY: offsetY + ev.pageY - startY
        };
      });
      const removeMousemove = useEventListener(document, "mousemove", dragHandler);
      useEventListener(document, "mouseup", () => {
        removeMousemove();
      });
      e.preventDefault();
    }
    function reset() {
      transform.value = {
        scale: 1,
        deg: 0,
        offsetX: 0,
        offsetY: 0,
        enableTransition: false
      };
    }
    function toggleMode() {
      if (loading4.value)
        return;
      const modeNames = keysOf(modes);
      const modeValues = Object.values(modes);
      const currentMode = mode.value.name;
      const index = modeValues.findIndex((i) => i.name === currentMode);
      const nextIndex = (index + 1) % modeNames.length;
      mode.value = modes[modeNames[nextIndex]];
      reset();
    }
    function setActiveItem(index) {
      const len = props.urlList.length;
      activeIndex.value = (index + len) % len;
    }
    function prev() {
      if (isFirst.value && !props.infinite)
        return;
      setActiveItem(activeIndex.value - 1);
    }
    function next() {
      if (isLast.value && !props.infinite)
        return;
      setActiveItem(activeIndex.value + 1);
    }
    function handleActions(action, options = {}) {
      if (loading4.value)
        return;
      const { minScale, maxScale } = props;
      const { zoomRate, rotateDeg, enableTransition } = {
        zoomRate: props.zoomRate,
        rotateDeg: 90,
        enableTransition: true,
        ...options
      };
      switch (action) {
        case "zoomOut":
          if (transform.value.scale > minScale) {
            transform.value.scale = Number.parseFloat((transform.value.scale / zoomRate).toFixed(3));
          }
          break;
        case "zoomIn":
          if (transform.value.scale < maxScale) {
            transform.value.scale = Number.parseFloat((transform.value.scale * zoomRate).toFixed(3));
          }
          break;
        case "clockwise":
          transform.value.deg += rotateDeg;
          emit("rotate", transform.value.deg);
          break;
        case "anticlockwise":
          transform.value.deg -= rotateDeg;
          emit("rotate", transform.value.deg);
          break;
      }
      transform.value.enableTransition = enableTransition;
    }
    function onFocusoutPrevented(event) {
      var _a22;
      if (((_a22 = event.detail) == null ? void 0 : _a22.focusReason) === "pointer") {
        event.preventDefault();
      }
    }
    function onCloseRequested() {
      if (props.closeOnPressEscape) {
        hide();
      }
    }
    function wheelHandler(e) {
      if (!e.ctrlKey)
        return;
      if (e.deltaY < 0) {
        e.preventDefault();
        return false;
      } else if (e.deltaY > 0) {
        e.preventDefault();
        return false;
      }
    }
    watch(currentImg, () => {
      nextTick(() => {
        const $img = imgRefs.value[0];
        if (!($img == null ? void 0 : $img.complete)) {
          loading4.value = true;
        }
      });
    });
    watch(activeIndex, (val) => {
      reset();
      emit("switch", val);
    });
    onMounted(() => {
      registerEventListener();
      stopWheelListener = useEventListener("wheel", wheelHandler, {
        passive: false
      });
      prevOverflow = document.body.style.overflow;
      document.body.style.overflow = "hidden";
    });
    expose({
      setActiveItem
    });
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(ElTeleport), {
        to: "body",
        disabled: !_ctx.teleported
      }, {
        default: withCtx(() => [
          createVNode(Transition, {
            name: "viewer-fade",
            appear: ""
          }, {
            default: withCtx(() => [
              createBaseVNode("div", {
                ref_key: "wrapper",
                ref: wrapper,
                tabindex: -1,
                class: normalizeClass(unref(ns).e("wrapper")),
                style: normalizeStyle({ zIndex: zIndex2.value })
              }, [
                createVNode(unref(ElFocusTrap), {
                  loop: "",
                  trapped: "",
                  "focus-trap-el": wrapper.value,
                  "focus-start-el": "container",
                  onFocusoutPrevented,
                  onReleaseRequested: onCloseRequested
                }, {
                  default: withCtx(() => [
                    createBaseVNode("div", {
                      class: normalizeClass(unref(ns).e("mask")),
                      onClick: withModifiers(($event) => _ctx.hideOnClickModal && hide(), ["self"])
                    }, null, 10, ["onClick"]),
                    createCommentVNode(" CLOSE "),
                    createBaseVNode("span", {
                      class: normalizeClass([unref(ns).e("btn"), unref(ns).e("close")]),
                      onClick: hide
                    }, [
                      createVNode(unref(ElIcon), null, {
                        default: withCtx(() => [
                          createVNode(unref(close_default))
                        ]),
                        _: 1
                      })
                    ], 2),
                    createCommentVNode(" ARROW "),
                    !unref(isSingle) ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
                      createBaseVNode("span", {
                        class: normalizeClass(unref(arrowPrevKls)),
                        onClick: prev
                      }, [
                        createVNode(unref(ElIcon), null, {
                          default: withCtx(() => [
                            createVNode(unref(arrow_left_default))
                          ]),
                          _: 1
                        })
                      ], 2),
                      createBaseVNode("span", {
                        class: normalizeClass(unref(arrowNextKls)),
                        onClick: next
                      }, [
                        createVNode(unref(ElIcon), null, {
                          default: withCtx(() => [
                            createVNode(unref(arrow_right_default))
                          ]),
                          _: 1
                        })
                      ], 2)
                    ], 64)) : createCommentVNode("v-if", true),
                    _ctx.$slots.progress || _ctx.showProgress ? (openBlock(), createElementBlock("div", {
                      key: 1,
                      class: normalizeClass([unref(ns).e("btn"), unref(ns).e("progress")])
                    }, [
                      renderSlot(_ctx.$slots, "progress", {
                        activeIndex: activeIndex.value,
                        total: _ctx.urlList.length
                      }, () => [
                        createTextVNode(toDisplayString(unref(progress)), 1)
                      ])
                    ], 2)) : createCommentVNode("v-if", true),
                    createCommentVNode(" ACTIONS "),
                    createBaseVNode("div", {
                      class: normalizeClass([unref(ns).e("btn"), unref(ns).e("actions")])
                    }, [
                      createBaseVNode("div", {
                        class: normalizeClass(unref(ns).e("actions__inner"))
                      }, [
                        renderSlot(_ctx.$slots, "toolbar", {
                          actions: handleActions,
                          prev,
                          next,
                          reset: toggleMode,
                          activeIndex: activeIndex.value,
                          setActiveItem
                        }, () => [
                          createVNode(unref(ElIcon), {
                            onClick: ($event) => handleActions("zoomOut")
                          }, {
                            default: withCtx(() => [
                              createVNode(unref(zoom_out_default))
                            ]),
                            _: 1
                          }, 8, ["onClick"]),
                          createVNode(unref(ElIcon), {
                            onClick: ($event) => handleActions("zoomIn")
                          }, {
                            default: withCtx(() => [
                              createVNode(unref(zoom_in_default))
                            ]),
                            _: 1
                          }, 8, ["onClick"]),
                          createBaseVNode("i", {
                            class: normalizeClass(unref(ns).e("actions__divider"))
                          }, null, 2),
                          createVNode(unref(ElIcon), { onClick: toggleMode }, {
                            default: withCtx(() => [
                              (openBlock(), createBlock(resolveDynamicComponent(unref(mode).icon)))
                            ]),
                            _: 1
                          }),
                          createBaseVNode("i", {
                            class: normalizeClass(unref(ns).e("actions__divider"))
                          }, null, 2),
                          createVNode(unref(ElIcon), {
                            onClick: ($event) => handleActions("anticlockwise")
                          }, {
                            default: withCtx(() => [
                              createVNode(unref(refresh_left_default))
                            ]),
                            _: 1
                          }, 8, ["onClick"]),
                          createVNode(unref(ElIcon), {
                            onClick: ($event) => handleActions("clockwise")
                          }, {
                            default: withCtx(() => [
                              createVNode(unref(refresh_right_default))
                            ]),
                            _: 1
                          }, 8, ["onClick"])
                        ])
                      ], 2)
                    ], 2),
                    createCommentVNode(" CANVAS "),
                    createBaseVNode("div", {
                      class: normalizeClass(unref(ns).e("canvas"))
                    }, [
                      (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.urlList, (url, i) => {
                        return withDirectives((openBlock(), createElementBlock("img", {
                          ref_for: true,
                          ref: (el) => imgRefs.value[i] = el,
                          key: url,
                          src: url,
                          style: normalizeStyle(unref(imgStyle)),
                          class: normalizeClass(unref(ns).e("img")),
                          crossorigin: _ctx.crossorigin,
                          onLoad: handleImgLoad,
                          onError: handleImgError,
                          onMousedown: handleMouseDown
                        }, null, 46, ["src", "crossorigin"])), [
                          [vShow, i === activeIndex.value]
                        ]);
                      }), 128))
                    ], 2),
                    renderSlot(_ctx.$slots, "default")
                  ]),
                  _: 3
                }, 8, ["focus-trap-el"])
              ], 6)
            ]),
            _: 3
          })
        ]),
        _: 3
      }, 8, ["disabled"]);
    };
  }
});
var ImageViewer = _export_sfc2(_sfc_main$13, [["__file", "image-viewer.vue"]]);
var ElImageViewer = withInstall(ImageViewer);
var imageProps = buildProps({
  hideOnClickModal: Boolean,
  src: {
    type: String,
    default: ""
  },
  fit: {
    type: String,
    values: ["", "contain", "cover", "fill", "none", "scale-down"],
    default: ""
  },
  loading: {
    type: String,
    values: ["eager", "lazy"]
  },
  lazy: Boolean,
  scrollContainer: {
    type: definePropType([String, Object])
  },
  previewSrcList: {
    type: definePropType(Array),
    default: () => mutable([])
  },
  previewTeleported: Boolean,
  zIndex: {
    type: Number
  },
  initialIndex: {
    type: Number,
    default: 0
  },
  infinite: {
    type: Boolean,
    default: true
  },
  closeOnPressEscape: {
    type: Boolean,
    default: true
  },
  zoomRate: {
    type: Number,
    default: 1.2
  },
  minScale: {
    type: Number,
    default: 0.2
  },
  maxScale: {
    type: Number,
    default: 7
  },
  showProgress: {
    type: Boolean,
    default: false
  },
  crossorigin: {
    type: definePropType(String)
  }
});
var imageEmits = {
  load: (evt) => evt instanceof Event,
  error: (evt) => evt instanceof Event,
  switch: (val) => isNumber(val),
  close: () => true,
  show: () => true
};
var __default__3 = defineComponent({
  name: "ElImage",
  inheritAttrs: false
});
var _sfc_main4 = defineComponent({
  ...__default__3,
  props: imageProps,
  emits: imageEmits,
  setup(__props, { expose, emit }) {
    const props = __props;
    const { t } = useLocale();
    const ns = useNamespace("image");
    const rawAttrs = useAttrs();
    const containerAttrs = computed(() => {
      return fromPairs(Object.entries(rawAttrs).filter(([key]) => /^(data-|on[A-Z])/i.test(key) || ["id", "style"].includes(key)));
    });
    const imgAttrs = useAttrs2({
      excludeListeners: true,
      excludeKeys: computed(() => {
        return Object.keys(containerAttrs.value);
      })
    });
    const imageSrc = ref();
    const hasLoadError = ref(false);
    const isLoading = ref(true);
    const showViewer = ref(false);
    const container = ref();
    const _scrollContainer = ref();
    const supportLoading = isClient && "loading" in HTMLImageElement.prototype;
    let stopScrollListener;
    const imageKls = computed(() => [
      ns.e("inner"),
      preview.value && ns.e("preview"),
      isLoading.value && ns.is("loading")
    ]);
    const imageStyle = computed(() => {
      const { fit } = props;
      if (isClient && fit) {
        return { objectFit: fit };
      }
      return {};
    });
    const preview = computed(() => {
      const { previewSrcList } = props;
      return isArray2(previewSrcList) && previewSrcList.length > 0;
    });
    const imageIndex = computed(() => {
      const { previewSrcList, initialIndex } = props;
      let previewIndex = initialIndex;
      if (initialIndex > previewSrcList.length - 1) {
        previewIndex = 0;
      }
      return previewIndex;
    });
    const isManual = computed(() => {
      if (props.loading === "eager")
        return false;
      return !supportLoading && props.loading === "lazy" || props.lazy;
    });
    const loadImage = () => {
      if (!isClient)
        return;
      isLoading.value = true;
      hasLoadError.value = false;
      imageSrc.value = props.src;
    };
    function handleLoad(event) {
      isLoading.value = false;
      hasLoadError.value = false;
      emit("load", event);
    }
    function handleError(event) {
      isLoading.value = false;
      hasLoadError.value = true;
      emit("error", event);
    }
    function handleLazyLoad() {
      if (isInContainer(container.value, _scrollContainer.value)) {
        loadImage();
        removeLazyLoadListener();
      }
    }
    const lazyLoadHandler = useThrottleFn(handleLazyLoad, 200, true);
    async function addLazyLoadListener() {
      var _a2;
      if (!isClient)
        return;
      await nextTick();
      const { scrollContainer } = props;
      if (isElement(scrollContainer)) {
        _scrollContainer.value = scrollContainer;
      } else if (isString$1(scrollContainer) && scrollContainer !== "") {
        _scrollContainer.value = (_a2 = document.querySelector(scrollContainer)) != null ? _a2 : void 0;
      } else if (container.value) {
        _scrollContainer.value = getScrollContainer(container.value);
      }
      if (_scrollContainer.value) {
        stopScrollListener = useEventListener(_scrollContainer, "scroll", lazyLoadHandler);
        setTimeout(() => handleLazyLoad(), 100);
      }
    }
    function removeLazyLoadListener() {
      if (!isClient || !_scrollContainer.value || !lazyLoadHandler)
        return;
      stopScrollListener == null ? void 0 : stopScrollListener();
      _scrollContainer.value = void 0;
    }
    function clickHandler() {
      if (!preview.value)
        return;
      showViewer.value = true;
      emit("show");
    }
    function closeViewer() {
      showViewer.value = false;
      emit("close");
    }
    function switchViewer(val) {
      emit("switch", val);
    }
    watch(() => props.src, () => {
      if (isManual.value) {
        isLoading.value = true;
        hasLoadError.value = false;
        removeLazyLoadListener();
        addLazyLoadListener();
      } else {
        loadImage();
      }
    });
    onMounted(() => {
      if (isManual.value) {
        addLazyLoadListener();
      } else {
        loadImage();
      }
    });
    expose({
      showPreview: clickHandler
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", mergeProps({
        ref_key: "container",
        ref: container
      }, unref(containerAttrs), {
        class: [unref(ns).b(), _ctx.$attrs.class]
      }), [
        hasLoadError.value ? renderSlot(_ctx.$slots, "error", { key: 0 }, () => [
          createBaseVNode("div", {
            class: normalizeClass(unref(ns).e("error"))
          }, toDisplayString(unref(t)("el.image.error")), 3)
        ]) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
          imageSrc.value !== void 0 ? (openBlock(), createElementBlock("img", mergeProps({ key: 0 }, unref(imgAttrs), {
            src: imageSrc.value,
            loading: _ctx.loading,
            style: unref(imageStyle),
            class: unref(imageKls),
            crossorigin: _ctx.crossorigin,
            onClick: clickHandler,
            onLoad: handleLoad,
            onError: handleError
          }), null, 16, ["src", "loading", "crossorigin"])) : createCommentVNode("v-if", true),
          isLoading.value ? (openBlock(), createElementBlock("div", {
            key: 1,
            class: normalizeClass(unref(ns).e("wrapper"))
          }, [
            renderSlot(_ctx.$slots, "placeholder", {}, () => [
              createBaseVNode("div", {
                class: normalizeClass(unref(ns).e("placeholder"))
              }, null, 2)
            ])
          ], 2)) : createCommentVNode("v-if", true)
        ], 64)),
        unref(preview) ? (openBlock(), createElementBlock(Fragment, { key: 2 }, [
          showViewer.value ? (openBlock(), createBlock(unref(ElImageViewer), {
            key: 0,
            "z-index": _ctx.zIndex,
            "initial-index": unref(imageIndex),
            infinite: _ctx.infinite,
            "zoom-rate": _ctx.zoomRate,
            "min-scale": _ctx.minScale,
            "max-scale": _ctx.maxScale,
            "show-progress": _ctx.showProgress,
            "url-list": _ctx.previewSrcList,
            crossorigin: _ctx.crossorigin,
            "hide-on-click-modal": _ctx.hideOnClickModal,
            teleported: _ctx.previewTeleported,
            "close-on-press-escape": _ctx.closeOnPressEscape,
            onClose: closeViewer,
            onSwitch: switchViewer
          }, {
            progress: withCtx((progress) => [
              renderSlot(_ctx.$slots, "progress", normalizeProps(guardReactiveProps(progress)))
            ]),
            toolbar: withCtx((toolbar) => [
              renderSlot(_ctx.$slots, "toolbar", normalizeProps(guardReactiveProps(toolbar)))
            ]),
            default: withCtx(() => [
              _ctx.$slots.viewer ? (openBlock(), createElementBlock("div", { key: 0 }, [
                renderSlot(_ctx.$slots, "viewer")
              ])) : createCommentVNode("v-if", true)
            ]),
            _: 3
          }, 8, ["z-index", "initial-index", "infinite", "zoom-rate", "min-scale", "max-scale", "show-progress", "url-list", "crossorigin", "hide-on-click-modal", "teleported", "close-on-press-escape"])) : createCommentVNode("v-if", true)
        ], 64)) : createCommentVNode("v-if", true)
      ], 16);
    };
  }
});
var Image2 = _export_sfc2(_sfc_main4, [["__file", "image.vue"]]);
var ElImage = withInstall(Image2);

// node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/index-BvufZeL0.js
var progressProps = buildProps({
  type: {
    type: String,
    default: "line",
    values: ["line", "circle", "dashboard"]
  },
  percentage: {
    type: Number,
    default: 0,
    validator: (val) => val >= 0 && val <= 100
  },
  status: {
    type: String,
    default: "",
    values: ["", "success", "exception", "warning"]
  },
  indeterminate: Boolean,
  duration: {
    type: Number,
    default: 3
  },
  strokeWidth: {
    type: Number,
    default: 6
  },
  strokeLinecap: {
    type: definePropType(String),
    default: "round"
  },
  textInside: Boolean,
  width: {
    type: Number,
    default: 126
  },
  showText: {
    type: Boolean,
    default: true
  },
  color: {
    type: definePropType([
      String,
      Array,
      Function
    ]),
    default: ""
  },
  striped: Boolean,
  stripedFlow: Boolean,
  format: {
    type: definePropType(Function),
    default: (percentage) => `${percentage}%`
  }
});
var __default__4 = defineComponent({
  name: "ElProgress"
});
var _sfc_main$h = defineComponent({
  ...__default__4,
  props: progressProps,
  setup(__props) {
    const props = __props;
    const STATUS_COLOR_MAP = {
      success: "#13ce66",
      exception: "#ff4949",
      warning: "#e6a23c",
      default: "#20a0ff"
    };
    const ns = useNamespace("progress");
    const barStyle = computed(() => {
      const barStyle2 = {
        width: `${props.percentage}%`,
        animationDuration: `${props.duration}s`
      };
      const color = getCurrentColor(props.percentage);
      if (color.includes("gradient")) {
        barStyle2.background = color;
      } else {
        barStyle2.backgroundColor = color;
      }
      return barStyle2;
    });
    const relativeStrokeWidth = computed(() => (props.strokeWidth / props.width * 100).toFixed(1));
    const radius = computed(() => {
      if (["circle", "dashboard"].includes(props.type)) {
        return Number.parseInt(`${50 - Number.parseFloat(relativeStrokeWidth.value) / 2}`, 10);
      }
      return 0;
    });
    const trackPath = computed(() => {
      const r = radius.value;
      const isDashboard = props.type === "dashboard";
      return `
          M 50 50
          m 0 ${isDashboard ? "" : "-"}${r}
          a ${r} ${r} 0 1 1 0 ${isDashboard ? "-" : ""}${r * 2}
          a ${r} ${r} 0 1 1 0 ${isDashboard ? "" : "-"}${r * 2}
          `;
    });
    const perimeter = computed(() => 2 * Math.PI * radius.value);
    const rate = computed(() => props.type === "dashboard" ? 0.75 : 1);
    const strokeDashoffset = computed(() => {
      const offset = -1 * perimeter.value * (1 - rate.value) / 2;
      return `${offset}px`;
    });
    const trailPathStyle = computed(() => ({
      strokeDasharray: `${perimeter.value * rate.value}px, ${perimeter.value}px`,
      strokeDashoffset: strokeDashoffset.value
    }));
    const circlePathStyle = computed(() => ({
      strokeDasharray: `${perimeter.value * rate.value * (props.percentage / 100)}px, ${perimeter.value}px`,
      strokeDashoffset: strokeDashoffset.value,
      transition: "stroke-dasharray 0.6s ease 0s, stroke 0.6s ease, opacity ease 0.6s"
    }));
    const stroke = computed(() => {
      let ret;
      if (props.color) {
        ret = getCurrentColor(props.percentage);
      } else {
        ret = STATUS_COLOR_MAP[props.status] || STATUS_COLOR_MAP.default;
      }
      return ret;
    });
    const statusIcon = computed(() => {
      if (props.status === "warning") {
        return warning_filled_default;
      }
      if (props.type === "line") {
        return props.status === "success" ? circle_check_default : circle_close_default;
      } else {
        return props.status === "success" ? check_default : close_default;
      }
    });
    const progressTextSize = computed(() => {
      return props.type === "line" ? 12 + props.strokeWidth * 0.4 : props.width * 0.111111 + 2;
    });
    const content = computed(() => props.format(props.percentage));
    function getColors(color) {
      const span = 100 / color.length;
      const seriesColors = color.map((seriesColor, index) => {
        if (isString$1(seriesColor)) {
          return {
            color: seriesColor,
            percentage: (index + 1) * span
          };
        }
        return seriesColor;
      });
      return seriesColors.sort((a, b) => a.percentage - b.percentage);
    }
    const getCurrentColor = (percentage) => {
      var _a2;
      const { color } = props;
      if (isFunction$1(color)) {
        return color(percentage);
      } else if (isString$1(color)) {
        return color;
      } else {
        const colors = getColors(color);
        for (const color2 of colors) {
          if (color2.percentage > percentage)
            return color2.color;
        }
        return (_a2 = colors[colors.length - 1]) == null ? void 0 : _a2.color;
      }
    };
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass([
          unref(ns).b(),
          unref(ns).m(_ctx.type),
          unref(ns).is(_ctx.status),
          {
            [unref(ns).m("without-text")]: !_ctx.showText,
            [unref(ns).m("text-inside")]: _ctx.textInside
          }
        ]),
        role: "progressbar",
        "aria-valuenow": _ctx.percentage,
        "aria-valuemin": "0",
        "aria-valuemax": "100"
      }, [
        _ctx.type === "line" ? (openBlock(), createElementBlock("div", {
          key: 0,
          class: normalizeClass(unref(ns).b("bar"))
        }, [
          createBaseVNode("div", {
            class: normalizeClass(unref(ns).be("bar", "outer")),
            style: normalizeStyle({ height: `${_ctx.strokeWidth}px` })
          }, [
            createBaseVNode("div", {
              class: normalizeClass([
                unref(ns).be("bar", "inner"),
                { [unref(ns).bem("bar", "inner", "indeterminate")]: _ctx.indeterminate },
                { [unref(ns).bem("bar", "inner", "striped")]: _ctx.striped },
                { [unref(ns).bem("bar", "inner", "striped-flow")]: _ctx.stripedFlow }
              ]),
              style: normalizeStyle(unref(barStyle))
            }, [
              (_ctx.showText || _ctx.$slots.default) && _ctx.textInside ? (openBlock(), createElementBlock("div", {
                key: 0,
                class: normalizeClass(unref(ns).be("bar", "innerText"))
              }, [
                renderSlot(_ctx.$slots, "default", { percentage: _ctx.percentage }, () => [
                  createBaseVNode("span", null, toDisplayString(unref(content)), 1)
                ])
              ], 2)) : createCommentVNode("v-if", true)
            ], 6)
          ], 6)
        ], 2)) : (openBlock(), createElementBlock("div", {
          key: 1,
          class: normalizeClass(unref(ns).b("circle")),
          style: normalizeStyle({ height: `${_ctx.width}px`, width: `${_ctx.width}px` })
        }, [
          (openBlock(), createElementBlock("svg", { viewBox: "0 0 100 100" }, [
            createBaseVNode("path", {
              class: normalizeClass(unref(ns).be("circle", "track")),
              d: unref(trackPath),
              stroke: `var(${unref(ns).cssVarName("fill-color-light")}, #e5e9f2)`,
              "stroke-linecap": _ctx.strokeLinecap,
              "stroke-width": unref(relativeStrokeWidth),
              fill: "none",
              style: normalizeStyle(unref(trailPathStyle))
            }, null, 14, ["d", "stroke", "stroke-linecap", "stroke-width"]),
            createBaseVNode("path", {
              class: normalizeClass(unref(ns).be("circle", "path")),
              d: unref(trackPath),
              stroke: unref(stroke),
              fill: "none",
              opacity: _ctx.percentage ? 1 : 0,
              "stroke-linecap": _ctx.strokeLinecap,
              "stroke-width": unref(relativeStrokeWidth),
              style: normalizeStyle(unref(circlePathStyle))
            }, null, 14, ["d", "stroke", "opacity", "stroke-linecap", "stroke-width"])
          ]))
        ], 6)),
        (_ctx.showText || _ctx.$slots.default) && !_ctx.textInside ? (openBlock(), createElementBlock("div", {
          key: 2,
          class: normalizeClass(unref(ns).e("text")),
          style: normalizeStyle({ fontSize: `${unref(progressTextSize)}px` })
        }, [
          renderSlot(_ctx.$slots, "default", { percentage: _ctx.percentage }, () => [
            !_ctx.status ? (openBlock(), createElementBlock("span", { key: 0 }, toDisplayString(unref(content)), 1)) : (openBlock(), createBlock(unref(ElIcon), { key: 1 }, {
              default: withCtx(() => [
                (openBlock(), createBlock(resolveDynamicComponent(unref(statusIcon))))
              ]),
              _: 1
            }))
          ])
        ], 6)) : createCommentVNode("v-if", true)
      ], 10, ["aria-valuenow"]);
    };
  }
});
var Progress = _export_sfc2(_sfc_main$h, [["__file", "progress.vue"]]);
var ElProgress = withInstall(Progress);
function getFileType(fileExtension) {
  const cleanExtension = fileExtension.replace(".", "").toLowerCase();
  if (!cleanExtension) {
    return { lowerCase: "unknown", upperCase: "Unknown" };
  }
  const imageExtensions = ["png", "jpg", "jpeg", "gif", "bmp", "svg", "webp"];
  const wordExtensions = ["doc", "docx"];
  const excelExtensions = ["xls", "xlsx"];
  const pptExtensions = ["ppt", "pptx"];
  const audioExtensions = ["mp3", "wav", "ogg", "flac"];
  const videoExtensions = ["mp4", "avi", "mov", "mkv"];
  const codeExtensions = ["js", "ts", "html", "css", "py", "java", "c", "cpp", "json", "php"];
  const databaseExtensions = ["sql", "db", "sqlite"];
  const zipExtensions = ["zip", "rar", "7z"];
  const markExtensions = ["md", "mdx"];
  if (imageExtensions.includes(cleanExtension)) {
    return { lowerCase: "image", upperCase: "Image" };
  }
  if (wordExtensions.includes(cleanExtension)) {
    return { lowerCase: "word", upperCase: "Word" };
  }
  if (excelExtensions.includes(cleanExtension)) {
    return { lowerCase: "excel", upperCase: "Excel" };
  }
  if (pptExtensions.includes(cleanExtension)) {
    return { lowerCase: "ppt", upperCase: "Ppt" };
  }
  if (cleanExtension === "pdf") {
    return { lowerCase: "pdf", upperCase: "Pdf" };
  }
  if (cleanExtension === "txt") {
    return { lowerCase: "txt", upperCase: "Txt" };
  }
  if (markExtensions.includes(cleanExtension)) {
    return { lowerCase: "mark", upperCase: "Markdown" };
  }
  if (audioExtensions.includes(cleanExtension)) {
    return { lowerCase: "audio", upperCase: "Audio" };
  }
  if (videoExtensions.includes(cleanExtension)) {
    return { lowerCase: "video", upperCase: "Video" };
  }
  if (codeExtensions.includes(cleanExtension)) {
    return { lowerCase: "code", upperCase: "Code" };
  }
  if (databaseExtensions.includes(cleanExtension)) {
    return { lowerCase: "database", upperCase: "Database" };
  }
  if (cleanExtension === "lnk") {
    return { lowerCase: "link", upperCase: "Link" };
  }
  if (zipExtensions.includes(cleanExtension)) {
    return { lowerCase: "zip", upperCase: "Zip" };
  }
  if (cleanExtension === "obj" || cleanExtension === "fbx" || cleanExtension === "glb") {
    return { lowerCase: "three", upperCase: "3D" };
  }
  return { lowerCase: "file", upperCase: "File" };
}
function getSize(size) {
  let retSize = size;
  const units = ["B", "KB", "MB", "GB", "TB", "PB", "EB"];
  let unitIndex = 0;
  while (retSize >= 1024 && unitIndex < units.length - 1) {
    retSize /= 1024;
    unitIndex++;
  }
  return `${retSize.toFixed(0)} ${units[unitIndex]}`;
}
var isImageFileType = (type) => type.indexOf("image/") === 0;
var MEASURE_SIZE = 200;
function previewImage(file2) {
  return new Promise((resolve) => {
    if (!file2 || !file2.type || !isImageFileType(file2.type)) {
      resolve("");
      return;
    }
    const img = new Image();
    img.onload = () => {
      const { width, height } = img;
      const ratio = width / height;
      const MEASURE_SIZE_WIDTH = ratio > 1 ? MEASURE_SIZE : MEASURE_SIZE * ratio;
      const MEASURE_SIZE_HEIGHT = ratio > 1 ? MEASURE_SIZE / ratio : MEASURE_SIZE;
      const canvas = document.createElement("canvas");
      canvas.width = MEASURE_SIZE_WIDTH;
      canvas.height = MEASURE_SIZE_HEIGHT;
      canvas.style.cssText = `position: fixed; left: 0; top: 0; width: ${MEASURE_SIZE_WIDTH}px; height: ${MEASURE_SIZE_HEIGHT}px; z-index: 9999; display: none;`;
      document.body.appendChild(canvas);
      const ctx = canvas.getContext("2d");
      ctx.drawImage(img, 0, 0, MEASURE_SIZE_WIDTH, MEASURE_SIZE_HEIGHT);
      const dataURL = canvas.toDataURL();
      document.body.removeChild(canvas);
      window.URL.revokeObjectURL(img.src);
      resolve(dataURL);
    };
    img.crossOrigin = "anonymous";
    if (file2.type.startsWith("image/svg+xml")) {
      const reader = new FileReader();
      reader.onload = () => {
        if (reader.result && typeof reader.result === "string") {
          img.src = reader.result;
        }
      };
      reader.readAsDataURL(file2);
    } else if (file2.type.startsWith("image/gif")) {
      const reader = new FileReader();
      reader.onload = () => {
        if (reader.result) {
          resolve(reader.result);
        }
      };
      reader.readAsDataURL(file2);
    } else {
      img.src = window.URL.createObjectURL(file2);
    }
  });
}
function useFileNameParser(name) {
  const namePrefix = computed(() => {
    const nameStr = name.value || "";
    const lastDotIndex = nameStr.lastIndexOf(".");
    return lastDotIndex === -1 ? nameStr : nameStr.slice(0, lastDotIndex);
  });
  const nameSuffix = computed(() => {
    const nameStr = name.value || "";
    const lastDotIndex = nameStr.lastIndexOf(".");
    if (lastDotIndex === -1 || nameStr.length - lastDotIndex > 7) {
      return ".file";
    }
    return lastDotIndex === -1 ? "" : nameStr.slice(lastDotIndex);
  });
  return {
    namePrefix,
    nameSuffix
  };
}
var _sfc_main$g = {};
var _hoisted_1$g = {
  xmlns: "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink",
  fill: "none",
  version: "1.1",
  width: "1em",
  height: "1em",
  viewBox: "0 0 150 175"
};
function _sfc_render$f(_ctx, _cache) {
  return openBlock(), createElementBlock("svg", _hoisted_1$g, _cache[0] || (_cache[0] = [
    createBaseVNode("g", null, [
      createBaseVNode("g", null, [
        createBaseVNode("path", {
          d: "M103.622,0L27.5981,0C12.355,0,0,12.3648,0,27.6155L0,147.384C0,162.637,12.357,175,27.5981,175L122.402,175C137.645,175,150,162.635,150,147.384L150,46.405C150,40.1855,147.532,34.2219,143.136,29.8255L120.191,6.86627C115.797,2.46982,109.837,0,103.622,0Z",
          fill: "currentColor",
          "fill-opacity": "1",
          style: { "mix-blend-mode": "passthrough" }
        })
      ]),
      createBaseVNode("g", null, [
        createBaseVNode("path", {
          d: "M143.7801,30.808L120.8914,6.73925C117.6075,3.28624,113.4198,0.940079,108.86269999999999,0L108.86269999999999,27.0143C108.86269999999999,35.591,115.4741,42.5433,123.6303,42.5433L150,42.5433C149.003,38.1003,146.849,34.0369,143.7801,30.808ZM112.2728,63.4637C112.273,62.2072,111.6695,61.0158,110.6263,60.2131C109.58279999999999,59.4109,108.20830000000001,59.0807,106.8757,59.3119L63.9774,66.7645C61.8208,67.1384,60.2595,68.883,60.2595,70.9164L60.2891,108.928C59.1133,108.527,57.8701,108.322,56.6172,108.323C50.752629999999996,108.323,46,112.728,46,118.161C46,123.596,50.75427,128,56.6172,128C62.4801,128,67.2343,123.594,67.2343,118.161L67.2343,82.3036L105.3292,75.6853L105.3292,101.475C104.1534,101.074,102.9102,100.869,101.65729999999999,100.87C95.7928,100.87,91.0401,105.276,91.0401,110.709C91.0401,116.142,95.7944,120.547,101.65729999999999,120.547C107.5202,120.547,112.2745,116.142,112.2745,110.709Q112.2728,110.528,112.2728,63.4637Z",
          fill: "#000000",
          "fill-opacity": "0.20000000298023224",
          style: { "mix-blend-mode": "passthrough" }
        })
      ]),
      createBaseVNode("g", null, [
        createBaseVNode("path", {
          d: "M107.9983,59.48451C107.9984,58.15049,107.361,56.88564,106.2592,56.03341C105.1571,55.181845,103.7053,54.831213,102.2977,55.0766483L56.987899999999996,62.98886C54.7101,63.38576,53.061099999999996,65.238,53.061099999999996,67.3967L53.0923,107.7516C51.8504,107.3258,50.5373,107.1084,49.214,107.1094C43.01979,107.1094,38,111.7867,38,117.5547C38,123.3243,43.02153,128,49.214,128C55.4065,128,60.428,123.3227,60.428,117.5547L60.428,79.4861L100.6643,72.4596L100.6643,99.8394C99.42240000000001,99.4136,98.10929999999999,99.1962,96.786,99.19720000000001C90.5918,99.19720000000001,85.572,103.8745,85.572,109.6425C85.572,115.4105,90.5935,120.0878,96.786,120.0878C102.9785,120.0878,108,115.4105,108,109.6425Q107.9983,109.4505,107.9983,59.48451Z",
          fill: "#FFFFFF",
          "fill-opacity": "1",
          style: { "mix-blend-mode": "passthrough" }
        })
      ])
    ], -1)
  ]));
}
var audio = _export_sfc(_sfc_main$g, [["render", _sfc_render$f]]);
var _sfc_main$f = {};
var _hoisted_1$f = {
  xmlns: "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink",
  fill: "none",
  version: "1.1",
  width: "1em",
  height: "1em",
  viewBox: "0 0 150 175"
};
function _sfc_render$e(_ctx, _cache) {
  return openBlock(), createElementBlock("svg", _hoisted_1$f, _cache[0] || (_cache[0] = [
    createBaseVNode("g", null, [
      createBaseVNode("g", null, [
        createBaseVNode("path", {
          d: "M103.622,0L27.5981,0C12.355,0,0,12.3648,0,27.6155L0,147.384C0,162.637,12.357,175,27.5981,175L122.402,175C137.645,175,150,162.635,150,147.384L150,46.4069C150,40.1874,147.532,34.2239,143.136,29.8274L120.191,6.86822C115.795,2.47051,109.835,-0.00000298153,103.622,0Z",
          fill: "currentColor",
          "fill-opacity": "1"
        })
      ]),
      createBaseVNode("g", null, [
        createBaseVNode("path", {
          d: "M143.13623844909668,29.827444455909728L120.19133844909668,6.868224455909729C116.89933844909667,3.574394455909729,112.70153844909667,1.336388455909729,108.13313844909668,0.439644455909729L108.13313844909668,26.208644455909727C108.13313844909668,34.38994445590973,114.76073844909668,41.021744455909726,122.93693844909669,41.021744455909726L149.37123844909667,41.021744455909726C148.3722384490967,36.78324445590973,146.21323844909668,32.90694445590973,143.13623844909668,29.827444455909728ZM55.04783844909668,67.17184445590973C53.218138449096685,65.34094445590974,50.249938449096675,65.34094445590974,48.42023844909668,67.17184445590973L28.49052844909668,87.11214445590973C26.66080844909668,88.94304445590973,26.66080844909668,91.91304445590973,28.49052844909668,93.74394445590973L48.41823844909668,113.68464445590973C49.29613844909668,114.56564445590973,50.488838449096676,115.05964445590973,51.73203844909668,115.05764445590972C52.931038449096675,115.05764445590972,54.13203844909668,114.60064445590973,55.04583844909668,113.68464445590973C56.875638449096684,111.85364445590973,56.875638449096684,108.88364445590973,55.04583844909668,107.05264445590973L38.43193844909668,90.42804445590973L55.04593844909668,73.80364445590973C56.877538449096676,71.97274445590973,56.877538449096676,69.00264445590973,55.04783844909668,67.17184445590973ZM101.57783844909667,67.17184445590973C99.74813844909669,65.34094445590974,96.77993844909668,65.34094445590974,94.95023844909667,67.17184445590973C93.12043844909668,69.00264445590973,93.12043844909668,71.97274445590973,94.95023844909667,73.80364445590973L111.56413844909667,90.42804445590973L94.95023844909667,107.05264445590973C93.12043844909668,108.88364445590973,93.12043844909668,111.85364445590973,94.95023844909667,113.68464445590973C95.86603844909668,114.60064445590973,97.06503844909668,115.05764445590972,98.26403844909667,115.05764445590972C99.46293844909668,115.05764445590972,100.66193844909668,114.60064445590973,101.57783844909667,113.68464445590973L121.50553844909668,93.74394445590973C123.33523844909668,91.91304445590973,123.33523844909668,88.94304445590973,121.50553844909668,87.11214445590973L101.57783844909667,67.17184445590973ZM85.38763844909667,57.898244455909726C82.91933844909667,57.11864445590973,80.28703844909668,58.488344455909726,79.50793844909668,60.95814445590973L61.55443844909668,117.86364445590974C60.775238449096676,120.33364445590973,62.14413844909668,122.96764445590973,64.61233844909668,123.74764445590974C65.08103844909668,123.89564445590973,65.55753844909668,123.96564445590973,66.02423844909669,123.96564445590973C68.01403844909669,123.96564445590973,69.86133844909668,122.68664445590973,70.49213844909667,120.68764445590973L88.44563844909668,63.78164445590973C89.22473844909668,61.31184445590973,87.85583844909668,58.67784445590973,85.38763844909667,57.898244455909726Z",
          fill: "#000000",
          "fill-opacity": "0.20000000298023224"
        })
      ]),
      createBaseVNode("g", null, [
        createBaseVNode("path", {
          d: "M55.04783844909668,64.82700524414062C53.218138449096685,62.996135244140625,50.249938449096675,62.996135244140625,48.42023844909668,64.82700524414062L28.49052844909668,84.76732524414062C26.66080844909668,86.59822524414062,26.66080844909668,89.56822524414062,28.49052844909668,91.39912524414063L48.41823844909668,111.33942524414063C49.29613844909668,112.22042524414063,50.488838449096676,112.71482524414063,51.73203844909668,112.71312524414063C52.931038449096675,112.71312524414063,54.13203844909668,112.25582524414062,55.04583844909668,111.33942524414063C56.875638449096684,109.50852524414063,56.875638449096684,106.53852524414063,55.04583844909668,104.70762524414062L38.43193844909668,88.08322524414064L55.04593844909668,71.45882524414063C56.877538449096676,69.62792524414063,56.877538449096676,66.65782524414062,55.04783844909668,64.82700524414062ZM121.50753844909669,84.76732524414062L101.57783844909667,64.82700524414062C99.74813844909669,62.996135244140625,96.77993844909668,62.996135244140625,94.95023844909667,64.82700524414062C93.12043844909668,66.65792524414063,93.12043844909668,69.62792524414063,94.95023844909667,71.45882524414063L111.56413844909667,88.08322524414064L94.95023844909667,104.70762524414062C93.12043844909668,106.53852524414063,93.12043844909668,109.50852524414063,94.95023844909667,111.33942524414063C95.86603844909668,112.25582524414062,97.06503844909668,112.71312524414063,98.26403844909667,112.71312524414063C99.46293844909668,112.71312524414063,100.66193844909668,112.25582524414062,101.57783844909667,111.33942524414063L121.50553844909668,91.39912524414063C123.33723844909667,89.56822524414062,123.33723844909667,86.60012524414063,121.50753844909669,84.76732524414062ZM85.38763844909667,55.55343924414063C82.91933844909667,54.773805244140625,80.28703844909668,56.14353824414062,79.50793844909668,58.613365244140624L61.55433844909668,115.51902524414062C60.775238449096676,117.98882524414063,62.14413844909668,120.62272524414063,64.61233844909668,121.40242524414063C65.08103844909668,121.55092524414063,65.55753844909668,121.62122524414063,66.02423844909669,121.62122524414063C68.01403844909669,121.62122524414063,69.86133844909668,120.34142524414062,70.49213844909667,118.34252524414063L88.44563844909668,61.436855244140624C89.22473844909668,58.96702524414062,87.85583844909668,56.333074244140626,85.38763844909667,55.55343924414063Z",
          fill: "#FFFFFF",
          "fill-opacity": "1"
        })
      ])
    ], -1)
  ]));
}
var code = _export_sfc(_sfc_main$f, [["render", _sfc_render$e]]);
var _sfc_main$e = {};
var _hoisted_1$e = {
  xmlns: "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink",
  fill: "none",
  version: "1.1",
  width: "1em",
  height: "1em",
  viewBox: "0 0 150 175"
};
function _sfc_render$d(_ctx, _cache) {
  return openBlock(), createElementBlock("svg", _hoisted_1$e, _cache[0] || (_cache[0] = [
    createStaticVNode('<g><g><path d="M103.619,0L27.5941,0C12.3421,0,0,12.3702,0,27.6131L0,147.387C0,162.649,12.3617,175,27.5941,175L122.406,175C137.658,175,150,162.63,150,147.387L150,46.4126C150,40.1982,147.539,34.2379,143.145,29.8213L120.199,6.8593C115.805,2.46231,109.829,0.00000149095,103.619,0Z" fill="currentColor" fill-opacity="1" style="mix-blend-mode:passthrough;"></path></g><g><path d="M143.14539389648436,29.82138343706131L120.19919389648437,6.859353437061309C116.87932389648438,3.53718343706131,112.68065389648437,1.3289224370613097,108.14999389648438,0.4299834370613098L108.14999389648438,26.20608343706131C108.14999389648438,34.39428343706131,114.77023389648437,41.01908343706131,122.95279389648438,41.01908343706131L149.37509389648437,41.01908343706131C148.3790938964844,36.81748343706131,146.2504938964844,32.92858343706131,143.14539389648436,29.82138343706131Z" fill="#000000" fill-opacity="0.20000000298023224" style="mix-blend-mode:passthrough;"></path></g><g><path d="M103.05298260498047,65.48576474853516Q103.05298260498047,65.69012474853515,103.01918260498047,65.89424474853516Q102.98538260498046,66.09836474853516,102.91788260498046,66.30175474853516Q102.85028260498046,66.50513474853516,102.74928260498046,66.70728474853516Q102.64818260498046,66.90944474853515,102.51378260498046,67.10987474853516Q102.37938260498046,67.31030474853516,102.21198260498048,67.50860474853516Q102.04458260498046,67.70680474853515,101.84458260498047,67.90240474853516Q101.64458260498047,68.09790474853516,101.41258260498047,68.29030474853516Q101.18048260498047,68.48280474853516,100.91678260498047,68.67160474853516Q100.65318260498047,68.86040474853516,100.35868260498046,69.04510474853515Q100.06408260498047,69.22990474853516,99.73938260498048,69.41010474853516Q99.41458260498047,69.59030474853516,99.06048260498048,69.76560474853515Q98.70628260498046,69.94090474853516,98.32358260498046,70.11090474853516Q97.94078260498047,70.28080474853516,97.53048260498048,70.44490474853515Q97.12008260498047,70.60910474853516,96.68308260498047,70.76710474853516Q96.24598260498047,70.92500474853516,95.78338260498046,71.07650474853516Q95.32068260498048,71.22790474853515,94.83358260498048,71.37240474853516Q94.34648260498047,71.51690474853515,93.83598260498047,71.65410474853516Q93.32558260498047,71.79140474853516,92.79308260498047,71.92100474853515Q92.26048260498047,72.05070474853515,91.70718260498046,72.17240474853516Q91.15388260498047,72.29420474853515,90.58108260498047,72.40770474853515Q90.00828260498048,72.52120474853515,89.41738260498047,72.62630474853516Q88.82648260498047,72.73140474853516,88.21888260498048,72.82770474853515Q87.61138260498046,72.92400474853515,86.98858260498048,73.01140474853516Q86.36588260498047,73.09880474853516,85.72938260498047,73.17700474853515Q85.09288260498047,73.25520474853516,84.44428260498047,73.32410474853515Q83.79568260498047,73.39290474853516,83.13638260498047,73.45220474853515Q82.47718260498047,73.51160474853515,81.80888260498047,73.56120474853516Q81.14068260498047,73.61090474853515,80.46498260498046,73.65080474853515Q79.78938260498046,73.69060474853515,79.10788260498046,73.72060474853515Q78.42648260498046,73.75060474853515,77.74088260498047,73.77060474853516Q77.05528260498048,73.79070474853515,76.36718260498047,73.80070474853515Q75.67918260498047,73.81070474853516,74.99028260498046,73.81070474853516Q74.30128260498047,73.81070474853516,73.61328260498047,73.80070474853515Q72.92518260498046,73.79070474853515,72.23958260498047,73.77060474853516Q71.55398260498046,73.75060474853515,70.87258260498047,73.72060474853515Q70.19108260498047,73.69060474853515,69.51548260498046,73.65080474853515Q68.83978260498047,73.61090474853515,68.17158260498047,73.56120474853516Q67.50328260498047,73.51160474853515,66.84408260498047,73.45220474853515Q66.18478260498047,73.39290474853516,65.53618260498047,73.32410474853515Q64.88758260498047,73.25520474853516,64.25108260498047,73.17700474853515Q63.61458260498047,73.09880474853516,62.99188260498047,73.01140474853516Q62.36908260498047,72.92410474853516,61.76158260498047,72.82770474853515Q61.15398260498047,72.73140474853516,60.563082604980465,72.62630474853516Q59.97218260498047,72.52120474853515,59.39938260498047,72.40770474853515Q58.82658260498047,72.29420474853515,58.273282604980466,72.17240474853516Q57.71998260498047,72.05070474853515,57.18738260498047,71.92100474853515Q56.65488260498047,71.79140474853516,56.14444260498047,71.65410474853516Q55.634002604980466,71.51690474853515,55.14687260498047,71.37240474853516Q54.659742604980465,71.22790474853515,54.19710260498047,71.07650474853516Q53.73447260498047,70.92500474853516,53.29743260498047,70.76710474853516Q52.86040260498047,70.60910474853516,52.45002260498047,70.44490474853515Q52.03964260498047,70.28080474853516,51.65691260498047,70.11090474853516Q51.27417260498047,69.94090474853516,50.92001260498047,69.76560474853515Q50.56584260498047,69.59030474853516,50.241092604980466,69.41010474853516Q49.91635260498047,69.22990474853516,49.621802604980466,69.04510474853515Q49.32726260498047,68.86040474853516,49.06363260498047,68.67160474853516Q48.80000260498047,68.48280474853516,48.56791260498047,68.29030474853516Q48.33583260498047,68.09790474853516,48.13585260498047,67.90240474853516Q47.93587260498047,67.70680474853515,47.76848760498047,67.50860474853516Q47.60109860498047,67.31030474853516,47.46670060498047,67.10987474853516Q47.33230260498047,66.90944474853515,47.23121960498047,66.70728474853516Q47.13013660498047,66.50513474853516,47.062612604980465,66.30175474853516Q46.99508820498047,66.09836474853516,46.961285404980465,65.89424474853516Q46.92748260498047,65.69012474853515,46.92748260498047,65.48576474853516Q46.92748260498047,65.28139474853515,46.961285404980465,65.07727474853516Q46.99508820498047,64.87315474853516,47.062612604980465,64.66977474853516Q47.13013660498047,64.46639474853515,47.23121960498047,64.26423474853516Q47.33230260498047,64.06208474853516,47.46670060498047,63.861644748535156Q47.60109860498047,63.661204748535155,47.76848760498047,63.46296474853516Q47.93587260498047,63.26472474853516,48.13585260498047,63.069154748535155Q48.33583260498047,62.87358474853516,48.56791260498047,62.68116474853515Q48.80000260498047,62.488744748535154,49.06363260498047,62.29993474853516Q49.32726260498047,62.111124748535154,49.621802604980466,61.926384748535156Q49.91635260498047,61.741634748535155,50.241092604980466,61.56140474853515Q50.56584260498047,61.381164748535156,50.92001260498047,61.20587474853516Q51.27417260498047,61.030584748535155,51.65691260498047,60.86066474853516Q52.03964260498047,60.69073474853516,52.45002260498047,60.52659474853515Q52.86040260498047,60.362444748535154,53.29743260498047,60.20446474853516Q53.73447260498047,60.04648474853516,54.19710260498047,59.895064748535155Q54.659742604980465,59.74363474853516,55.14687260498047,59.599124748535154Q55.634002604980466,59.45461474853516,56.14444260498047,59.31737474853516Q56.65488260498047,59.18013474853515,57.18738260498047,59.050484748535155Q57.71998260498047,58.92083474853516,58.273282604980466,58.799094748535154Q58.82658260498047,58.67735474853516,59.39938260498047,58.56381474853516Q59.97218260498047,58.45027474853516,60.563082604980465,58.34520474853515Q61.15398260498047,58.24014474853516,61.76158260498047,58.14380474853515Q62.36908260498047,58.047467748535155,62.99188260498047,57.960089748535154Q63.61458260498047,57.87271174853515,64.25108260498047,57.794504748535154Q64.88758260498047,57.71629674853516,65.53618260498047,57.64744774853516Q66.18478260498047,57.57859874853516,66.84408260498047,57.51927474853515Q67.50328260498047,57.45994974853516,68.17158260498047,57.41029374853515Q68.83978260498047,57.36063674853516,69.51548260498046,57.320766748535156Q70.19108260498047,57.280896748535156,70.87258260498047,57.25090984853516Q71.55398260498046,57.220923048535155,72.23958260498047,57.200891648535155Q72.92518260498046,57.180860248535154,73.61328260498047,57.17083254853516Q74.30128260498047,57.160804748535156,74.99028260498046,57.160804748535156Q75.67918260498047,57.160804748535156,76.36718260498047,57.17083254853516Q77.05528260498048,57.180860248535154,77.74088260498047,57.200891648535155Q78.42648260498046,57.220923048535155,79.10788260498046,57.25090984853516Q79.78938260498046,57.280896748535156,80.46498260498046,57.320766748535156Q81.14068260498047,57.36063674853516,81.80888260498047,57.41029374853515Q82.47718260498047,57.45994974853516,83.13638260498047,57.51927474853515Q83.79568260498047,57.57859874853516,84.44428260498047,57.64744774853516Q85.09288260498047,57.71629674853516,85.72938260498047,57.794504748535154Q86.36588260498047,57.87271174853515,86.98858260498048,57.960089748535154Q87.61138260498046,58.047467748535155,88.21888260498048,58.14380474853515Q88.82648260498047,58.24014474853516,89.41738260498047,58.34520474853515Q90.00828260498048,58.45027474853516,90.58108260498047,58.56381474853516Q91.15388260498047,58.67735474853516,91.70718260498046,58.799094748535154Q92.26048260498047,58.92083474853516,92.79308260498047,59.050484748535155Q93.32558260498047,59.18013474853515,93.83598260498047,59.31737474853516Q94.34648260498047,59.45461474853516,94.83358260498048,59.599124748535154Q95.32068260498048,59.74363474853516,95.78338260498046,59.895064748535155Q96.24598260498047,60.04648474853516,96.68308260498047,60.20446474853516Q97.12008260498047,60.362444748535154,97.53048260498048,60.52659474853515Q97.94078260498047,60.69073474853516,98.32358260498046,60.86066474853516Q98.70628260498046,61.030584748535155,99.06048260498048,61.20587474853516Q99.41458260498047,61.381164748535156,99.73938260498048,61.56140474853515Q100.06408260498047,61.741634748535155,100.35868260498046,61.926384748535156Q100.65318260498047,62.111124748535154,100.91678260498047,62.29993474853516Q101.18048260498047,62.488744748535154,101.41258260498047,62.68116474853515Q101.64458260498047,62.87358474853516,101.84458260498047,63.069154748535155Q102.04458260498046,63.26472474853516,102.21198260498048,63.46296474853516Q102.37938260498046,63.661204748535155,102.51378260498046,63.861644748535156Q102.64818260498046,64.06208474853516,102.74928260498046,64.26423474853516Q102.85028260498046,64.46639474853515,102.91788260498046,64.66977474853516Q102.98538260498046,64.87315474853516,103.01918260498047,65.07727474853516Q103.05298260498047,65.28139474853515,103.05298260498047,65.48576474853516Z" fill="#F26C38" fill-opacity="1" style="mix-blend-mode:passthrough;"></path></g><g><path d="M74.99021385498047,91.43770888671875C90.47651385498047,91.43770888671875,103.05301385498046,87.70520888671875,103.05301385498046,83.11280888671875L103.05301385498046,71.71969988671874C103.05301385498046,71.56336488671874,103.03351385498047,71.38748088671875,103.01391385498047,71.23114628671875C102.17421385498048,75.60858888671875,89.94921385498047,79.08709888671875,75.00971385498048,79.08709888671875C60.07031385498047,79.08709888671875,47.825805854980466,75.58904888671876,46.986073654980466,71.21160888671875C46.94701385498047,71.36794388671875,46.94701385498047,71.52428488671875,46.94701385498047,71.70016288671874L46.94701385498047,83.09320888671876C46.94701385498047,87.70520888671875,59.50401385498047,91.43770888671875,74.99021385498047,91.43770888671875Z" fill="#F26C38" fill-opacity="1" style="mix-blend-mode:passthrough;"></path></g><g><path d="M74.99021385498047,108.5957830444336C90.47651385498047,108.5957830444336,103.05301385498046,104.8631830444336,103.05301385498046,100.2707830444336L103.05301385498046,88.87773704443359C103.05301385498046,88.72140204443359,103.03351385498047,88.54551804443359,103.01391385498047,88.3891830444336C102.17421385498048,92.76663304443359,89.94921385498047,96.2451330444336,75.00971385498048,96.2451330444336C60.07031385498047,96.2451330444336,47.825805854980466,92.76663304443359,46.986073654980466,88.3891830444336C46.94701385498047,88.54551804443359,46.94701385498047,88.70185304443359,46.94701385498047,88.87773704443359L46.94701385498047,100.2707830444336C46.94701385498047,104.8631830444336,59.50401385498047,108.5957830444336,74.99021385498047,108.5957830444336Z" fill="#F26C38" fill-opacity="1" style="mix-blend-mode:passthrough;"></path></g><g><path d="M75.0097412902832,113.3249670288086C60.0703412902832,113.3249670288086,47.8453332902832,109.84646702880859,47.0056010902832,105.4690170288086C46.9665412902832,105.62535202880859,46.9665412902832,105.78168702880859,46.9665412902832,105.95757102880859L46.9665412902832,117.3506170288086C46.9665412902832,121.9430170288086,59.523541290283205,125.6756170288086,75.02924129028321,125.6756170288086C90.5350412902832,125.6756170288086,103.0920412902832,121.94311702880859,103.0920412902832,117.3506170288086L103.0920412902832,105.9575830288086C103.0920412902832,105.80124802880859,103.0725412902832,105.62536402880859,103.0529412902832,105.4690289564086C102.1741412902832,109.8464770288086,89.9492412902832,113.32497702880859,75.0097412902832,113.3249670288086Z" fill="#F26C38" fill-opacity="1" style="mix-blend-mode:passthrough;"></path></g><g><path d="M103.05298260498047,63.14069867797852Q103.05298260498047,63.345058677978514,103.01918260498047,63.54917867797852Q102.98538260498046,63.75329867797851,102.91788260498046,63.95668867797852Q102.85028260498046,64.16006867797851,102.74928260498046,64.36221867797852Q102.64818260498046,64.56437867797851,102.51378260498046,64.76480867797852Q102.37938260498046,64.96523867797852,102.21198260498048,65.16353867797852Q102.04458260498046,65.36173867797851,101.84458260498047,65.55733867797852Q101.64458260498047,65.75283867797852,101.41258260498047,65.94523867797852Q101.18048260498047,66.13773867797852,100.91678260498047,66.32653867797852Q100.65318260498047,66.51533867797852,100.35868260498046,66.70003867797851Q100.06408260498047,66.88483867797852,99.73938260498048,67.06503867797852Q99.41458260498047,67.24523867797852,99.06048260498048,67.42053867797851Q98.70628260498046,67.59583867797852,98.32358260498046,67.76583867797852Q97.94078260498047,67.93573867797852,97.53048260498048,68.09983867797851Q97.12008260498047,68.26403867797852,96.68308260498047,68.42203867797852Q96.24598260498047,68.57993867797852,95.78338260498046,68.73143867797852Q95.32068260498048,68.88283867797851,94.83358260498048,69.02733867797852Q94.34648260498047,69.17183867797851,93.83598260498047,69.30903867797852Q93.32558260498047,69.44633867797852,92.79308260498047,69.57593867797851Q92.26048260498047,69.70563867797851,91.70718260498046,69.82733867797852Q91.15388260498047,69.94913867797851,90.58108260498047,70.06263867797851Q90.00828260498048,70.17613867797851,89.41738260498047,70.28123867797852Q88.82648260498047,70.38633867797851,88.21888260498048,70.48263867797851Q87.61138260498046,70.57893867797851,86.98858260498048,70.66633867797852Q86.36588260498047,70.75373867797852,85.72938260498047,70.83193867797851Q85.09288260498047,70.91013867797852,84.44428260498047,70.97903867797851Q83.79568260498047,71.04783867797852,83.13638260498047,71.10713867797851Q82.47718260498047,71.16653867797851,81.80888260498047,71.21613867797852Q81.14068260498047,71.26583867797851,80.46498260498046,71.30573867797851Q79.78938260498046,71.34553867797851,79.10788260498046,71.37553867797851Q78.42648260498046,71.40553867797851,77.74088260498047,71.42553867797852Q77.05528260498048,71.44563867797851,76.36718260498047,71.45563867797851Q75.67918260498047,71.46563867797852,74.99028260498046,71.46563867797852Q74.30128260498047,71.46563867797852,73.61328260498047,71.45563867797851Q72.92518260498046,71.44563867797851,72.23958260498047,71.42553867797852Q71.55398260498046,71.40553867797851,70.87258260498047,71.37553867797851Q70.19108260498047,71.34553867797851,69.51548260498046,71.30573867797851Q68.83978260498047,71.26583867797851,68.17158260498047,71.21613867797852Q67.50328260498047,71.16653867797851,66.84408260498047,71.10713867797851Q66.18478260498047,71.04783867797852,65.53618260498047,70.97903867797851Q64.88758260498047,70.91013867797852,64.25108260498047,70.83193867797851Q63.61458260498047,70.75373867797852,62.99188260498047,70.66633867797852Q62.36908260498047,70.57903867797852,61.76158260498047,70.48263867797851Q61.15398260498047,70.38633867797851,60.563082604980465,70.28123867797852Q59.97218260498047,70.17613867797851,59.39938260498047,70.06263867797851Q58.82658260498047,69.94913867797851,58.273282604980466,69.82733867797852Q57.71998260498047,69.70563867797851,57.18738260498047,69.57593867797851Q56.65488260498047,69.44633867797852,56.14444260498047,69.30903867797852Q55.634002604980466,69.17183867797851,55.14687260498047,69.02733867797852Q54.659742604980465,68.88283867797851,54.19710260498047,68.73143867797852Q53.73447260498047,68.57993867797852,53.29743260498047,68.42203867797852Q52.86040260498047,68.26403867797852,52.45002260498047,68.09983867797851Q52.03964260498047,67.93573867797852,51.65691260498047,67.76583867797852Q51.27417260498047,67.59583867797852,50.92001260498047,67.42053867797851Q50.56584260498047,67.24523867797852,50.241092604980466,67.06503867797852Q49.91635260498047,66.88483867797852,49.621802604980466,66.70003867797851Q49.32726260498047,66.51533867797852,49.06363260498047,66.32653867797852Q48.80000260498047,66.13773867797852,48.56791260498047,65.94523867797852Q48.33583260498047,65.75283867797852,48.13585260498047,65.55733867797852Q47.93587260498047,65.36173867797851,47.76848760498047,65.16353867797852Q47.60109860498047,64.96523867797852,47.46670060498047,64.76480867797852Q47.33230260498047,64.56437867797851,47.23121960498047,64.36221867797852Q47.13013660498047,64.16006867797851,47.062612604980465,63.95668867797852Q46.99508820498047,63.75329867797851,46.961285404980465,63.54917867797852Q46.92748260498047,63.345058677978514,46.92748260498047,63.14069867797852Q46.92748260498047,62.936328677978516,46.961285404980465,62.73220867797852Q46.99508820498047,62.528088677978516,47.062612604980465,62.32470867797851Q47.13013660498047,62.12132867797852,47.23121960498047,61.91916867797852Q47.33230260498047,61.717018677978515,47.46670060498047,61.516578677978515Q47.60109860498047,61.316138677978515,47.76848760498047,61.117898677978516Q47.93587260498047,60.91965867797852,48.13585260498047,60.724088677978514Q48.33583260498047,60.52851867797852,48.56791260498047,60.33609867797851Q48.80000260498047,60.143678677978514,49.06363260498047,59.95486867797852Q49.32726260498047,59.76605867797851,49.621802604980466,59.581318677978516Q49.91635260498047,59.396568677978514,50.241092604980466,59.21633867797851Q50.56584260498047,59.036098677978515,50.92001260498047,58.86080867797852Q51.27417260498047,58.685518677978514,51.65691260498047,58.51559867797852Q52.03964260498047,58.345668677978516,52.45002260498047,58.18152867797851Q52.86040260498047,58.01737867797851,53.29743260498047,57.85939867797852Q53.73447260498047,57.701418677978516,54.19710260498047,57.549998677978515Q54.659742604980465,57.39856867797852,55.14687260498047,57.25405867797851Q55.634002604980466,57.109548677978516,56.14444260498047,56.97230867797852Q56.65488260498047,56.83506867797851,57.18738260498047,56.705418677978514Q57.71998260498047,56.575768677978516,58.273282604980466,56.45402867797851Q58.82658260498047,56.33228867797852,59.39938260498047,56.21874867797852Q59.97218260498047,56.10520867797852,60.563082604980465,56.00013867797851Q61.15398260498047,55.89507867797852,61.76158260498047,55.79873867797851Q62.36908260498047,55.702401677978514,62.99188260498047,55.61502367797851Q63.61458260498047,55.52764567797851,64.25108260498047,55.44943867797851Q64.88758260498047,55.37123067797852,65.53618260498047,55.30238167797852Q66.18478260498047,55.233532677978516,66.84408260498047,55.17420867797851Q67.50328260498047,55.11488367797852,68.17158260498047,55.06522767797851Q68.83978260498047,55.015570677978516,69.51548260498046,54.975700677978516Q70.19108260498047,54.935830677978515,70.87258260498047,54.90584377797852Q71.55398260498046,54.875856977978515,72.23958260498047,54.855825577978514Q72.92518260498046,54.835794177978514,73.61328260498047,54.82576647797852Q74.30128260498047,54.815738677978516,74.99028260498046,54.815738677978516Q75.67918260498047,54.815738677978516,76.36718260498047,54.82576647797852Q77.05528260498048,54.835794177978514,77.74088260498047,54.855825577978514Q78.42648260498046,54.875856977978515,79.10788260498046,54.90584377797852Q79.78938260498046,54.935830677978515,80.46498260498046,54.975700677978516Q81.14068260498047,55.015570677978516,81.80888260498047,55.06522767797851Q82.47718260498047,55.11488367797852,83.13638260498047,55.17420867797851Q83.79568260498047,55.233532677978516,84.44428260498047,55.30238167797852Q85.09288260498047,55.37123067797852,85.72938260498047,55.44943867797851Q86.36588260498047,55.52764567797851,86.98858260498048,55.61502367797851Q87.61138260498046,55.702401677978514,88.21888260498048,55.79873867797851Q88.82648260498047,55.89507867797852,89.41738260498047,56.00013867797851Q90.00828260498048,56.10520867797852,90.58108260498047,56.21874867797852Q91.15388260498047,56.33228867797852,91.70718260498046,56.45402867797851Q92.26048260498047,56.575768677978516,92.79308260498047,56.705418677978514Q93.32558260498047,56.83506867797851,93.83598260498047,56.97230867797852Q94.34648260498047,57.109548677978516,94.83358260498048,57.25405867797851Q95.32068260498048,57.39856867797852,95.78338260498046,57.549998677978515Q96.24598260498047,57.701418677978516,96.68308260498047,57.85939867797852Q97.12008260498047,58.01737867797851,97.53048260498048,58.18152867797851Q97.94078260498047,58.345668677978516,98.32358260498046,58.51559867797852Q98.70628260498046,58.685518677978514,99.06048260498048,58.86080867797852Q99.41458260498047,59.036098677978515,99.73938260498048,59.21633867797851Q100.06408260498047,59.396568677978514,100.35868260498046,59.581318677978516Q100.65318260498047,59.76605867797851,100.91678260498047,59.95486867797852Q101.18048260498047,60.143678677978514,101.41258260498047,60.33609867797851Q101.64458260498047,60.52851867797852,101.84458260498047,60.724088677978514Q102.04458260498046,60.91965867797852,102.21198260498048,61.117898677978516Q102.37938260498046,61.316138677978515,102.51378260498046,61.516578677978515Q102.64818260498046,61.717018677978515,102.74928260498046,61.91916867797852Q102.85028260498046,62.12132867797852,102.91788260498046,62.32470867797851Q102.98538260498046,62.528088677978516,103.01918260498047,62.73220867797852Q103.05298260498047,62.936328677978516,103.05298260498047,63.14069867797852Z" fill="#FFFFFF" fill-opacity="1" style="mix-blend-mode:passthrough;"></path></g><g><path d="M74.99021385498047,89.09266951904297C90.47651385498047,89.09266951904297,103.05301385498046,85.36016951904297,103.05301385498046,80.76776951904297L103.05301385498046,69.37466051904296C103.05301385498046,69.21832551904296,103.03351385498047,69.04244151904297,103.01391385498047,68.88610691904297C102.17421385498048,73.26354951904297,89.94921385498047,76.74205951904297,75.00971385498048,76.74205951904297C60.07031385498047,76.74205951904297,47.825805854980466,73.24400951904298,46.986073654980466,68.86656951904297C46.94701385498047,69.02290451904297,46.94701385498047,69.17924551904296,46.94701385498047,69.35512351904296L46.94701385498047,80.74816951904297C46.94701385498047,85.36016951904297,59.50401385498047,89.09266951904297,74.99021385498047,89.09266951904297Z" fill="#FFFFFF" fill-opacity="1" style="mix-blend-mode:passthrough;"></path></g><g><path d="M74.99021385498047,106.25072078857423C90.47651385498047,106.25072078857423,103.05301385498046,102.51812078857422,103.05301385498046,97.92572078857422L103.05301385498046,86.53267478857421C103.05301385498046,86.37633978857421,103.03351385498047,86.20045578857422,103.01391385498047,86.04412078857422C102.17421385498048,90.42157078857421,89.94921385498047,93.90007078857423,75.00971385498048,93.90007078857423C60.07031385498047,93.90007078857423,47.825805854980466,90.42157078857421,46.986073654980466,86.04412078857422C46.94701385498047,86.20045578857422,46.94701385498047,86.35679078857422,46.94701385498047,86.53267478857421L46.94701385498047,97.92572078857422C46.94701385498047,102.51812078857422,59.50401385498047,106.25072078857423,74.99021385498047,106.25072078857423Z" fill="#FFFFFF" fill-opacity="1" style="mix-blend-mode:passthrough;"></path></g><g><path d="M103.01394129028321,103.12396240234375C102.1742412902832,107.50141240234375,89.9492412902832,110.97991240234376,75.0097412902832,110.97991240234376C60.0703412902832,110.97991240234376,47.8453332902832,107.50141240234375,47.0056010902832,103.12396240234375C46.9665412902832,103.28029740234375,46.9665412902832,103.43663240234375,46.9665412902832,103.61251640234374L46.9665412902832,115.00556240234376C46.9665412902832,119.59796240234375,59.523541290283205,123.33056240234376,75.02924129028321,123.33056240234376C90.51554129028321,123.33056240234376,103.0920412902832,119.59796240234375,103.0920412902832,115.00556240234376L103.0920412902832,103.61251640234374C103.0529412902832,103.45618140234374,103.0334412902832,103.28029740234375,103.01394129028321,103.12396240234375Z" fill="#FFFFFF" fill-opacity="1" style="mix-blend-mode:passthrough;"></path></g></g>', 1)
  ]));
}
var database = _export_sfc(_sfc_main$e, [["render", _sfc_render$d]]);
var _sfc_main$d = {};
var _hoisted_1$d = {
  xmlns: "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink",
  fill: "none",
  version: "1.1",
  width: "1em",
  height: "1em",
  viewBox: "0 0 150 175"
};
function _sfc_render$c(_ctx, _cache) {
  return openBlock(), createElementBlock("svg", _hoisted_1$d, _cache[0] || (_cache[0] = [
    createBaseVNode("g", null, [
      createBaseVNode("g", null, [
        createBaseVNode("path", {
          d: "M103.622,0L27.5981,0C12.355,0,0,12.3648,0,27.6155L0,147.384C0,162.637,12.357,175,27.5981,175L122.402,175C137.645,175,150,162.635,150,147.384L150,46.405C150,40.1855,147.532,34.2219,143.136,29.8255L120.191,6.86627C115.797,2.46982,109.837,0,103.622,0Z",
          fill: "currentColor",
          "fill-opacity": "1",
          style: { "mix-blend-mode": "passthrough" }
        })
      ]),
      createBaseVNode("g", null, [
        createBaseVNode("path", {
          d: "M102.9993763305664,63.478790526247025C101.1696763305664,61.647890526247025,98.20147633056641,61.647890526247025,96.3717763305664,63.478790526247025L74.74517633056641,85.11909052624702L53.118526330566404,63.478790526247025C51.28880633056641,61.647890526247025,48.32063633056641,61.647890526247025,46.49091633056641,63.478790526247025C44.66119533056641,65.30969052624702,44.66119533056641,68.27969052624702,46.49091633056641,70.11059052624702L68.11757633056641,91.75089052624702L46.488966330566406,113.39069052624703C44.659246330566404,115.22169052624703,44.659246330566404,118.19169052624703,46.488966330566406,120.02269052624702C47.40480633056641,120.93969052624702,48.60378633056641,121.39669052624703,49.8027763305664,121.39669052624703C51.00175633056641,121.39669052624703,52.20073633056641,120.93969052624702,53.1165763305664,120.02269052624702L74.74517633056641,98.38269052624702L96.3698763305664,120.02269052624702C97.2856763305664,120.93969052624702,98.4846763305664,121.39669052624703,99.68367633056641,121.39669052624703C100.88257633056641,121.39669052624703,102.0815763305664,120.93969052624702,102.9974763305664,120.02269052624702C104.8271763305664,118.19169052624703,104.8271763305664,115.22169052624703,102.9974763305664,113.39069052624703L81.37277633056641,91.75089052624702L102.9993763305664,70.11059052624702C104.82917633056641,68.27969052624702,104.82917633056641,65.30969052624702,102.9993763305664,63.478790526247025ZM143.13607633056642,29.825490526247023L120.19137633056641,6.866270526247025C116.89937633056641,3.5724405262470245,112.70147633056641,1.3344315262470245,108.13317633056641,0.43769052624702454L108.13317633056641,26.206690526247023C108.13317633056641,34.38799052624702,114.7607763305664,41.01979052624702,122.93697633056641,41.01979052624702L149.3716763305664,41.01979052624702C148.3716763305664,36.78159052624702,146.2126763305664,32.90549052624702,143.13607633056642,29.825490526247023Z",
          fill: "#000000",
          "fill-opacity": "0.20000000298023224",
          style: { "mix-blend-mode": "passthrough" }
        })
      ]),
      createBaseVNode("g", null, [
        createBaseVNode("path", {
          d: "M81.37277633056641,89.4060757019043L102.9993763305664,67.76582570190429C104.82917633056641,65.9349557019043,104.82917633056641,62.9649057019043,102.9993763305664,61.134035701904295C101.1696763305664,59.3031567019043,98.20147633056641,59.3031567019043,96.3717763305664,61.134035701904295L74.74517633056641,82.7742757019043L53.118526330566404,61.134035701904295C51.28880633056641,59.3031567019043,48.32063633056641,59.3031567019043,46.49091633056641,61.134035701904295C44.66119533056641,62.9649057019043,44.66119533056641,65.9349557019043,46.49091633056641,67.76582570190429L68.11757633056641,89.4060757019043L46.488966330566406,111.0463757019043C44.659246330566404,112.8772757019043,44.659246330566404,115.8472757019043,46.488966330566406,117.6781757019043C47.40480633056641,118.59457570190429,48.60378633056641,119.0518757019043,49.8027763305664,119.0518757019043C51.00175633056641,119.0518757019043,52.20073633056641,118.59457570190429,53.1165763305664,117.6781757019043L74.74517633056641,96.0378757019043L96.3698763305664,117.6781757019043C97.2856763305664,118.59457570190429,98.4846763305664,119.0518757019043,99.68367633056641,119.0518757019043C100.88257633056641,119.0518757019043,102.0815763305664,118.59457570190429,102.9974763305664,117.6781757019043C104.8271763305664,115.8472757019043,104.8271763305664,112.8772757019043,102.9974763305664,111.0463757019043L81.37277633056641,89.4060757019043Z",
          fill: "#FFFFFF",
          "fill-opacity": "1",
          style: { "mix-blend-mode": "passthrough" }
        })
      ])
    ], -1)
  ]));
}
var excel = _export_sfc(_sfc_main$d, [["render", _sfc_render$c]]);
var _sfc_main$c = {};
var _hoisted_1$c = {
  xmlns: "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink",
  fill: "none",
  version: "1.1",
  width: "1em",
  height: "1em",
  viewBox: "0 0 150 175"
};
function _sfc_render$b(_ctx, _cache) {
  return openBlock(), createElementBlock("svg", _hoisted_1$c, _cache[0] || (_cache[0] = [
    createBaseVNode("g", null, [
      createBaseVNode("g", null, [
        createBaseVNode("path", {
          d: "M103.622,0L27.5981,0C12.355,0,0,12.3648,0,27.6155L0,147.384C0,162.637,12.357,175,27.5981,175L122.402,175C137.645,175,150,162.635,150,147.384L150,46.405C150,40.1855,147.532,34.2219,143.136,29.8255L120.191,6.86627C115.797,2.46982,109.837,0,103.622,0Z",
          fill: "currentColor",
          "fill-opacity": "1",
          style: { "mix-blend-mode": "passthrough" }
        })
      ]),
      createBaseVNode("g", null, [
        createBaseVNode("path", {
          d: "M119.4187,6.43348L142.679,29.4102C145.799,32.4921,147.987,36.3713,149,40.613L122.202,40.613C113.9134,40.613,107.1945,33.9762,107.1945,25.7887L107.1945,0C111.8257,0.897429,116.0814,3.13714,119.4187,6.43348ZM102.2165,77.5181L78.4159,77.5181C77.3094,77.5182,76.292,76.8169,75.7664,75.6919L66.9447,56.7338C66.4191,55.6088,65.4017,54.9076,64.2951,54.9076L48.02165,54.9076C44.69598,54.9076,42,58.0224,42,61.8647L42,114.043C42,117.885,44.69598,121,48.02165,121L102.2165,121C105.5421,121,108.2381,117.885,108.2381,114.043L108.2381,84.4752C108.2381,80.6329,105.5421,77.5181,102.2165,77.5181ZM79.3878,73.0348C79.78110000000001,73.8506,80.52170000000001,74.3613,81.3298,74.3741L100.9002,74.3741C102.1591,74.3742,103.1751,73.1848,103.1583,71.7304L103.1583,67.2604C103.15,63.9821,100.8474,61.3295,98.0098,61.3295L77.6115,61.3295C75.8888,61.33,74.801,63.4694,75.6394,65.2081L79.3878,73.0348ZM76.6245,107.955L55.5487,107.955C54.3016,107.955,53.2906,106.787,53.2906,105.347C53.2906,103.906,54.3016,102.738,55.5487,102.738L76.6245,102.738C77.8716,102.738,78.8826,103.906,78.8826,105.347C78.8826,106.787,77.8716,107.955,76.6245,107.955ZM87.1623,107.955L84.1515,107.955C82.90440000000001,107.955,81.8934,106.787,81.8934,105.347C81.8934,103.906,82.90440000000001,102.738,84.1515,102.738L87.1623,102.738C88.40950000000001,102.738,89.4205,103.906,89.4205,105.347C89.4205,106.787,88.40950000000001,107.955,87.1623,107.955Z",
          "fill-rule": "evenodd",
          fill: "#000000",
          "fill-opacity": "0.20000000298023224",
          style: { "mix-blend-mode": "passthrough" }
        })
      ]),
      createBaseVNode("g", null, [
        createBaseVNode("path", {
          d: "M80.73519999999999,75.2368L104.0909,75.2368C107.3544,75.2368,110,78.3002,110,82.0789L110,111.1579C110,114.9367,107.3544,118,104.0909,118L50.90909,118C47.64559,118,45,114.9367,45,111.1579L45,59.84211C45,56.06331,47.64559,53,50.90909,53L66.8784,53C67.96430000000001,53,68.9626,53.689657,69.4784,54.79605L78.1352,73.4408C78.65100000000001,74.5472,79.6494,75.23689999999999,80.73519999999999,75.2368ZM83.5947,72.1447C82.8017,72.1322,82.0749,71.62989999999999,81.689,70.8276L78.0106,63.1303C77.1879,61.42029,78.2553,59.31629,79.94579999999999,59.31579L99.96289999999999,59.31579C102.7474,59.31579,105.007,61.92451,105.01509999999999,65.1487L105.01509999999999,69.5447C105.0316,70.9751,104.0347,72.1449,102.7992,72.1447L83.5947,72.1447ZM58.295500000000004,105.1711L78.9773,105.1711C80.2011,105.1711,81.19319999999999,104.0223,81.19319999999999,102.6053C81.19319999999999,101.1882,80.2011,100.0395,78.9773,100.0395L58.295500000000004,100.0395C57.071600000000004,100.0395,56.079499999999996,101.1882,56.079499999999996,102.6053C56.079499999999996,104.0223,57.071600000000004,105.1711,58.295500000000004,105.1711ZM86.36359999999999,105.1711L89.31819999999999,105.1711C90.542,105.1711,91.5341,104.0223,91.5341,102.6053C91.5341,101.1882,90.542,100.0395,89.31819999999999,100.0395L86.36359999999999,100.0395C85.13980000000001,100.0395,84.1477,101.1882,84.1477,102.6053C84.1477,104.0223,85.13980000000001,105.1711,86.36359999999999,105.1711Z",
          "fill-rule": "evenodd",
          fill: "#FFFFFF",
          "fill-opacity": "1",
          style: { "mix-blend-mode": "passthrough" }
        })
      ])
    ], -1)
  ]));
}
var file = _export_sfc(_sfc_main$c, [["render", _sfc_render$b]]);
var _sfc_main$b = {};
var _hoisted_1$b = {
  xmlns: "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink",
  fill: "none",
  version: "1.1",
  width: "1em",
  height: "1em",
  viewBox: "0 0 150 175"
};
function _sfc_render$a(_ctx, _cache) {
  return openBlock(), createElementBlock("svg", _hoisted_1$b, _cache[0] || (_cache[0] = [
    createBaseVNode("g", null, [
      createBaseVNode("g", null, [
        createBaseVNode("path", {
          d: "M103.622,0L27.5981,0C12.355,0,0,12.3648,0,27.6155L0,147.384C0,162.637,12.357,175,27.5981,175L122.402,175C137.645,175,150,162.635,150,147.384L150,46.405C150,40.1855,147.532,34.2219,143.136,29.8255L120.191,6.86627C115.797,2.46982,109.837,0,103.622,0Z",
          fill: "currentColor",
          "fill-opacity": "1",
          style: { "mix-blend-mode": "passthrough" }
        })
      ]),
      createBaseVNode("g", null, [
        createBaseVNode("path", {
          d: "M121.4512,6.3707L143.8997,29.1232C146.9096,32.1755,149.022,36.0167,150,40.2167L124.1374,40.2167C116.138,40.2167,109.6537,33.6446,109.6537,25.537L109.6537,0C114.1233,0.888667,118.2304,3.10652,121.4512,6.3707ZM87.7937,65.9973C89.4664,69.7349,93.815,71.3907,97.505,69.6951C101.195,67.9995,102.8281,63.595,101.1519,59.8591C99.4793,56.1216,95.1306,54.4657,91.4406,56.1613C87.75059999999999,57.8569,86.1175,62.2614,87.7937,65.9973ZM110.9348,108.381L102.7132,85.7332C100.8391,80.5692,96.15270000000001,80.5692,94.2787,85.7332L86.48910000000001,107.194L72.0064,67.2953C70.1323,62.1332,65.44839999999999,62.1332,63.5743,67.2953L48.659585,108.385C46.78551,113.547,49.1281,120,52.87625,120L106.71809999999999,120C110.46629999999999,119.998,112.8089,113.545,110.9348,108.381Z",
          "fill-rule": "evenodd",
          fill: "#000000",
          "fill-opacity": "0.20000000298023224",
          style: { "mix-blend-mode": "passthrough" }
        })
      ]),
      createBaseVNode("g", null, [
        createBaseVNode("path", {
          d: "M93.5992,66.3085C89.8277,68.0171,85.3829,66.3485,83.6733,62.582300000000004C81.96000000000001,58.81768,83.6292,54.37933,87.4008,52.670698C91.1723,50.96207,95.6171,52.630641,97.3267,56.39691C99.03999999999999,60.16151,97.3708,64.5999,93.5992,66.3085ZM98.9225,82.4699L107.3258,105.29169999999999C109.2413,110.49539999999999,106.84700000000001,116.9981,103.01599999999999,117L47.98403,117C44.15304,117,41.75867,110.4973,43.674163,105.29560000000001L58.9185,63.8902C60.834,58.68846,65.6215,58.68846,67.537,63.8902L82.3398,104.0961L90.30160000000001,82.4699C92.2171,77.2662,97.007,77.2662,98.9225,82.4699Z",
          "fill-rule": "evenodd",
          fill: "#FFFFFF",
          "fill-opacity": "1",
          style: { "mix-blend-mode": "passthrough" }
        })
      ])
    ], -1)
  ]));
}
var image = _export_sfc(_sfc_main$b, [["render", _sfc_render$a]]);
var _sfc_main$a = {};
var _hoisted_1$a = {
  xmlns: "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink",
  fill: "none",
  version: "1.1",
  width: "1em",
  height: "1em",
  viewBox: "0 0 150 175"
};
function _sfc_render$9(_ctx, _cache) {
  return openBlock(), createElementBlock("svg", _hoisted_1$a, _cache[0] || (_cache[0] = [
    createStaticVNode('<g><g><path d="M103.622,0L27.5981,0C12.355,0,0,12.3648,0,27.6155L0,147.384C0,162.637,12.357,175,27.5981,175L122.402,175C137.645,175,150,162.635,150,147.384L150,46.4069C150,40.1874,147.532,34.2239,143.136,29.8274L120.191,6.86822C115.795,2.47051,109.835,-0.00000298153,103.622,0Z" fill="currentColor" fill-opacity="1" style="mix-blend-mode:passthrough;"></path></g><g><path d="M143.13604835205078,29.82753037600517L120.19134835205078,6.868310376005173C116.89934835205078,3.5744803760051727,112.70154835205078,1.3364743760051727,108.13314835205078,0.43973037600517273L108.13314835205078,26.20873037600517C108.13314835205078,34.39003037600517,114.76074835205078,41.02183037600517,122.93694835205079,41.02183037600517L149.37124835205077,41.02183037600517C148.37224835205078,36.783330376005175,146.21324835205078,32.907030376005174,143.13604835205078,29.82753037600517ZM78.17804835205078,58.99253037600517L68.11558835205078,69.06143037600518C66.59049835205079,70.58743037600517,66.59049835205079,73.06123037600517,68.11558835205078,74.58723037600517C69.64067835205078,76.11333037600517,72.11285835205078,76.11333037600517,73.63794835205078,74.58723037600517L83.70044835205078,64.51843037600517C88.81854835205078,59.39703037600517,97.14504835205078,59.39703037600517,102.26324835205078,64.51843037600517C107.38134835205078,69.63973037600518,107.38134835205078,77.97153037600518,102.26324835205078,83.09293037600517L92.20074835205078,93.16173037600517C87.08254835205078,98.28313037600518,78.75604835205078,98.28313037600518,73.63794835205078,93.16173037600517C73.06929835205078,92.59283037600517,72.55419835205078,91.97273037600517,72.09918835205079,91.30933037600518C70.88067835205078,89.52933037600518,68.44950835205078,89.07403037600517,66.67055835205078,90.29523037600518C64.88965895205078,91.51653037600518,64.43662135205078,93.94723037600517,65.65708535205079,95.72733037600517C66.37959835205078,96.78243037600517,67.20756835205079,97.77893037600518,68.11558835205078,98.68753037600517C76.27804835205077,106.85473037600518,89.56064835205078,106.85473037600518,97.72504835205078,98.68753037600517L107.78754835205078,88.61873037600517C115.95004835205077,80.45113037600517,115.95004835205077,67.16013037600517,107.78754835205078,58.99063037600517C99.62314835205078,50.82303037600517,86.34054835205077,50.82303037600517,78.17804835205078,58.99253037600517Z" fill="#000000" fill-opacity="0.20000000298023224" style="mix-blend-mode:passthrough;"></path></g><g><path d="M76.36005356445312,109.01229274902343L66.29765356445313,119.08109274902344C61.17945356445313,124.20249274902343,52.852953564453124,124.20249274902343,47.734853564453125,119.08109274902344C42.616683564453126,113.95969274902345,42.616683564453126,105.62799274902343,47.734853564453125,100.50659274902344L57.797353564453125,90.43779274902343C62.915453564453124,85.31642274902343,71.24195356445313,85.31642274902343,76.36005356445312,90.43779274902343C76.89905356445313,90.97709274902344,77.39115356445313,91.56519274902344,77.82465356445311,92.18469274902344C79.06075356445312,93.95299274902344,81.49585356445313,94.38289274902344,83.26305356445312,93.14599274902343C85.03025356445312,91.90909274902344,85.45985356445313,89.47249274902344,84.22375356445312,87.70418274902343C83.53055356445313,86.71156274902344,82.74165356445312,85.77365274902344,81.88245356445313,84.91390274902344C73.71995356445314,76.74629274902344,60.43745356445312,76.74629274902344,52.272953564453125,84.91390274902344L42.21050356445313,94.98269274902344C34.048043564453124,103.15039274902344,34.048043564453124,116.44129274902343,42.21050356445313,124.60889274902344C50.37295356445313,132.77649274902345,63.65555356445313,132.77649274902345,71.81995356445313,124.60889274902344L81.88245356445313,114.54009274902344C83.40755356445312,113.01399274902343,83.40755356445312,110.54029274902344,81.88245356445313,109.01419274902344C80.35735356445312,107.48619274902345,77.88515356445313,107.48619274902345,76.36005356445312,109.01229274902343Z" fill="#29A3D3" fill-opacity="1" style="mix-blend-mode:passthrough;"></path></g><g><path d="M107.78559522705078,56.64769791503906C99.62309522705078,48.480087915039064,86.34049522705078,48.480087915039064,78.17609522705078,56.64769791503906L68.11363522705078,66.71648791503907C66.58854522705079,68.24258791503907,66.58854522705079,70.71628791503906,68.11363522705078,72.24238791503906C69.63872522705078,73.76838791503906,72.11090522705078,73.76838791503906,73.63599522705078,72.24238791503906L83.69849522705078,62.173587915039064C88.81659522705078,57.05217791503906,97.14309522705078,57.05217791503906,102.26129522705078,62.173587915039064C107.37939522705078,67.29488791503906,107.37939522705078,75.62668791503907,102.26129522705078,80.74798791503906L92.19879522705078,90.81688791503906C87.08059522705078,95.93828791503907,78.75409522705078,95.93828791503907,73.63599522705078,90.81688791503906C73.06733522705078,90.24798791503906,72.55223522705079,89.62788791503905,72.09723522705079,88.96448791503906C70.87872522705078,87.18438791503905,68.44755522705078,86.72918791503906,66.66860522705078,87.95038791503907C64.88770592705077,89.17158791503905,64.43466822705078,91.60238791503906,65.65513222705079,93.38238791503906C66.37764522705078,94.43758791503906,67.20561522705079,95.43408791503907,68.11363522705078,96.34268791503906C76.27609522705077,104.51028791503907,89.55869522705078,104.51028791503907,97.72309522705078,96.34268791503906L107.78559522705078,86.27388791503907C115.94999522705078,78.10628791503906,115.94999522705078,64.81528791503906,107.78559522705078,56.64769791503906Z" fill="#FFFFFF" fill-opacity="1" style="mix-blend-mode:passthrough;"></path></g><g><path d="M76.36005356445312,106.66752803955077L66.29765356445313,116.73632803955078C61.17945356445313,121.85772803955078,52.852953564453124,121.85772803955078,47.734853564453125,116.73632803955078C42.616683564453126,111.61492803955079,42.616683564453126,103.28322803955078,47.734853564453125,98.16182803955078L57.797353564453125,88.09302803955077C62.915453564453124,82.97165803955077,71.24195356445313,82.97165803955077,76.36005356445312,88.09302803955077C76.89905356445313,88.63232803955079,77.39115356445313,89.22042803955078,77.82465356445311,89.83992803955078C79.06075356445312,91.60822803955078,81.49585356445313,92.03812803955078,83.26305356445312,90.80122803955078C85.03025356445312,89.56432803955079,85.45985356445313,87.12772803955079,84.22375356445312,85.35941803955077C83.53055356445313,84.36679803955079,82.74165356445312,83.42888803955078,81.88245356445313,82.56913803955078C73.71995356445314,74.40152803955078,60.43745356445312,74.40152803955078,52.272953564453125,82.56913803955078L42.21050356445313,92.63792803955079C34.048043564453124,100.80562803955078,34.048043564453124,114.09652803955078,42.21050356445313,122.26412803955078C50.37295356445313,130.4317280395508,63.65555356445313,130.4317280395508,71.81995356445313,122.26412803955078L81.88245356445313,112.19532803955079C83.40755356445312,110.66922803955077,83.40755356445312,108.19552803955078,81.88245356445313,106.66942803955078C80.35735356445312,105.14142803955079,77.88515356445313,105.14142803955079,76.36005356445312,106.66752803955077Z" fill="#FFFFFF" fill-opacity="1" style="mix-blend-mode:passthrough;"></path></g></g>', 1)
  ]));
}
var link = _export_sfc(_sfc_main$a, [["render", _sfc_render$9]]);
var _sfc_main$9 = {};
var _hoisted_1$9 = {
  xmlns: "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink",
  fill: "none",
  version: "1.1",
  width: "1em",
  height: "1em",
  viewBox: "0 0 150 175"
};
function _sfc_render$8(_ctx, _cache) {
  return openBlock(), createElementBlock("svg", _hoisted_1$9, _cache[0] || (_cache[0] = [
    createBaseVNode("g", null, [
      createBaseVNode("g", null, [
        createBaseVNode("path", {
          d: "M103.622,0L27.5981,0C12.355,0,0,12.3648,0,27.6155L0,147.384C0,162.637,12.357,175,27.5981,175L122.402,175C137.645,175,150,162.635,150,147.384L150,46.405C150,40.1855,147.532,34.2219,143.136,29.8255L120.191,6.86627C115.797,2.46982,109.837,0,103.622,0Z",
          fill: "currentColor",
          "fill-opacity": "1",
          style: { "mix-blend-mode": "passthrough" }
        })
      ]),
      createBaseVNode("g", null, [
        createBaseVNode("path", {
          d: "M143.6847224914551,29.348195451831817L120.64612249145507,6.751235451831818C117.34072249145508,3.5093754518318176,113.12572249145508,1.3066904518318176,108.53872249145508,0.4240954518318176L108.53872249145508,25.78649545183182C108.53872249145508,33.83869545183182,115.19342249145508,40.36589545183182,123.40292249145507,40.36589545183182L149.94502249145506,40.36589545183182C148.94202249145508,36.19419545183182,146.77402249145507,32.379095451831816,143.6847224914551,29.348195451831817ZM101.86832249145507,56.54919545183182C100.65262249145508,56.54919545183182,99.45662249145508,57.010695451831815,98.55852249145508,57.88189545183182L75.34352249145508,80.39609545183181L51.96971249145508,57.87229545183182C50.61767249145508,56.56899545183182,48.60014249145508,56.189195451831814,46.85221249145508,56.908795451831814C45.10387249145508,57.62709545183182,43.96602249145508,59.304995451831815,43.96602249145508,61.16469545183182L43.96602249145508,115.86109545183182C43.96602249145508,118.40909545183182,46.073802491455076,120.47609545183182,48.67177249145508,120.47609545183182C51.26973249145508,120.47609545183182,53.37751249145508,118.40909545183182,53.37751249145508,115.86109545183182L53.37751249145508,72.16889545183182L72.05542249145508,90.16949545183182C73.89062249145508,91.93689545183182,76.83372249145508,91.93309545183182,78.66112249145507,90.15989545183182L97.16052249145508,72.21889545183181L97.16052249145508,115.73409545183182C97.16052249145508,118.28209545183182,99.26832249145508,120.34909545183181,101.86632249145508,120.34909545183181C104.46432249145508,120.34909545183181,106.57202249145507,118.28209545183182,106.57202249145507,115.73409545183182L106.57202249145507,61.16469545183182C106.57202249145507,59.303095451831815,105.43092249145508,57.62229545183182,103.68002249145508,56.90489545183182C103.10582249145509,56.670595451831815,102.49012249145508,56.549695451831816,101.86832249145507,56.54919545183182Z",
          fill: "#000000",
          "fill-opacity": "0.20000000298023224",
          style: { "mix-blend-mode": "passthrough" }
        })
      ]),
      createBaseVNode("g", { transform: "matrix(1,0,0,-1,0,236)" }, [
        createBaseVNode("path", {
          d: "M101.3418,183C100.1379,183,98.9534,182.5307,98.0641,181.6449L75.0738,158.7528L51.92622,181.65460000000002C50.58726,182.9798,48.58926,183.36599999999999,46.85825,182.6343C45.12683,181.9039,44,180.1979,44,178.30700000000002L44,122.693C44,120.10207,46.08738,118,48.66019,118C51.23301,118,53.32039,120.10207,53.32039,122.693L53.32039,167.1181L71.8175,148.8154C73.635,147.01839999999999,76.5495,147.0223,78.3592,148.8252L96.6796,167.0672L96.6796,122.82205C96.6796,120.23113,98.767,118.129058,101.3398,118.129058C103.9126,118.129058,106,120.23113,106,122.82205L106,178.30700000000002C106,180.1998,104.8699,181.90879999999999,103.13589999999999,182.63819999999998C102.5673,182.8764,101.9576,182.99939999999998,101.3418,183Z",
          fill: "#FFFFFF",
          "fill-opacity": "1",
          style: { "mix-blend-mode": "passthrough" }
        })
      ])
    ], -1)
  ]));
}
var mark = _export_sfc(_sfc_main$9, [["render", _sfc_render$8]]);
var _sfc_main$8 = {};
var _hoisted_1$8 = {
  xmlns: "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink",
  fill: "none",
  version: "1.1",
  width: "1em",
  height: "1em",
  viewBox: "0 0 150 175"
};
function _sfc_render$7(_ctx, _cache) {
  return openBlock(), createElementBlock("svg", _hoisted_1$8, _cache[0] || (_cache[0] = [
    createBaseVNode("g", null, [
      createBaseVNode("g", null, [
        createBaseVNode("path", {
          d: "M103.622,0L27.5981,0C12.355,0,0,12.3648,0,27.6155L0,147.384C0,162.637,12.357,175,27.5981,175L122.402,175C137.645,175,150,162.635,150,147.384L150,46.405C150,40.1855,147.532,34.2219,143.136,29.8255L120.191,6.86627C115.797,2.46982,109.837,0,103.622,0Z",
          fill: "currentColor",
          "fill-opacity": "1",
          style: { "mix-blend-mode": "passthrough" }
        })
      ]),
      createBaseVNode("g", null, [
        createBaseVNode("path", {
          d: "M143.13620864868165,29.825575939702986L120.19140864868164,6.866355939702988C116.89940864868164,3.5725259397029876,112.70150864868164,1.3345169397029877,108.13320864868165,0.43777593970298767L108.13320864868165,26.206775939702986C108.13320864868165,34.388075939702986,114.76080864868165,41.019875939702985,122.93690864868164,41.019875939702985L149.37120864868166,41.019875939702985C148.37120864868166,36.781675939702986,146.21220864868164,32.905575939702985,143.13620864868165,29.825575939702986ZM101.77890864868164,95.86997593970298C97.32860864868164,95.86997593970298,92.91740864868164,96.51677593970298,88.46900864868164,97.35497593970298C83.22200864868165,92.51687593970298,78.77170864868164,86.80347593970299,75.38760864868163,80.441375939703C79.00020864868165,68.59437593970299,79.18960864868164,60.55767593970299,76.45190864868164,56.74747593970299C75.19620864868165,55.07097593970299,73.10480864868164,54.004075939702986,70.97640864868164,54.004075939702986C68.23860864868163,53.81457593970299,65.69030864868164,55.07097593970299,64.43470864868164,57.39417593970299C60.63270864868164,63.75637593970299,66.14530864868163,76.25007593970298,68.69360864868165,81.31677593970299C65.76450864868164,90.42027593970299,62.15190864868164,99.10567593970299,57.51410864868164,107.56277593970299C37.436047648681644,116.24777593970299,37.01620864868164,121.54077593970298,37.01620864868164,123.44677593970299C37.01620864868164,125.76977593970298,38.27181864868164,128.092775939703,40.59167864868164,129.159775939703C41.42745864868164,129.76977593970298,42.68306864868164,129.997775939703,43.74731864868164,129.997775939703C49.03340864868164,129.997775939703,55.155208648681636,124.05577593970298,61.69690864868164,112.40077593970298C69.94920864868163,109.01077593970298,78.16250864868164,106.26677593970298,86.83460864868164,104.36377593970299C91.28490864868164,108.17177593970298,96.76040864868165,110.30577593970298,102.46440864868164,110.72577593970298C106.07690864868164,110.72577593970298,113.03650864868165,110.72577593970298,112.96030864868165,103.48877593970299C113.18880864868164,100.74477593970299,111.70470864868165,96.09857593970298,101.77890864868164,95.86997593970298ZM44.03437864868164,123.58877593970298L43.39777864868164,123.81777593970298C45.27240864868164,121.07077593970298,47.74460864868164,118.93277593970299,50.89240864868164,117.63577593970298C49.24430864868164,120.42177593970298,46.95762864868164,122.51977593970298,44.03437864868164,123.58877593970298ZM69.92580864868164,60.60067593970299C70.12500864868164,60.37407593970299,70.54480864868164,60.141475939702985,70.78500864868164,60.141475939702985L71.48210864868165,60.37407593970299C72.56000864868165,63.971275939702984,72.56000864868165,67.76007593970299,71.24190864868164,71.32017593970299C69.68760864868165,67.94767593970299,69.04900864868165,64.16087593970299,69.92580864868164,60.60067593970299ZM80.88850864868164,101.61677593970299C76.27810864868164,102.69177593970299,71.21260864868164,104.18977593970298,66.60220864868164,105.87777593970299L66.12380864868165,106.06577593970299L66.18630864868165,105.68677593970298C68.49250864868164,101.00277593970299,70.60730864868164,96.08687593970299,72.49760864868165,91.172575939703L72.72410864868164,90.69387593970299L72.95260864868163,90.98107593970299C75.29580864868164,94.59007593970298,78.26400864868164,98.31047593970298,81.43920864868164,101.49777593970299L80.88850864868164,101.61677593970299ZM102.59710864868164,104.26977593970298C100.47450864868165,104.084775939703,98.39090864868163,103.67577593970299,96.27020864868163,102.63877593970298C98.16440864868164,102.22977593970299,99.83200864868164,102.22977593970299,101.72620864868163,102.22977593970299C105.93240864868164,102.22977593970299,106.76620864868164,103.26977593970298,106.80340864868164,103.861775939703C105.55170864868164,104.26977593970298,104.07340864868164,104.492775939703,102.59710864868164,104.26977593970298Z",
          fill: "#000000",
          "fill-opacity": "0.20000000298023224",
          style: { "mix-blend-mode": "passthrough" }
        })
      ]),
      createBaseVNode("g", null, [
        createBaseVNode("path", {
          d: "M101.72420864868164,99.88526478271484C99.83010864868163,99.88526478271484,98.16240864868163,99.88526478271484,96.26830864868164,100.29366478271484C98.39090864868163,101.33316478271485,100.47450864868165,101.73956478271484,102.59520864868163,101.92526478271483C104.07340864868164,102.14796478271484,105.55160864868164,101.92526478271483,106.80140864868164,101.51686478271483C106.76430864868163,100.92476478271485,105.93040864868163,99.88526478271484,101.72420864868164,99.88526478271484ZM72.95250864868164,88.63626478271485L72.72400864868163,88.34896478271484L72.49750864868165,88.82776478271484C70.60730864868164,93.74196478271485,68.49050864868164,98.65816478271483,66.18630864868165,103.34186478271485L66.12380864868165,103.72096478271484L66.60220864868164,103.53336478271484C71.21260864868164,101.84316478271484,76.27800864868163,100.34646478271485,80.88850864868164,99.27176478271485L81.43720864868163,99.15256478271485C78.26400864868164,95.96366478271484,75.29580864868164,92.24526478271484,72.95250864868164,88.63626478271485ZM71.48410864868164,58.02720478271485L70.78690864868165,57.794684782714846C70.54670864868164,57.794684782714846,70.12690864868165,58.02720478271485,69.92770864868163,58.25386478271484C69.04900864868165,61.81396478271485,69.68750864868164,65.60086478271484,71.24580864868165,68.97146478271485C72.56200864868164,65.41326478271485,72.56200864868164,61.626434782714846,71.48410864868164,58.02720478271485ZM43.39776864868164,121.47276478271485L44.03435864868164,121.24416478271485C46.95761864868164,120.17536478271484,49.24430864868164,118.07676478271485,50.89240864868164,115.29036478271485C47.74460864868164,116.58786478271485,45.272398648681644,118.72556478271484,43.39776864868164,121.47276478271485ZM102.46430864868164,108.38116478271485C96.76040864868165,107.96296478271483,91.28490864868164,105.82926478271484,86.83460864868164,102.01896478271485C78.16440864868164,103.92416478271485,69.94920864868163,106.66556478271485,61.69690864868164,110.05566478271484C55.155208648681636,121.71116478271485,49.03340864868164,127.65316478271484,43.74730864868164,127.65316478271484C42.68306864868164,127.65316478271484,41.42745864868164,127.42456478271484,40.59167864868164,126.81496478271484C38.27181864868164,125.74806478271485,37.01620864868164,123.42486478271485,37.01620864868164,121.10156478271485C37.01620864868164,119.19646478271484,37.43409864868164,113.90306478271484,57.51410864868164,105.21766478271485C62.153908648681636,96.76086478271483,65.76640864868165,88.07546478271485,68.69360864868165,78.97186478271485C66.14530864868163,73.90516478271485,60.63070864868164,61.41149478271484,64.43470864868164,55.04935478271484C65.69030864868164,52.726074782714846,68.23670864868164,51.46967078271484,70.97640864868164,51.659206682714846C73.10680864868164,51.659206682714846,75.19820864868164,52.726074782714846,76.45180864868163,54.40259478271484C79.18960864868164,58.21088478271484,79.00020864868165,66.24956478271484,75.38760864868163,78.09646478271485C78.77170864868164,84.45866478271483,83.22200864868165,90.17206478271484,88.46900864868164,95.01016478271484C92.91930864868164,94.17186478271483,97.33060864868165,93.52506478271485,101.77890864868164,93.52506478271485C111.70470864868165,93.75366478271485,113.18680864868163,98.40026478271484,112.95840864868164,101.14366478271484C113.03650864868165,108.38116478271485,106.07690864868164,108.38116478271485,102.46430864868164,108.38116478271485Z",
          fill: "#FFFFFF",
          "fill-opacity": "1",
          style: { "mix-blend-mode": "passthrough" }
        })
      ])
    ], -1)
  ]));
}
var pdf = _export_sfc(_sfc_main$8, [["render", _sfc_render$7]]);
var _sfc_main$7 = {};
var _hoisted_1$7 = {
  xmlns: "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink",
  fill: "none",
  version: "1.1",
  width: "1em",
  height: "1em",
  viewBox: "0 0 150 175"
};
function _sfc_render$6(_ctx, _cache) {
  return openBlock(), createElementBlock("svg", _hoisted_1$7, _cache[0] || (_cache[0] = [
    createBaseVNode("g", null, [
      createBaseVNode("g", null, [
        createBaseVNode("path", {
          d: "M103.622,0.00000223615L27.5981,0.00000223615C12.355,0.00000223615,0,12.3648,0,27.6155L0,147.384C0,162.637,12.357,175,27.5981,175L122.402,175C137.645,175,150,162.635,150,147.384L150,46.4069C150,40.1874,147.532,34.2239,143.136,29.8274L120.191,6.86823C115.795,2.47051,109.835,7.45383e-7,103.622,0.00000223615Z",
          fill: "currentColor",
          "fill-opacity": "1",
          style: { "mix-blend-mode": "passthrough" }
        })
      ]),
      createBaseVNode("g", null, [
        createBaseVNode("path", {
          d: "M143.13607473144532,29.82753037600517L120.19137473144531,6.868310376005173C116.8993747314453,3.5744803760051727,112.70147473144532,1.3364713760051727,108.13317473144531,0.43973037600517273L108.13317473144531,26.20873037600517C108.13317473144531,34.39003037600517,114.76077473144531,41.02183037600517,122.93697473144532,41.02183037600517L149.37147473144532,41.02183037600517C148.37247473144532,36.783130376005175,146.21347473144533,32.90673037600517,143.13607473144532,29.82753037600517ZM83.59497473144532,55.578930376005175L49.29505473144531,55.578930376005175C46.707674731445316,55.578930376005175,44.60847473144531,57.67943037600517,44.60847473144531,60.268530376005174L44.60847473144531,119.42273037600518C44.60847473144531,122.01173037600518,46.707674731445316,124.11273037600517,49.29505473144531,124.11273037600517C51.88244473144531,124.11273037600517,53.981644731445314,122.01173037600518,53.981644731445314,119.42273037600518L53.981644731445314,103.88473037600517L83.59497473144532,103.88473037600517C96.90487473144532,103.88473037600517,107.73287473144532,93.05033037600518,107.73287473144532,79.73203037600517C107.73287473144532,66.41373037600518,96.90487473144532,55.578930376005175,83.59497473144532,55.578930376005175ZM83.59497473144532,94.50603037600517L53.981644731445314,94.50603037600517L53.981644731445314,64.95803037600517L83.59497473144532,64.95803037600517C91.73597473144531,64.95803037600517,98.35967473144531,71.58593037600517,98.35967473144531,79.73203037600517C98.35967473144531,87.87813037600517,91.73597473144531,94.50603037600517,83.59497473144532,94.50603037600517Z",
          fill: "#000000",
          "fill-opacity": "0.20000000298023224",
          style: { "mix-blend-mode": "passthrough" }
        })
      ]),
      createBaseVNode("g", null, [
        createBaseVNode("path", {
          d: "M83.59497473144532,53.23410415649414L49.29505473144531,53.23410415649414C46.707674731445316,53.23410415649414,44.60847473144531,55.334624156494144,44.60847473144531,57.92364415649414L44.60847473144531,117.07830415649414C44.60847473144531,119.66730415649414,46.707674731445316,121.76780415649414,49.29505473144531,121.76780415649414C51.88244473144531,121.76780415649414,53.981644731445314,119.66730415649414,53.981644731445314,117.07830415649414L53.981644731445314,101.54030415649413L83.59497473144532,101.54030415649413C96.90487473144532,101.54030415649413,107.73287473144532,90.70550415649414,107.73287473144532,77.38720415649414C107.73287473144532,64.06890415649414,96.90487473144532,53.23410415649414,83.59497473144532,53.23410415649414ZM83.59497473144532,92.16120415649414L53.981644731445314,92.16120415649414L53.981644731445314,62.61318415649414L83.59497473144532,62.61318415649414C91.73597473144531,62.61318415649414,98.35967473144531,69.24110415649415,98.35967473144531,77.38720415649414C98.35967473144531,85.53330415649414,91.73597473144531,92.16120415649414,83.59497473144532,92.16120415649414Z",
          fill: "#FFFFFF",
          "fill-opacity": "1",
          style: { "mix-blend-mode": "passthrough" }
        })
      ])
    ], -1)
  ]));
}
var ppt = _export_sfc(_sfc_main$7, [["render", _sfc_render$6]]);
var _sfc_main$6 = {};
var _hoisted_1$6 = {
  xmlns: "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink",
  fill: "none",
  version: "1.1",
  width: "1em",
  height: "1em",
  viewBox: "0 0 150 175"
};
function _sfc_render$5(_ctx, _cache) {
  return openBlock(), createElementBlock("svg", _hoisted_1$6, _cache[0] || (_cache[0] = [
    createBaseVNode("g", null, [
      createBaseVNode("g", null, [
        createBaseVNode("path", {
          d: "M103.622,0L27.5981,0C12.355,0,0,12.3648,0,27.6155L0,147.384C0,162.637,12.357,175,27.5981,175L122.402,175C137.645,175,150,162.635,150,147.384L150,46.4069C150,40.1874,147.532,34.2239,143.136,29.8274L120.191,6.86822C115.799,2.4707,109.839,-0.00000298153,103.622,0Z",
          fill: "currentColor",
          "fill-opacity": "1",
          style: { "mix-blend-mode": "passthrough" }
        })
      ]),
      createBaseVNode("g", null, [
        createBaseVNode("path", {
          d: "M143.13617915039063,29.825530376005172L120.19137915039063,6.8663503760051725C116.89947915039062,3.5738503760051725,112.70247915039063,1.3366073760051727,108.13517915039063,0.43973037600517273L108.13517915039063,26.20873037600517C108.13517915039063,34.39003037600517,114.76277915039063,41.02183037600517,122.93897915039062,41.02183037600517L149.37087915039064,41.02183037600517C148.37287915039065,36.782730376005176,146.21287915039062,32.90583037600517,143.13617915039063,29.825530376005172ZM66.64137915039063,91.54183037600517L49.033449150390624,81.97323037600518C46.162909150390625,80.62503037600517,43.79618415039062,81.87163037600517,43.770798150390625,84.74403037600517L43.59505197039063,105.53673037600517C43.57161995039063,108.40873037600517,45.89928915039062,111.86373037600518,48.769819150390624,113.21173037600518L66.37767915039063,122.77973037600518C69.24827915039063,124.12873037600517,71.61497915039062,122.88173037600517,71.64037915039063,120.00973037600517L71.81607915039062,99.21713037600517C71.83957915039062,96.34473037600517,69.51187915039063,92.89203037600517,66.64137915039063,91.54183037600517ZM102.39807915039063,76.15233037600517C105.64157915039063,73.96973037600517,105.82507915039062,70.67343037600517,102.80417915039062,68.82883037600517L80.15827915039063,57.82023037600517C76.96747915039063,56.169030376005175,74.18087915039062,56.03813037600517,70.33007915039062,58.04093037600517L47.578649150390625,68.96373037600517C44.33514315039063,71.14633037600517,44.15158515039062,74.44263037600517,47.17247915039062,76.28723037600517L69.03737915039062,88.07753037600517C72.05827915039063,89.92403037600518,76.51047915039062,89.87513037600517,80.42767915039062,87.85663037600517L102.39807915039063,76.15233037600517ZM100.96667915039063,81.58243037600518L81.99187915039062,91.73723037600517C79.12127915039062,93.08553037600517,76.79367915039063,96.54013037600517,76.81707915039063,99.41253037600518L76.99287915039062,120.59573037600518C77.01627915039063,123.46773037600518,79.38497915039062,124.71473037600518,82.25547915039063,123.36673037600518L101.23027915039063,113.21173037600518C104.10087915039063,111.86273037600517,106.42847915039061,108.40873037600517,106.40507915039063,105.53673037600517L106.22927915039062,84.35323037600517C106.20587915039061,81.48083037600517,103.83717915039063,80.23423037600517,100.96667915039063,81.58243037600518Z",
          fill: "#000000",
          "fill-opacity": "0.20000000298023224",
          style: { "mix-blend-mode": "passthrough" }
        })
      ]),
      createBaseVNode("g", null, [
        createBaseVNode("path", {
          d: "M66.64137915039063,89.39237504882811L49.03343915039063,79.82377504882813C46.162909150390625,78.47557504882812,43.79618415039062,79.72217504882812,43.770798150390625,82.59457504882812L43.59505197039063,103.38677504882813C43.57162005039063,106.25917504882813,45.89928915039062,109.71377504882813,48.769819150390624,111.06197504882812L66.37767915039063,120.63057504882812C69.24827915039063,121.97887504882813,71.61497915039062,120.73217504882813,71.64037915039063,117.85987504882812L71.81607915039062,97.06767504882812C71.83957915039062,94.19527504882812,69.51187915039063,90.74257504882812,66.64137915039063,89.39237504882811ZM102.39807915039063,74.00287504882812C105.64147915039062,71.82027504882812,105.82507915039062,68.52397504882812,102.80417915039062,66.67937504882812L80.15827915039063,55.67071504882813C76.96747915039063,54.019600048828124,74.18087915039062,53.888687048828125,70.33007915039062,55.891515048828126L47.578649150390625,66.81427504882812C44.33514315039063,68.99687504882813,44.15158515039062,72.29317504882812,47.17247915039062,74.13777504882813L69.03737915039062,85.92807504882812C72.05827915039063,87.77457504882813,76.51047915039062,87.72567504882812,80.42767915039062,85.70717504882813L102.39807915039063,74.00287504882812ZM106.22927915039062,82.20377504882812C106.20587915039061,79.33137504882812,103.83717915039063,78.08477504882812,100.96667915039063,79.43297504882813L81.99187915039062,89.58787504882812C79.12127915039062,90.93607504882812,76.79367915039063,94.39067504882811,76.81707915039063,97.26307504882813L76.99287915039062,118.44607504882812C77.01627915039063,121.31847504882812,79.38497915039062,122.56507504882812,82.25547915039063,121.21687504882813L101.23027915039063,111.06197504882812C104.10077915039062,109.71377504882813,106.42847915039061,106.25917504882813,106.40507915039063,103.38677504882813L106.22927915039062,82.20377504882812Z",
          fill: "#FFFFFF",
          "fill-opacity": "1",
          style: { "mix-blend-mode": "passthrough" }
        })
      ])
    ], -1)
  ]));
}
var three = _export_sfc(_sfc_main$6, [["render", _sfc_render$5]]);
var _sfc_main$5 = {};
var _hoisted_1$5 = {
  xmlns: "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink",
  fill: "none",
  version: "1.1",
  width: "1em",
  height: "1em",
  viewBox: "0 0 150 175"
};
function _sfc_render$4(_ctx, _cache) {
  return openBlock(), createElementBlock("svg", _hoisted_1$5, _cache[0] || (_cache[0] = [
    createBaseVNode("g", null, [
      createBaseVNode("g", null, [
        createBaseVNode("path", {
          d: "M103.622,0L27.5981,0C12.355,0,0,12.3648,0,27.6155L0,147.384C0,162.637,12.357,175,27.5981,175L122.402,175C137.645,175,150,162.635,150,147.384L150,46.4069C150,40.1874,147.532,34.2239,143.136,29.8274L120.191,6.86822C115.795,2.47051,109.835,-0.00000298153,103.622,0Z",
          fill: "currentColor",
          "fill-opacity": "1",
          style: { "mix-blend-mode": "passthrough" }
        })
      ]),
      createBaseVNode("g", null, [
        createBaseVNode("path", {
          d: "M143.163625,29.814453125L120.214825,6.865233125C116.922225,3.572843125,112.723525,1.335807125,108.154325,0.439453125L108.154325,26.197253125C108.154325,34.374953125,114.783225,41.003953125,122.960925,41.003953125L149.400625,41.003953125C148.401625,36.767253125,146.241625,32.892653125,143.163625,29.814453125ZM105.699225,62.048853125L75.957025,62.048853125C75.334625,61.921253125,74.692725,61.921253125,74.070325,62.048853125L44.328125,62.048853125C41.740235,62.048853125,39.640625,64.148453125,39.640625,66.736353125C39.640625,69.324253125,41.740235,71.423853125,44.328125,71.423853125L70.326225,71.423853125L70.326225,121.957453125C70.326225,124.544453125,72.425825,126.644453125,75.013725,126.644453125C77.60152500000001,126.644453125,79.701225,124.544453125,79.701225,121.957453125L79.701225,71.423853125L105.699225,71.423853125C108.287125,71.423853125,110.386725,69.324253125,110.386725,66.736353125C110.386725,64.148453125,108.287125,62.048853125,105.699225,62.048853125Z",
          fill: "#000000",
          "fill-opacity": "0.20000000298023224",
          style: { "mix-blend-mode": "passthrough" }
        })
      ]),
      createBaseVNode("g", null, [
        createBaseVNode("path", {
          d: "M105.699225,59.7050702L75.957025,59.7050702C75.334625,59.5774746,74.692725,59.5774746,74.070325,59.7050702L44.328125,59.7050702C41.740235,59.7050702,39.640625,61.804675,39.640625,64.392575C39.640625,66.980465,41.740235,69.080065,44.328125,69.080065L70.326225,69.080065L70.326225,119.613275C70.326225,122.201175,72.425825,124.300775,75.013725,124.300775C77.60152500000001,124.300775,79.701225,122.201175,79.701225,119.613275L79.701225,69.080065L105.699225,69.080065C108.287125,69.080065,110.386725,66.980465,110.386725,64.392575C110.386725,61.804675,108.287125,59.7050702,105.699225,59.7050702Z",
          fill: "#FFFFFF",
          "fill-opacity": "1",
          style: { "mix-blend-mode": "passthrough" }
        })
      ])
    ], -1)
  ]));
}
var txt = _export_sfc(_sfc_main$5, [["render", _sfc_render$4]]);
var _sfc_main$4 = {};
var _hoisted_1$4 = {
  xmlns: "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink",
  fill: "none",
  version: "1.1",
  width: "1em",
  height: "1em",
  viewBox: "0 0 150 175"
};
function _sfc_render$3(_ctx, _cache) {
  return openBlock(), createElementBlock("svg", _hoisted_1$4, _cache[0] || (_cache[0] = [
    createStaticVNode('<g><g><path d="M103.622,0L27.5981,0C12.355,0,0,12.3648,0,27.6155L0,147.384C0,162.637,12.357,175,27.5981,175L122.402,175C137.645,175,150,162.635,150,147.384L150,46.4069C150,40.1874,147.532,34.2239,143.136,29.8274L120.191,6.86822C115.795,2.47051,109.835,-0.00000298153,103.622,0Z" fill="currentColor" fill-opacity="1" style="mix-blend-mode:passthrough;"></path></g><g><path d="M143.16410000000002,29.814453125L120.2148,6.865233125C116.9222,3.572843125,112.7235,1.335807125,108.1543,0.439453125L108.1543,26.197253125C108.1543,34.374953125,114.7832,41.003953125,122.9609,41.003953125L149.4005,41.003953125C148.4015,36.767253125,146.2415,32.892653125,143.16410000000002,29.814453125ZM74.8945,45.259753125C58.8594,45.259753125,45.8125,58.306653125,45.8125,74.341753125C45.8125,76.789053125,47.79492,78.771453125,50.24219,78.771453125C52.68945,78.771453125,54.67187,76.789053125,54.67187,74.341753125C54.67187,63.191453125,63.7441,54.119153125,74.8945,54.119153125C80.291,54.119153125,85.3672,56.224653125,89.18950000000001,60.046853125C93.01169999999999,63.869153125,95.1172,68.947253125,95.1172,74.341753125C95.1172,78.464853125,93.8848,82.429653125,91.5547,85.808553125C89.27340000000001,89.113253125,86.1074,91.646453125,82.3945,93.128953125C75.1465,96.025353125,70.4648,102.875453125,70.4648,110.576453125L70.4648,110.900453125C70.4648,113.347453125,72.4473,115.330453125,74.8945,115.330453125C77.3418,115.330453125,79.32419999999999,113.347453125,79.32419999999999,110.900453125L79.32419999999999,110.576453125C79.32419999999999,106.517453125,81.8203,102.898453125,85.6836,101.355453125C91.0215,99.222653125,95.5723,95.585953125,98.8476,90.839853125C102.2031,85.976553125,103.97659999999999,80.271453125,103.97659999999999,74.341753125C103.97659999999999,66.580053125,100.94919999999999,59.277353125,95.4531,53.781253125C89.959,48.287153125,82.6562,45.259753125,74.8945,45.259753125Z" fill="#000000" fill-opacity="0.20000000298023224" style="mix-blend-mode:passthrough;"></path></g><g><path d="M72.6373915234375,133.99798798828124C75.65232152343751,135.25198798828126,79.1127115234375,133.82158798828124,80.3623115234375,130.80481798828126C81.6118115234375,127.78806798828126,80.1764115234375,124.32978798828125,77.1578415234375,123.08463798828124C74.1429215234375,121.83063898828125,70.6825415234375,123.26100798828125,69.4329535234375,126.27776798828125C68.1833715234375,129.29452798828126,69.6188065234375,132.75278798828126,72.6373915234375,133.99798798828124Z" fill="#9DC0C9" fill-opacity="1" style="mix-blend-mode:passthrough;"></path></g><g><path d="M95.572240625,51.3906275C90.076140625,45.8945275,82.775340625,42.8671875,75.013640625,42.8671875C58.978540625,42.8671875,45.931640625,55.9140875,45.931640625,71.9491875C45.931640625,74.3964875,47.914060625,76.37888749999999,50.361330625,76.37888749999999C52.808590625,76.37888749999999,54.791010625,74.3964875,54.791010625,71.9491875C54.791010625,60.7987875,63.863240625,51.7265575,75.013640625,51.7265575C80.410140625,51.7265575,85.486340625,53.8319875,89.30864062500001,57.6542875C93.13084062499999,61.4765875,95.236340625,66.5546875,95.236340625,71.9491875C95.236340625,76.0722875,94.003940625,80.0370875,91.673840625,83.4159875C89.39254062500001,86.7206875,86.226540625,89.25388749999999,82.513640625,90.7362875C75.265640625,93.6327875,70.583940625,100.4823875,70.583940625,108.1835875L70.583940625,108.5077875C70.583940625,110.9550875,72.566440625,112.9374875,75.013640625,112.9374875C77.460940625,112.9374875,79.44334062499999,110.9550875,79.44334062499999,108.5077875L79.44334062499999,108.1835875C79.44334062499999,104.1249875,81.939440625,100.5058875,85.802740625,98.9628875C91.140640625,96.83008749999999,95.691440625,93.1933875,98.966740625,88.4472875C102.322240625,83.5839875,104.09574062499999,77.87888749999999,104.09574062499999,71.9491875C104.09574062499999,64.1874875,101.06834062499999,56.8866875,95.572240625,51.3906275Z" fill="#FFFFFF" fill-opacity="1" style="mix-blend-mode:passthrough;"></path></g><g><path d="M80.919921875,126.15234375Q80.919921875,126.29733375,80.912821875,126.44214375Q80.905721875,126.58696375,80.891521875,126.73125375Q80.877221875,126.87554375,80.856021875,127.01896375Q80.834721875,127.16238375,80.806421875,127.30459375Q80.778121875,127.44679375,80.74292187500001,127.58744375Q80.707721875,127.72808375,80.665621875,127.86683375Q80.623521875,128.00558375,80.574621875,128.14209375Q80.525821875,128.27861375,80.470321875,128.41256375Q80.414821875,128.54651375,80.352821875,128.67758375Q80.290821875,128.80865375,80.222521875,128.93652375Q80.154121875,129.06439375,80.079621875,129.18876375Q80.005121875,129.31312375,79.924521875,129.43367375Q79.844021875,129.55423375,79.757621875,129.67069375Q79.671221875,129.78714375,79.579221875,129.89922375Q79.48732187499999,130.01130375,79.389921875,130.11873375Q79.292521875,130.22616375,79.190021875,130.32869375Q79.087491875,130.43119375,78.980061875,130.52859375Q78.872631875,130.62599375,78.760551875,130.71789375Q78.648471875,130.80989375000001,78.532021875,130.89629375Q78.415561875,130.98269375,78.295001875,131.06319375Q78.174451875,131.14379375,78.05009187499999,131.21829375Q77.925721875,131.29279375,77.79785187499999,131.36119375Q77.669981875,131.42949375,77.538911875,131.49149375Q77.407841875,131.55349375,77.273891875,131.60899375Q77.139941875,131.66449375,77.003421875,131.71329375Q76.866911875,131.76219375,76.728161875,131.80429375Q76.589411875,131.84639375,76.448771875,131.88159375Q76.308121875,131.91679375,76.165921875,131.94509375Q76.023721875,131.97339375,75.880291875,131.99469375Q75.736871875,132.01589375,75.592581875,132.03019375Q75.448291875,132.04439375,75.303471875,132.05149375Q75.158661875,132.05859375,75.013671875,132.05859375Q74.868681875,132.05859375,74.723861875,132.05149375Q74.579051875,132.04439375,74.434751875,132.03019375Q74.290461875,132.01589375,74.147041875,131.99469375Q74.003621875,131.97339375,73.861421875,131.94509375Q73.719211875,131.91679375,73.578571875,131.88159375Q73.437921875,131.84639375,73.299171875,131.80429375Q73.160431875,131.76219375,73.023911875,131.71329375Q72.887401875,131.66449375,72.753441875,131.60899375Q72.619491875,131.55349375,72.488421875,131.49149375Q72.357351875,131.42949375,72.229481875,131.36119375Q72.101611875,131.29279375,71.977251875,131.21829375Q71.852891875,131.14379375,71.732331875,131.06319375Q71.611781875,130.98269375,71.495321875,130.89629375Q71.378861875,130.80989375000001,71.266781875,130.71789375Q71.154701875,130.62599375,71.047271875,130.52859375Q70.939841875,130.43119375,70.837321875,130.32869375Q70.734801875,130.22616375,70.637431875,130.11873375Q70.540061875,130.01130375,70.448081875,129.89922375Q70.356101875,129.78714375,70.269731875,129.67069375Q70.183351875,129.55423375,70.102803875,129.43367375Q70.022251875,129.31312375,69.947711875,129.18876375Q69.873171875,129.06439375,69.804823875,128.93652375Q69.736475875,128.80865375,69.674484875,128.67758375Q69.612493875,128.54651375,69.557007875,128.41256375Q69.501522875,128.27861375,69.452676875,128.14209375Q69.403830875,128.00558375,69.361742875,127.86683375Q69.319654875,127.72808375,69.284424875,127.58744375Q69.249194875,127.44679375,69.220908875,127.30459375Q69.192622575,127.16239375,69.171348075,127.01896375Q69.150073575,126.87554375,69.135862075,126.73125375Q69.121650575,126.58696375,69.114536205,126.44214375Q69.107421875,126.29733375,69.107421875,126.15234375Q69.107421875,126.00735375,69.114536205,125.86253375Q69.121650575,125.71772375,69.135862075,125.57342375Q69.150073575,125.42913375,69.171348075,125.28571375Q69.192622575,125.14229375,69.220908875,125.00009375Q69.249194875,124.85788375,69.284424875,124.71724375Q69.319654875,124.57659375,69.361742875,124.43784375Q69.403830875,124.29910375,69.452676875,124.16258375Q69.501522875,124.02607375,69.557007875,123.89211375Q69.612493875,123.75816375,69.674484875,123.62709375Q69.736475875,123.49602375,69.804823875,123.36815375Q69.873171875,123.24028375,69.947711875,123.11592375Q70.022251875,122.99156375,70.102803875,122.87100375Q70.183351875,122.75045375,70.269731875,122.63399375Q70.356101875,122.51753375,70.448081875,122.40545375Q70.540061875,122.29337375,70.637431875,122.18594375Q70.734801875,122.07851375,70.837321875,121.97599375Q70.939841875,121.87347375,71.047271875,121.77610375Q71.154701875,121.67873375,71.266781875,121.58675375Q71.378861875,121.49477375,71.495321875,121.40840375Q71.611781875,121.32202375,71.732331875,121.24147575Q71.852891875,121.16092375,71.977251875,121.08638375Q72.101611875,121.01184375,72.229481875,120.94349575Q72.357351875,120.87514775,72.488421875,120.81315675Q72.619491875,120.75116575,72.753441875,120.69567975Q72.887401875,120.64019475,73.023911875,120.59134875Q73.160431875,120.54250275,73.299171875,120.50041475Q73.437921875,120.45832675,73.578571875,120.42309675Q73.719211875,120.38786675,73.861421875,120.35958075Q74.003621875,120.33129445,74.147041875,120.31001995Q74.290461875,120.28874545,74.434751875,120.27453395Q74.579051875,120.26032245,74.723861875,120.25320808Q74.868681875,120.24609375,75.013671875,120.24609375Q75.158661875,120.24609375,75.303471875,120.25320808Q75.448291875,120.26032245,75.592581875,120.27453395Q75.736871875,120.28874545,75.880291875,120.31001995Q76.023711875,120.33129445,76.165921875,120.35958075Q76.308121875,120.38786675,76.448771875,120.42309675Q76.589411875,120.45832675,76.728161875,120.50041475Q76.866911875,120.54250275,77.003421875,120.59134875Q77.139941875,120.64019475,77.273891875,120.69567975Q77.407841875,120.75116575,77.538911875,120.81315675Q77.669981875,120.87514775,77.79785187499999,120.94349575Q77.925721875,121.01184375,78.05009187499999,121.08638375Q78.174451875,121.16092375,78.295001875,121.24147575Q78.415561875,121.32202375,78.532021875,121.40840375Q78.648471875,121.49477375,78.760551875,121.58675375Q78.872631875,121.67873375,78.980061875,121.77610375Q79.087491875,121.87347375,79.190021875,121.97599375Q79.292521875,122.07851375,79.389921875,122.18594375Q79.48732187499999,122.29337375,79.579221875,122.40545375Q79.671221875,122.51753375,79.757621875,122.63399375Q79.844021875,122.75045375,79.924521875,122.87100375Q80.005121875,122.99156375,80.079621875,123.11592375Q80.154121875,123.24028375,80.222521875,123.36815375Q80.290821875,123.49602375,80.352821875,123.62709375Q80.414821875,123.75816375,80.470321875,123.89211375Q80.525821875,124.02607375,80.574621875,124.16258375Q80.623521875,124.29910375,80.665621875,124.43784375Q80.707721875,124.57659375,80.74292187500001,124.71724375Q80.778121875,124.85788375,80.806421875,125.00009375Q80.834721875,125.14229375,80.856021875,125.28571375Q80.877221875,125.42913375,80.891521875,125.57342375Q80.905721875,125.71772375,80.912821875,125.86253375Q80.919921875,126.00735375,80.919921875,126.15234375Z" fill="#FFFFFF" fill-opacity="1" style="mix-blend-mode:passthrough;"></path></g></g>', 1)
  ]));
}
var unknown = _export_sfc(_sfc_main$4, [["render", _sfc_render$3]]);
var _sfc_main$3 = {};
var _hoisted_1$3 = {
  xmlns: "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink",
  fill: "none",
  version: "1.1",
  width: "1em",
  height: "1em",
  viewBox: "0 0 150 175"
};
function _sfc_render$2(_ctx, _cache) {
  return openBlock(), createElementBlock("svg", _hoisted_1$3, _cache[0] || (_cache[0] = [
    createBaseVNode("g", null, [
      createBaseVNode("g", null, [
        createBaseVNode("path", {
          d: "M103.622,0L27.5981,0C12.355,0,0,12.3648,0,27.6155L0,147.384C0,162.637,12.357,175,27.5981,175L122.402,175C137.645,175,150,162.635,150,147.384L150,46.405C150,40.1855,147.532,34.2219,143.136,29.8255L120.191,6.86627C115.797,2.46982,109.837,0,103.622,0Z",
          fill: "currentColor",
          "fill-opacity": "1",
          style: { "mix-blend-mode": "passthrough" }
        })
      ]),
      createBaseVNode("g", null, [
        createBaseVNode("path", {
          d: "M143.6605,30.808L120.3316,6.73925C116.9845,3.28624,112.7164,0.940079,108.0716,0L108.0716,27.0143C108.0716,35.591,114.8101,42.5433,123.1232,42.5433L150,42.5433C148.98399999999998,38.1003,146.788,34.0369,143.6605,30.808ZM72.9483,74.8181L63.1549,63L52.06524,63L61.8587,74.8181L72.9483,74.8181ZM101.7527,74.8181L91.95920000000001,63L80.86959999999999,63L90.663,74.8181L101.7527,74.8181ZM87.3506,74.8181L77.55709999999999,63L66.4674,63L76.26089999999999,74.8181L87.3506,74.8181ZM105.9293,63L95.27170000000001,63L105.0652,74.8181L110.25,74.8181L110.25,67.4318C110.25,64.9204,108.3777,63,105.9293,63ZM48.75271,63L48.32065,63C45.87232,63,44,64.9204,44,67.4318L44,74.8181L58.5462,74.8181L48.75271,63ZM44,123.568C44,126.08,45.87232,128,48.32065,128L105.9293,128C108.3777,128,110.25,126.08,110.25,123.568L110.25,77.7727L44.00000388806,77.7727L44,123.568ZM67.0435,91.0682C67.0435,88.5568,69.0598,87.375,71.3642,87.375C72.0842,87.375,72.9483,87.5227,73.6685,87.9659L90.0869,97.7159C92.9674,99.3409,92.9674,103.477,90.0869,105.102L73.6685,114.852C72.9483,115.295,72.2283,115.443,71.3642,115.443C69.0598,115.443,67.0435,114.261,67.0435,111.75L67.0435,91.0682Z",
          fill: "#000000",
          "fill-opacity": "0.20000000298023224",
          style: { "mix-blend-mode": "passthrough" }
        })
      ]),
      createBaseVNode("g", null, [
        createBaseVNode("path", {
          d: "M72.4022,71.8181L62.7935,60.000000528314L51.91306,60.000000528314L61.5218,71.8181L72.4022,71.8181ZM100.663,71.8181L91.0543,60.000000528314L80.1739,60.000000528314L89.7826,71.8181L100.663,71.8181ZM86.5326,71.8181L76.9239,60.000000528314L66.0435,60.000000528314L75.6522,71.8181L86.5326,71.8181ZM104.76089999999999,60L94.3043,60L103.913,71.8181L109,71.8181L109,64.43182C109,61.92043,107.163,60.000000528314,104.76089999999999,60ZM48.66304,60L48.23913,60C45.837,60,44,61.92043,44,64.43182L44,71.8181L58.2718,71.8181L48.66304,60ZM44,120.56819999999999C44,123.0796,45.837,125,48.23913,125L104.76089999999999,125C107.163,125,109,123.0796,109,120.56819999999999L109,74.7727L44.00000202137,74.7727L44,120.56819999999999ZM66.6087,88.0682C66.6087,85.5568,68.5869,84.375,70.8479,84.375C71.5543,84.375,72.4022,84.5227,73.1087,84.9659L89.2174,94.7159C92.0435,96.3409,92.0435,100.4773,89.2174,102.1023L73.1087,111.8523C72.4022,112.2955,71.6957,112.44319999999999,70.8479,112.44319999999999C68.5869,112.44319999999999,66.6087,111.26140000000001,66.6087,108.75L66.6087,88.0682Z",
          fill: "#FFFFFF",
          "fill-opacity": "1",
          style: { "mix-blend-mode": "passthrough" }
        })
      ])
    ], -1)
  ]));
}
var video = _export_sfc(_sfc_main$3, [["render", _sfc_render$2]]);
var _sfc_main$2 = {};
var _hoisted_1$2 = {
  xmlns: "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink",
  fill: "none",
  version: "1.1",
  width: "1em",
  height: "1em",
  viewBox: "0 0 150 175"
};
function _sfc_render$1(_ctx, _cache) {
  return openBlock(), createElementBlock("svg", _hoisted_1$2, _cache[0] || (_cache[0] = [
    createBaseVNode("g", null, [
      createBaseVNode("g", null, [
        createBaseVNode("path", {
          d: "M103.622,0L27.5981,0C12.355,0,0,12.3648,0,27.6155L0,147.384C0,162.637,12.357,175,27.5981,175L122.402,175C137.645,175,150,162.635,150,147.384L150,46.405C150,40.1855,147.532,34.2219,143.136,29.8255L120.191,6.86627C115.797,2.46982,109.837,0,103.622,0Z",
          fill: "currentColor",
          "fill-opacity": "1",
          style: { "mix-blend-mode": "passthrough" }
        })
      ]),
      createBaseVNode("g", null, [
        createBaseVNode("path", {
          d: "M101.48797106933594,57.88857593970299C98.90057106933594,57.88857593970299,96.80137106933594,59.989075939702985,96.80137106933594,62.57807593970299L96.80137106933594,106.78877593970299L78.37727106933593,88.56017593970299C76.55537106933593,86.758575939703,73.62427106933593,86.75267593970298,71.79847106933593,88.55037593970299L53.19664106933594,106.83977593970299L53.19664106933594,62.44917593970299C53.19664106933594,59.86007593970299,51.097441069335936,57.75957593970299,48.51005106933594,57.75957593970299C45.92267106933594,57.75957593970299,43.82347106933594,59.86007593970299,43.82347106933594,62.44917593970299L43.82347106933594,118.02177593970299C43.82347106933594,119.91177593970299,44.95606106933594,121.61577593970298,46.69791106933594,122.346775939703C48.438791069335934,123.07677593970298,50.44772106933594,122.69077593970299,51.79457106933594,121.367775939703L75.07327106933593,98.48237593970299L98.19377106933594,121.35777593970299C99.07137106933594,122.22577593970298,100.25587106933594,122.712775939703,101.48997106933594,122.71177593970299C102.09727106933593,122.71177593970299,102.71037106933593,122.59277593970299,103.29427106933593,122.349775939703C105.03867106933595,121.62177593970299,106.17457106933594,119.91477593970299,106.17457106933594,118.02177593970299L106.17457106933594,62.57807593970299C106.17457106933594,59.989075939702985,104.07737106933594,57.88857593970299,101.48797106933594,57.88857593970299ZM143.13607106933594,29.825575939702986L120.19137106933594,6.866355939702988C116.89937106933594,3.5725259397029876,112.70147106933594,1.3345169397029877,108.13317106933594,0.43777593970298767L108.13317106933594,26.206775939702986C108.13317106933594,34.388075939702986,114.76077106933593,41.019875939702985,122.93687106933594,41.019875939702985L149.37147106933594,41.019875939702985C148.37247106933594,36.78137593970299,146.21347106933592,32.90507593970299,143.13607106933594,29.825575939702986Z",
          fill: "#000000",
          "fill-opacity": "0.20000000298023224",
          style: { "mix-blend-mode": "passthrough" }
        })
      ]),
      createBaseVNode("g", null, [
        createBaseVNode("path", {
          d: "M101.48997106933594,120.36685296020508C100.27927106933595,120.36685296020508,99.08807106933594,119.89785296020507,98.19367106933593,119.01275296020508L75.07327106933593,96.13755296020508L51.79457106933594,119.02255296020508C50.44803106933594,120.34665296020508,48.43872106933594,120.73265296020507,46.69791106933594,120.00145296020507C44.956681069335936,119.27155296020507,43.82347106933594,117.56685296020507,43.82347106933594,115.67735296020507L43.82347106933594,60.10429296020508C43.82347106933594,57.51527296020508,45.92267106933594,55.41475296020508,48.51005106933594,55.41475296020508C51.097441069335936,55.41475296020508,53.19664106933594,57.51527296020508,53.19664106933594,60.10429296020508L53.19664106933594,104.49665296020507L71.79847106933593,86.20745296020507C73.62627106933594,84.41175296020508,76.55727106933594,84.41565296020508,78.37727106933593,86.21725296020507L96.80137106933594,104.44585296020509L96.80137106933594,60.23325296020508C96.80137106933594,57.64424296020508,98.90057106933594,55.54371596020508,101.48797106933594,55.54371596020508C104.07537106933594,55.54371596020508,106.17457106933594,57.64424296020508,106.17457106933594,60.23325296020508L106.17457106933594,115.67735296020507C106.17457106933594,117.56875296020507,105.03807106933593,119.27655296020508,103.29427106933593,120.00535296020507C102.72247106933594,120.24345296020508,102.10927106933593,120.36625296020507,101.48997106933594,120.36685296020508Z",
          fill: "#FFFFFF",
          "fill-opacity": "1",
          style: { "mix-blend-mode": "passthrough" }
        })
      ])
    ], -1)
  ]));
}
var word = _export_sfc(_sfc_main$2, [["render", _sfc_render$1]]);
var _sfc_main$14 = {};
var _hoisted_1$1 = {
  xmlns: "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink",
  fill: "none",
  version: "1.1",
  width: "1em",
  height: "1em",
  viewBox: "0 0 150 175"
};
function _sfc_render2(_ctx, _cache) {
  return openBlock(), createElementBlock("svg", _hoisted_1$1, _cache[0] || (_cache[0] = [
    createBaseVNode("g", null, [
      createBaseVNode("g", null, [
        createBaseVNode("path", {
          d: "M103.622,0L27.5981,0C12.355,0,0,12.3648,0,27.6155L0,147.384C0,162.637,12.357,175,27.5981,175L122.402,175C137.645,175,150,162.635,150,147.384L150,46.405C150,40.1855,147.532,34.2219,143.136,29.8255L120.191,6.86627C115.797,2.46982,109.837,-0.00000447229,103.622,0Z",
          fill: "currentColor",
          "fill-opacity": "1",
          style: { "mix-blend-mode": "passthrough" }
        })
      ]),
      createBaseVNode("g", null, [
        createBaseVNode("path", {
          d: "M34.325330513916015,25.79257593970299L48.29132051391602,25.79257593970299C49.82622051391601,25.79257593970299,51.072020513916016,24.545875939702988,51.072020513916016,23.010075939702986L51.072020513916016,9.035265939702988C51.072020513916016,7.497485939702988,49.82622051391601,6.252805939702988,48.29132051391602,6.252805939702988L34.325330513916015,6.252805939702988C32.790480513916016,6.252805939702988,31.544626473216017,7.499445939702988,31.544626473216017,9.035265939702988L31.544626473216017,23.010075939702986C31.544626473216017,24.545875939702988,32.790480513916016,25.79257593970299,34.325330513916015,25.79257593970299ZM67.81882051391602,25.79257593970299L53.85272051391601,25.79257593970299C52.317920513916015,25.79257593970299,51.072020513916016,27.03917593970299,51.072020513916016,28.574975939702988L51.072020513916016,42.549875939702986C51.072020513916016,44.08767593970299,52.317920513916015,45.33227593970299,53.85272051391601,45.33227593970299L67.81882051391602,45.33227593970299C69.35362051391601,45.33227593970299,70.59952051391602,44.08567593970299,70.59952051391602,42.549875939702986L70.59952051391602,28.575075939702987C70.59952051391602,27.03917593970299,69.35362051391601,25.79257593970299,67.81882051391602,25.79257593970299ZM34.325330513916015,64.87207593970298L48.29132051391602,64.87207593970298C49.82622051391601,64.87207593970298,51.072020513916016,63.62547593970299,51.072020513916016,62.08957593970299L51.072020513916016,48.11477593970299C51.072020513916016,46.57697593970299,49.82622051391601,45.33227593970299,48.29132051391602,45.33227593970299L34.325330513916015,45.33227593970299C32.790480513916016,45.33227593970299,31.544626473216017,46.578975939702985,31.544626473216017,48.11477593970299L31.544626473216017,62.08957593970299C31.544626473216017,63.62547593970299,32.790480513916016,64.87207593970298,34.325330513916015,64.87207593970298ZM67.81882051391602,64.87207593970298L53.85272051391601,64.87207593970298C52.317920513916015,64.87207593970298,51.072020513916016,66.11867593970298,51.072020513916016,67.65447593970299L51.072020513916016,81.62937593970298C51.072020513916016,83.16717593970299,52.317920513916015,84.411875939703,53.85272051391601,84.411875939703L67.81882051391602,84.411875939703C69.35362051391601,84.411875939703,70.59952051391602,83.16517593970299,70.59952051391602,81.62937593970298L70.59952051391602,67.65447593970299C70.59952051391602,66.11867593970298,69.35362051391601,64.87207593970298,67.81882051391602,64.87207593970298ZM63.77272051391601,95.19977593970299L37.580550513916016,95.19977593970299C34.24722051391601,95.19977593970299,31.544620513916016,97.90407593970299,31.544620513916016,101.239775939703L31.544620513916016,131.61977593970298C31.544620513916016,134.955775939703,34.24722051391601,137.659775939703,37.580550513916016,137.659775939703L63.77272051391601,137.659775939703C67.10602051391601,137.659775939703,69.80862051391603,134.955775939703,69.80862051391603,131.61977593970298L69.80862051391603,101.239775939703C69.80862051391603,97.90407593970299,67.10602051391601,95.19977593970299,63.77272051391601,95.19977593970299ZM62.810020513916015,127.35977593970298C62.810020513916015,130.040775939703,60.63852051391602,132.213775939703,57.959420513916015,132.213775939703L43.39192051391602,132.213775939703C40.71275051391601,132.213775939703,38.54130051391601,130.040775939703,38.54130051391601,127.35977593970298L38.54130051391601,122.01377593970298C38.54130051391601,119.33377593970299,40.71275051391601,117.16077593970299,43.39192051391602,117.16077593970299L57.959420513916015,117.16077593970299C60.63852051391602,117.16077593970299,62.810020513916015,119.33277593970298,62.810020513916015,122.01377593970298L62.810020513916015,127.35977593970298ZM143.13562051391602,29.825575939702986L120.19142051391601,6.866355939702988C116.89942051391601,3.5725259397029876,112.70152051391601,1.3345199397029877,108.13322051391602,0.43777593970298767L108.13322051391602,26.206775939702986C108.13322051391602,34.388075939702986,114.76082051391602,41.019875939702985,122.93692051391602,41.019875939702985L149.371620513916,41.019875939702985C148.371620513916,36.78157593970299,146.21262051391602,32.905375939702985,143.13562051391602,29.825575939702986Z",
          fill: "#000000",
          "fill-opacity": "0.20000000298023224",
          style: { "mix-blend-mode": "passthrough" }
        })
      ]),
      createBaseVNode("g", null, [
        createBaseVNode("path", {
          d: "M34.325330513916015,23.44775087814331L48.29132051391602,23.44775087814331C49.82622051391601,23.44775087814331,51.072020513916016,22.20105087814331,51.072020513916016,20.66525087814331L51.072020513916016,6.690410878143311C51.072020513916016,5.15263087814331,49.82622051391601,3.9079508781433105,48.29132051391602,3.9079508781433105L34.325330513916015,3.9079508781433105C32.790480513916016,3.9079508781433105,31.544626473216017,5.154590878143311,31.544626473216017,6.690410878143311L31.544626473216017,20.66525087814331C31.544626473216017,22.20105087814331,32.790480513916016,23.44775087814331,34.325330513916015,23.44775087814331ZM67.81882051391602,23.44775087814331L53.85272051391601,23.44775087814331C52.317920513916015,23.44775087814331,51.072020513916016,24.69435087814331,51.072020513916016,26.23015087814331L51.072020513916016,40.20505087814331C51.072020513916016,41.74275087814331,52.317920513916015,42.987450878143314,53.85272051391601,42.987450878143314L67.81882051391602,42.987450878143314C69.35362051391601,42.987450878143314,70.59952051391602,41.74085087814331,70.59952051391602,40.20505087814331L70.59952051391602,26.23015087814331C70.59952051391602,24.69435087814331,69.35362051391601,23.44775087814331,67.81882051391602,23.44775087814331ZM34.325330513916015,62.52725087814331L48.29132051391602,62.52725087814331C49.82622051391601,62.52725087814331,51.072020513916016,61.28055087814331,51.072020513916016,59.74475087814331L51.072020513916016,45.76995087814331C51.072020513916016,44.23215087814331,49.82622051391601,42.987450878143314,48.29132051391602,42.987450878143314L34.325330513916015,42.987450878143314C32.790480513916016,42.987450878143314,31.544626473216017,44.23405087814331,31.544626473216017,45.76995087814331L31.544626473216017,59.74475087814331C31.544626473216017,61.28055087814331,32.790480513916016,62.52725087814331,34.325330513916015,62.52725087814331ZM67.81882051391602,62.52725087814331L53.85272051391601,62.52725087814331C52.317920513916015,62.52725087814331,51.072020513916016,63.773850878143314,51.072020513916016,65.30965087814332L51.072020513916016,79.2845508781433C51.072020513916016,80.82235087814331,52.317920513916015,82.06695087814332,53.85272051391601,82.06695087814332L67.81882051391602,82.06695087814332C69.35362051391601,82.06695087814332,70.59952051391602,80.82035087814332,70.59952051391602,79.2845508781433L70.59952051391602,65.30965087814332C70.59952051391602,63.773850878143314,69.35362051391601,62.52725087814331,67.81882051391602,62.52725087814331ZM63.77272051391601,92.85485087814331L37.580550513916016,92.85485087814331C34.24722051391601,92.85485087814331,31.544620513916016,95.55915087814331,31.544620513916016,98.8945508781433L31.544620513916016,129.27495087814333C31.544620513916016,132.6099508781433,34.24722051391601,135.31495087814332,37.580550513916016,135.31495087814332L63.77272051391601,135.31495087814332C67.10602051391601,135.31495087814332,69.80862051391603,132.6099508781433,69.80862051391603,129.27495087814333L69.80862051391603,98.8945508781433C69.80862051391603,95.55915087814331,67.10602051391601,92.85485087814331,63.77272051391601,92.85485087814331ZM62.810020513916015,125.01495087814331C62.810020513916015,127.69595087814331,60.63852051391602,129.86895087814332,57.959420513916015,129.86895087814332L43.39192051391602,129.86895087814332C40.71275051391601,129.86895087814332,38.54130051391601,127.69595087814331,38.54130051391601,125.01495087814331L38.54130051391601,119.6689508781433C38.54130051391601,116.98795087814331,40.71275051391601,114.81595087814331,43.39192051391602,114.81595087814331L57.959420513916015,114.81595087814331C60.63852051391602,114.81595087814331,62.810020513916015,116.98795087814331,62.810020513916015,119.6689508781433L62.810020513916015,125.01495087814331Z",
          fill: "#FFFFFF",
          "fill-opacity": "1",
          style: { "mix-blend-mode": "passthrough" }
        })
      ])
    ], -1)
  ]));
}
var zip = _export_sfc(_sfc_main$14, [["render", _sfc_render2]]);
var svgIconMap = {
  // 文档类
  word,
  excel,
  ppt,
  pdf,
  txt,
  mark,
  // 图片类
  image,
  // 音频类
  audio,
  // 视频类
  video,
  // 3D 模型类
  three,
  // 可执行程序类
  code,
  // 数据库类
  database,
  // 链接文件类
  link,
  // 压缩包类
  zip,
  // 通用文件/文件夹类
  file,
  // 未知文件类
  unknown
};
var _hoisted_1 = {
  key: 2,
  class: "preview-mask-loading"
};
var _hoisted_2 = {
  key: 3,
  class: "preview-mask-error"
};
var _hoisted_3 = { class: "error-text" };
var _hoisted_4 = { class: "elx-files-card-content" };
var _hoisted_5 = {
  key: 0,
  class: "elx-files-card-name"
};
var _hoisted_6 = { class: "elx-files-card-name-prefix" };
var _hoisted_7 = { class: "elx-files-card-name-suffix" };
var _sfc_main5 = defineComponent({
  __name: "index",
  props: {
    uid: { default: void 0 },
    name: { default: void 0 },
    fileSize: { default: void 0 },
    fileType: { default: void 0 },
    description: { default: void 0 },
    url: { default: void 0 },
    thumbUrl: { default: void 0 },
    imgFile: { default: void 0 },
    iconSize: { default: "42px" },
    iconColor: { default: void 0 },
    showDelIcon: { type: Boolean, default: false },
    maxWidth: { default: "236px" },
    noStyle: { type: Boolean },
    style: { default: void 0 },
    hoverStyle: { default: void 0 },
    imgVariant: { default: "rectangle" },
    imgPreview: { type: Boolean, default: true },
    imgPreviewMask: { type: Boolean, default: true },
    status: { default: void 0 },
    percent: { default: void 0 },
    errorTip: { default: void 0 }
  },
  emits: ["delete", "imagePreview"],
  setup(__props, { expose: __expose, emit: __emit }) {
    const props = __props;
    const emits = __emit;
    const { name, fileType, description, url, thumbUrl, fileSize, imgVariant } = toRefs(props);
    const { namePrefix, nameSuffix } = useFileNameParser(name);
    const isHovered = ref(false);
    const imageHovered = ref(false);
    const _previewImg = ref(void 0);
    const _fileType = computed(() => {
      if (fileType.value)
        return fileType.value;
      if (!name.value)
        return void 0;
      if (!nameSuffix.value) {
        return "unknown";
      }
      return getFileType(nameSuffix.value).lowerCase;
    });
    const _fileTypeUpperCase = computed(() => {
      if (fileType.value)
        return fileType.value;
      if (!name.value)
        return "";
      if (!nameSuffix.value) {
        return "Unknown";
      }
      return getFileType(nameSuffix.value).upperCase;
    });
    const _description = computed(() => {
      if (description.value) {
        return description.value;
      }
      const typeStr = _fileTypeUpperCase.value;
      const sizeStr = fileSize.value ? `・${getSize(fileSize.value)}` : "";
      if (props.status === "uploading") {
        return `上传中...${`・${props.percent || 0}`}%${sizeStr}`;
      }
      if (props.status === "error") {
        return props.errorTip || "上传失败";
      }
      return `${typeStr}${sizeStr}`;
    });
    const isImageFile = computed(() => _fileType.value === "image");
    const isSquareVariant = computed(() => imgVariant.value === "square");
    const _previewImgUrl = computed(() => {
      if (!isImageFile.value)
        return void 0;
      if (thumbUrl.value)
        return thumbUrl.value;
      if (url.value)
        return url.value;
      return _previewImg.value;
    });
    const _iconSize = computed(() => {
      if (isSquareVariant.value && isImageFile.value && !props.iconSize || isSquareVariant.value && isImageFile.value && props.iconSize === "42px")
        return "64px";
      return props.iconSize;
    });
    watch(
      () => props.imgFile,
      async (newFile) => {
        if (newFile) {
          try {
            const url2 = await previewImage(newFile);
            _previewImg.value = url2;
          } catch (error) {
          }
        } else {
          _previewImg.value = void 0;
        }
      },
      { deep: true, immediate: true }
    );
    function handleDelete() {
      emits("delete", { ...props });
    }
    const imgRef = ref();
    function handlePreviewAction(type) {
      if (props.imgPreview && imgRef.value && _previewImgUrl && type === "mask") {
        imgRef.value.showPreview();
      }
      if (type === "self") {
        emits("imagePreview", { ...props });
      }
    }
    __expose({
      namePrefix,
      nameSuffix,
      colorMap
    });
    return (_ctx, _cache) => {
      const _component_el_image = ElImage;
      const _component_el_icon = ElIcon;
      const _component_el_progress = ElProgress;
      return openBlock(), createElementBlock("div", {
        style: normalizeStyle({
          "--elx-files-card-icon-size": `${unref(_iconSize)}`,
          "--elx-files-card-max-width": `${props.maxWidth}`,
          ...props.style,
          ...unref(isHovered) && props.hoverStyle ? props.hoverStyle : {}
        }),
        class: normalizeClass(["elx-files-card", {
          "elx-files-card-square": unref(isSquareVariant) && unref(isImageFile),
          "elx-files-card-hovered": unref(isHovered),
          "elx-files-card-error": props.status === "error",
          "elx-files-card-done": props.status === "done",
          "elx-files-card-uploading": props.status === "uploading"
        }]),
        onMouseenter: _cache[4] || (_cache[4] = ($event) => isHovered.value = true),
        onMouseleave: _cache[5] || (_cache[5] = ($event) => isHovered.value = false)
      }, [
        props.status === "uploading" && !(unref(isSquareVariant) && unref(isImageFile)) ? (openBlock(), createElementBlock("div", {
          key: 0,
          class: "elx-files-card-progress",
          style: normalizeStyle({ width: `${props.percent || 0}%` })
        }, null, 4)) : createCommentVNode("", true),
        _ctx.$slots.icon || unref(_fileType) ? renderSlot(_ctx.$slots, "icon", normalizeProps(mergeProps({ key: 1 }, { item: props })), () => [
          !unref(isImageFile) ? (openBlock(), createBlock(resolveDynamicComponent(unref(svgIconMap)[unref(_fileType)]), {
            key: 0,
            class: "elx-files-card-icon",
            color: props.iconColor || unref(colorMap)[unref(_fileType)]
          }, null, 8, ["color"])) : createCommentVNode("", true),
          unref(isImageFile) ? (openBlock(), createElementBlock("div", {
            key: 1,
            class: normalizeClass(["image-preview-container", {
              "image-preview-container-square": unref(isSquareVariant) && unref(isImageFile)
            }]),
            onMouseenter: _cache[2] || (_cache[2] = ($event) => imageHovered.value = true),
            onMouseleave: _cache[3] || (_cache[3] = ($event) => imageHovered.value = false)
          }, [
            unref(_previewImgUrl) ? (openBlock(), createBlock(_component_el_image, {
              key: 0,
              ref_key: "imgRef",
              ref: imgRef,
              class: "elx-files-card-img",
              src: unref(_previewImgUrl),
              "preview-src-list": props.imgPreview ? [unref(_previewImgUrl)] : [],
              fit: "cover",
              "show-progress": false,
              "hide-on-click-modal": "",
              onShow: _cache[0] || (_cache[0] = ($event) => handlePreviewAction("self"))
            }, null, 8, ["src", "preview-src-list"])) : (openBlock(), createBlock(resolveDynamicComponent(unref(svgIconMap)[unref(_fileType)]), {
              key: 1,
              class: "elx-files-card-img",
              color: props.iconColor || unref(colorMap)[unref(_fileType)]
            }, null, 8, ["color"])),
            createVNode(Transition, { name: "fade" }, {
              default: withCtx(() => [
                unref(imageHovered) && unref(_previewImgUrl) && props.imgPreviewMask && props.imgPreview ? renderSlot(_ctx.$slots, "image-preview-actions", normalizeProps(mergeProps({ key: 0 }, { item: { ...props, prefix: unref(namePrefix), suffix: unref(nameSuffix) } })), () => [
                  createBaseVNode("div", {
                    class: "preview-mask",
                    onClick: _cache[1] || (_cache[1] = ($event) => handlePreviewAction("mask"))
                  }, [
                    createVNode(_component_el_icon, null, {
                      default: withCtx(() => [
                        createVNode(unref(view_default))
                      ]),
                      _: 1
                    }),
                    _cache[6] || (_cache[6] = createBaseVNode("span", null, "预览", -1))
                  ])
                ], true) : createCommentVNode("", true)
              ]),
              _: 3
            }),
            props.status === "uploading" && unref(isSquareVariant) ? (openBlock(), createElementBlock("div", _hoisted_1, [
              createVNode(_component_el_progress, {
                color: "#fff",
                type: "circle",
                percentage: props.percent,
                class: "circle-progress"
              }, null, 8, ["percentage"])
            ])) : props.status === "error" && unref(isSquareVariant) ? (openBlock(), createElementBlock("div", _hoisted_2, [
              createBaseVNode("span", _hoisted_3, toDisplayString(props.errorTip || "上传失败"), 1)
            ])) : createCommentVNode("", true)
          ], 34)) : createCommentVNode("", true)
        ], true) : createCommentVNode("", true),
        (_ctx.$slots.content || props.name || unref(description)) && !(unref(isSquareVariant) && unref(isImageFile)) ? renderSlot(_ctx.$slots, "content", normalizeProps(mergeProps({ key: 2 }, { item: props })), () => [
          createBaseVNode("div", _hoisted_4, [
            props.name ? (openBlock(), createElementBlock("div", _hoisted_5, [
              renderSlot(_ctx.$slots, "name-prefix", normalizeProps(guardReactiveProps({ item: { ...props, prefix: unref(namePrefix), suffix: unref(nameSuffix) } })), () => [
                createBaseVNode("div", _hoisted_6, toDisplayString(unref(namePrefix)), 1)
              ], true),
              renderSlot(_ctx.$slots, "name-suffix", normalizeProps(guardReactiveProps({ item: { ...props, prefix: unref(namePrefix), suffix: unref(nameSuffix) } })), () => [
                createBaseVNode("div", _hoisted_7, toDisplayString(unref(nameSuffix)), 1)
              ], true)
            ])) : createCommentVNode("", true),
            renderSlot(_ctx.$slots, "description", normalizeProps(guardReactiveProps({ item: { ...props, prefix: unref(namePrefix), suffix: unref(nameSuffix) } })), () => [
              createBaseVNode("div", {
                class: normalizeClass(["elx-files-card-description", {
                  "elx-files-card-description-error": props.status === "error",
                  "elx-files-card-description-done": props.status === "done",
                  "elx-files-card-description-uploading": props.status === "uploading"
                }])
              }, toDisplayString(unref(_description)), 3)
            ], true)
          ])
        ], true) : createCommentVNode("", true),
        props.showDelIcon && unref(isHovered) ? (openBlock(), createElementBlock("div", {
          key: 3,
          class: "elx-files-card-delete-icon",
          onClick: handleDelete
        }, [
          renderSlot(_ctx.$slots, "del-icon", normalizeProps(guardReactiveProps({ item: props })), () => [
            createVNode(_component_el_icon, null, {
              default: withCtx(() => [
                createVNode(unref(circle_close_filled_default))
              ]),
              _: 1
            })
          ], true)
        ])) : createCommentVNode("", true)
      ], 38);
    };
  }
});
var FilesCard = _export_sfc(_sfc_main5, [["__scopeId", "data-v-c4a50500"]]);

// node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/curry-D3P8tFW_.js
var debounce2 = ({ delay }, func) => {
  let timer = void 0;
  let active = true;
  const debounced = (...args) => {
    if (active) {
      clearTimeout(timer);
      timer = setTimeout(() => {
        active && func(...args);
        timer = void 0;
      }, delay);
    } else {
      func(...args);
    }
  };
  debounced.isPending = () => {
    return timer !== void 0;
  };
  debounced.cancel = () => {
    active = false;
  };
  debounced.flush = (...args) => func(...args);
  return debounced;
};

// node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/es/Attachments/index.js
function isEqual(value, other) {
  return baseIsEqual(value, other);
}
var uploadContextKey = Symbol("uploadContextKey");
var SCOPE$1 = "ElUpload";
var UploadAjaxError = class extends Error {
  constructor(message, status, method, url) {
    super(message);
    this.name = "UploadAjaxError";
    this.status = status;
    this.method = method;
    this.url = url;
  }
};
function getError(action, option, xhr) {
  let msg;
  if (xhr.response) {
    msg = `${xhr.response.error || xhr.response}`;
  } else if (xhr.responseText) {
    msg = `${xhr.responseText}`;
  } else {
    msg = `fail to ${option.method} ${action} ${xhr.status}`;
  }
  return new UploadAjaxError(msg, xhr.status, option.method, action);
}
function getBody(xhr) {
  const text = xhr.responseText || xhr.response;
  if (!text) {
    return text;
  }
  try {
    return JSON.parse(text);
  } catch (e) {
    return text;
  }
}
var ajaxUpload = (option) => {
  if (typeof XMLHttpRequest === "undefined")
    throwError(SCOPE$1, "XMLHttpRequest is undefined");
  const xhr = new XMLHttpRequest();
  const action = option.action;
  if (xhr.upload) {
    xhr.upload.addEventListener("progress", (evt) => {
      const progressEvt = evt;
      progressEvt.percent = evt.total > 0 ? evt.loaded / evt.total * 100 : 0;
      option.onProgress(progressEvt);
    });
  }
  const formData = new FormData();
  if (option.data) {
    for (const [key, value] of Object.entries(option.data)) {
      if (isArray2(value) && value.length)
        formData.append(key, ...value);
      else
        formData.append(key, value);
    }
  }
  formData.append(option.filename, option.file, option.file.name);
  xhr.addEventListener("error", () => {
    option.onError(getError(action, option, xhr));
  });
  xhr.addEventListener("load", () => {
    if (xhr.status < 200 || xhr.status >= 300) {
      return option.onError(getError(action, option, xhr));
    }
    option.onSuccess(getBody(xhr));
  });
  xhr.open(option.method, action, true);
  if (option.withCredentials && "withCredentials" in xhr) {
    xhr.withCredentials = true;
  }
  const headers = option.headers || {};
  if (headers instanceof Headers) {
    headers.forEach((value, key) => xhr.setRequestHeader(key, value));
  } else {
    for (const [key, value] of Object.entries(headers)) {
      if (isNil(value))
        continue;
      xhr.setRequestHeader(key, String(value));
    }
  }
  xhr.send(formData);
  return xhr;
};
var uploadListTypes = ["text", "picture", "picture-card"];
var fileId = 1;
var genFileId = () => Date.now() + fileId++;
var uploadBaseProps = buildProps({
  action: {
    type: String,
    default: "#"
  },
  headers: {
    type: definePropType(Object)
  },
  method: {
    type: String,
    default: "post"
  },
  data: {
    type: definePropType([Object, Function, Promise]),
    default: () => mutable({})
  },
  multiple: Boolean,
  name: {
    type: String,
    default: "file"
  },
  drag: Boolean,
  withCredentials: Boolean,
  showFileList: {
    type: Boolean,
    default: true
  },
  accept: {
    type: String,
    default: ""
  },
  fileList: {
    type: definePropType(Array),
    default: () => mutable([])
  },
  autoUpload: {
    type: Boolean,
    default: true
  },
  listType: {
    type: String,
    values: uploadListTypes,
    default: "text"
  },
  httpRequest: {
    type: definePropType(Function),
    default: ajaxUpload
  },
  disabled: Boolean,
  limit: Number
});
var uploadProps = buildProps({
  ...uploadBaseProps,
  beforeUpload: {
    type: definePropType(Function),
    default: NOOP
  },
  beforeRemove: {
    type: definePropType(Function)
  },
  onRemove: {
    type: definePropType(Function),
    default: NOOP
  },
  onChange: {
    type: definePropType(Function),
    default: NOOP
  },
  onPreview: {
    type: definePropType(Function),
    default: NOOP
  },
  onSuccess: {
    type: definePropType(Function),
    default: NOOP
  },
  onProgress: {
    type: definePropType(Function),
    default: NOOP
  },
  onError: {
    type: definePropType(Function),
    default: NOOP
  },
  onExceed: {
    type: definePropType(Function),
    default: NOOP
  },
  crossorigin: {
    type: definePropType(String)
  }
});
var uploadListProps = buildProps({
  files: {
    type: definePropType(Array),
    default: () => mutable([])
  },
  disabled: {
    type: Boolean,
    default: false
  },
  handlePreview: {
    type: definePropType(Function),
    default: NOOP
  },
  listType: {
    type: String,
    values: uploadListTypes,
    default: "text"
  },
  crossorigin: {
    type: definePropType(String)
  }
});
var uploadListEmits = {
  remove: (file2) => !!file2
};
var __default__$3 = defineComponent({
  name: "ElUploadList"
});
var _sfc_main$42 = defineComponent({
  ...__default__$3,
  props: uploadListProps,
  emits: uploadListEmits,
  setup(__props, { emit }) {
    const props = __props;
    const { t } = useLocale();
    const nsUpload = useNamespace("upload");
    const nsIcon = useNamespace("icon");
    const nsList = useNamespace("list");
    const disabled = useFormDisabled();
    const focusing = ref(false);
    const containerKls = computed(() => [
      nsUpload.b("list"),
      nsUpload.bm("list", props.listType),
      nsUpload.is("disabled", props.disabled)
    ]);
    const handleRemove = (file2) => {
      emit("remove", file2);
    };
    return (_ctx, _cache) => {
      return openBlock(), createBlock(TransitionGroup, {
        tag: "ul",
        class: normalizeClass(unref(containerKls)),
        name: unref(nsList).b()
      }, {
        default: withCtx(() => [
          (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.files, (file2, index) => {
            return openBlock(), createElementBlock("li", {
              key: file2.uid || file2.name,
              class: normalizeClass([
                unref(nsUpload).be("list", "item"),
                unref(nsUpload).is(file2.status),
                { focusing: focusing.value }
              ]),
              tabindex: "0",
              onKeydown: withKeys(($event) => !unref(disabled) && handleRemove(file2), ["delete"]),
              onFocus: ($event) => focusing.value = true,
              onBlur: ($event) => focusing.value = false,
              onClick: ($event) => focusing.value = false
            }, [
              renderSlot(_ctx.$slots, "default", {
                file: file2,
                index
              }, () => [
                _ctx.listType === "picture" || file2.status !== "uploading" && _ctx.listType === "picture-card" ? (openBlock(), createElementBlock("img", {
                  key: 0,
                  class: normalizeClass(unref(nsUpload).be("list", "item-thumbnail")),
                  src: file2.url,
                  crossorigin: _ctx.crossorigin,
                  alt: ""
                }, null, 10, ["src", "crossorigin"])) : createCommentVNode("v-if", true),
                file2.status === "uploading" || _ctx.listType !== "picture-card" ? (openBlock(), createElementBlock("div", {
                  key: 1,
                  class: normalizeClass(unref(nsUpload).be("list", "item-info"))
                }, [
                  createBaseVNode("a", {
                    class: normalizeClass(unref(nsUpload).be("list", "item-name")),
                    onClick: withModifiers(($event) => _ctx.handlePreview(file2), ["prevent"])
                  }, [
                    createVNode(unref(ElIcon), {
                      class: normalizeClass(unref(nsIcon).m("document"))
                    }, {
                      default: withCtx(() => [
                        createVNode(unref(document_default))
                      ]),
                      _: 1
                    }, 8, ["class"]),
                    createBaseVNode("span", {
                      class: normalizeClass(unref(nsUpload).be("list", "item-file-name")),
                      title: file2.name
                    }, toDisplayString(file2.name), 11, ["title"])
                  ], 10, ["onClick"]),
                  file2.status === "uploading" ? (openBlock(), createBlock(unref(ElProgress), {
                    key: 0,
                    type: _ctx.listType === "picture-card" ? "circle" : "line",
                    "stroke-width": _ctx.listType === "picture-card" ? 6 : 2,
                    percentage: Number(file2.percentage),
                    style: normalizeStyle(_ctx.listType === "picture-card" ? "" : "margin-top: 0.5rem")
                  }, null, 8, ["type", "stroke-width", "percentage", "style"])) : createCommentVNode("v-if", true)
                ], 2)) : createCommentVNode("v-if", true),
                createBaseVNode("label", {
                  class: normalizeClass(unref(nsUpload).be("list", "item-status-label"))
                }, [
                  _ctx.listType === "text" ? (openBlock(), createBlock(unref(ElIcon), {
                    key: 0,
                    class: normalizeClass([unref(nsIcon).m("upload-success"), unref(nsIcon).m("circle-check")])
                  }, {
                    default: withCtx(() => [
                      createVNode(unref(circle_check_default))
                    ]),
                    _: 1
                  }, 8, ["class"])) : ["picture-card", "picture"].includes(_ctx.listType) ? (openBlock(), createBlock(unref(ElIcon), {
                    key: 1,
                    class: normalizeClass([unref(nsIcon).m("upload-success"), unref(nsIcon).m("check")])
                  }, {
                    default: withCtx(() => [
                      createVNode(unref(check_default))
                    ]),
                    _: 1
                  }, 8, ["class"])) : createCommentVNode("v-if", true)
                ], 2),
                !unref(disabled) ? (openBlock(), createBlock(unref(ElIcon), {
                  key: 2,
                  class: normalizeClass(unref(nsIcon).m("close")),
                  onClick: ($event) => handleRemove(file2)
                }, {
                  default: withCtx(() => [
                    createVNode(unref(close_default))
                  ]),
                  _: 2
                }, 1032, ["class", "onClick"])) : createCommentVNode("v-if", true),
                createCommentVNode(" Due to close btn only appears when li gets focused disappears after li gets blurred, thus keyboard navigation can never reach close btn"),
                createCommentVNode(" This is a bug which needs to be fixed "),
                createCommentVNode(" TODO: Fix the incorrect navigation interaction "),
                !unref(disabled) ? (openBlock(), createElementBlock("i", {
                  key: 3,
                  class: normalizeClass(unref(nsIcon).m("close-tip"))
                }, toDisplayString(unref(t)("el.upload.deleteTip")), 3)) : createCommentVNode("v-if", true),
                _ctx.listType === "picture-card" ? (openBlock(), createElementBlock("span", {
                  key: 4,
                  class: normalizeClass(unref(nsUpload).be("list", "item-actions"))
                }, [
                  createBaseVNode("span", {
                    class: normalizeClass(unref(nsUpload).be("list", "item-preview")),
                    onClick: ($event) => _ctx.handlePreview(file2)
                  }, [
                    createVNode(unref(ElIcon), {
                      class: normalizeClass(unref(nsIcon).m("zoom-in"))
                    }, {
                      default: withCtx(() => [
                        createVNode(unref(zoom_in_default))
                      ]),
                      _: 1
                    }, 8, ["class"])
                  ], 10, ["onClick"]),
                  !unref(disabled) ? (openBlock(), createElementBlock("span", {
                    key: 0,
                    class: normalizeClass(unref(nsUpload).be("list", "item-delete")),
                    onClick: ($event) => handleRemove(file2)
                  }, [
                    createVNode(unref(ElIcon), {
                      class: normalizeClass(unref(nsIcon).m("delete"))
                    }, {
                      default: withCtx(() => [
                        createVNode(unref(delete_default))
                      ]),
                      _: 1
                    }, 8, ["class"])
                  ], 10, ["onClick"])) : createCommentVNode("v-if", true)
                ], 2)) : createCommentVNode("v-if", true)
              ])
            ], 42, ["onKeydown", "onFocus", "onBlur", "onClick"]);
          }), 128)),
          renderSlot(_ctx.$slots, "append")
        ]),
        _: 3
      }, 8, ["class", "name"]);
    };
  }
});
var UploadList = _export_sfc2(_sfc_main$42, [["__file", "upload-list.vue"]]);
var uploadDraggerProps = buildProps({
  disabled: {
    type: Boolean,
    default: false
  }
});
var uploadDraggerEmits = {
  file: (file2) => isArray2(file2)
};
var COMPONENT_NAME = "ElUploadDrag";
var __default__$2 = defineComponent({
  name: COMPONENT_NAME
});
var _sfc_main$32 = defineComponent({
  ...__default__$2,
  props: uploadDraggerProps,
  emits: uploadDraggerEmits,
  setup(__props, { emit }) {
    const uploaderContext = inject(uploadContextKey);
    if (!uploaderContext) {
      throwError(COMPONENT_NAME, "usage: <el-upload><el-upload-dragger /></el-upload>");
    }
    const ns = useNamespace("upload");
    const dragover = ref(false);
    const disabled = useFormDisabled();
    const onDrop = (e) => {
      if (disabled.value)
        return;
      dragover.value = false;
      e.stopPropagation();
      const files = Array.from(e.dataTransfer.files);
      const items = e.dataTransfer.items || [];
      files.forEach((file2, index) => {
        var _a2;
        const item = items[index];
        const entry = (_a2 = item == null ? void 0 : item.webkitGetAsEntry) == null ? void 0 : _a2.call(item);
        if (entry) {
          file2.isDirectory = entry.isDirectory;
        }
      });
      emit("file", files);
    };
    const onDragover = () => {
      if (!disabled.value)
        dragover.value = true;
    };
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass([unref(ns).b("dragger"), unref(ns).is("dragover", dragover.value)]),
        onDrop: withModifiers(onDrop, ["prevent"]),
        onDragover: withModifiers(onDragover, ["prevent"]),
        onDragleave: withModifiers(($event) => dragover.value = false, ["prevent"])
      }, [
        renderSlot(_ctx.$slots, "default")
      ], 42, ["onDrop", "onDragover", "onDragleave"]);
    };
  }
});
var UploadDragger = _export_sfc2(_sfc_main$32, [["__file", "upload-dragger.vue"]]);
var uploadContentProps = buildProps({
  ...uploadBaseProps,
  beforeUpload: {
    type: definePropType(Function),
    default: NOOP
  },
  onRemove: {
    type: definePropType(Function),
    default: NOOP
  },
  onStart: {
    type: definePropType(Function),
    default: NOOP
  },
  onSuccess: {
    type: definePropType(Function),
    default: NOOP
  },
  onProgress: {
    type: definePropType(Function),
    default: NOOP
  },
  onError: {
    type: definePropType(Function),
    default: NOOP
  },
  onExceed: {
    type: definePropType(Function),
    default: NOOP
  }
});
var __default__$13 = defineComponent({
  name: "ElUploadContent",
  inheritAttrs: false
});
var _sfc_main$22 = defineComponent({
  ...__default__$13,
  props: uploadContentProps,
  setup(__props, { expose }) {
    const props = __props;
    const ns = useNamespace("upload");
    const disabled = useFormDisabled();
    const requests = shallowRef({});
    const inputRef = shallowRef();
    const uploadFiles = (files) => {
      if (files.length === 0)
        return;
      const { autoUpload, limit, fileList, multiple, onStart, onExceed } = props;
      if (limit && fileList.length + files.length > limit) {
        onExceed(files, fileList);
        return;
      }
      if (!multiple) {
        files = files.slice(0, 1);
      }
      for (const file2 of files) {
        const rawFile = file2;
        rawFile.uid = genFileId();
        onStart(rawFile);
        if (autoUpload)
          upload(rawFile);
      }
    };
    const upload = async (rawFile) => {
      inputRef.value.value = "";
      if (!props.beforeUpload) {
        return doUpload(rawFile);
      }
      let hookResult;
      let beforeData = {};
      try {
        const originData = props.data;
        const beforeUploadPromise = props.beforeUpload(rawFile);
        beforeData = isPlainObject(props.data) ? cloneDeep(props.data) : props.data;
        hookResult = await beforeUploadPromise;
        if (isPlainObject(props.data) && isEqual(originData, beforeData)) {
          beforeData = cloneDeep(props.data);
        }
      } catch (e) {
        hookResult = false;
      }
      if (hookResult === false) {
        props.onRemove(rawFile);
        return;
      }
      let file2 = rawFile;
      if (hookResult instanceof Blob) {
        if (hookResult instanceof File) {
          file2 = hookResult;
        } else {
          file2 = new File([hookResult], rawFile.name, {
            type: rawFile.type
          });
        }
      }
      doUpload(Object.assign(file2, {
        uid: rawFile.uid
      }), beforeData);
    };
    const resolveData = async (data, rawFile) => {
      if (isFunction$1(data)) {
        return data(rawFile);
      }
      return data;
    };
    const doUpload = async (rawFile, beforeData) => {
      const {
        headers,
        data,
        method,
        withCredentials,
        name: filename,
        action,
        onProgress,
        onSuccess,
        onError,
        httpRequest
      } = props;
      try {
        beforeData = await resolveData(beforeData != null ? beforeData : data, rawFile);
      } catch (e) {
        props.onRemove(rawFile);
        return;
      }
      const { uid } = rawFile;
      const options = {
        headers: headers || {},
        withCredentials,
        file: rawFile,
        data: beforeData,
        method,
        filename,
        action,
        onProgress: (evt) => {
          onProgress(evt, rawFile);
        },
        onSuccess: (res) => {
          onSuccess(res, rawFile);
          delete requests.value[uid];
        },
        onError: (err) => {
          onError(err, rawFile);
          delete requests.value[uid];
        }
      };
      const request = httpRequest(options);
      requests.value[uid] = request;
      if (request instanceof Promise) {
        request.then(options.onSuccess, options.onError);
      }
    };
    const handleChange = (e) => {
      const files = e.target.files;
      if (!files)
        return;
      uploadFiles(Array.from(files));
    };
    const handleClick = () => {
      if (!disabled.value) {
        inputRef.value.value = "";
        inputRef.value.click();
      }
    };
    const handleKeydown = () => {
      handleClick();
    };
    const abort = (file2) => {
      const _reqs = entriesOf(requests.value).filter(file2 ? ([uid]) => String(file2.uid) === uid : () => true);
      _reqs.forEach(([uid, req]) => {
        if (req instanceof XMLHttpRequest)
          req.abort();
        delete requests.value[uid];
      });
    };
    expose({
      abort,
      upload
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass([
          unref(ns).b(),
          unref(ns).m(_ctx.listType),
          unref(ns).is("drag", _ctx.drag),
          unref(ns).is("disabled", unref(disabled))
        ]),
        tabindex: unref(disabled) ? "-1" : "0",
        onClick: handleClick,
        onKeydown: withKeys(withModifiers(handleKeydown, ["self"]), ["enter", "space"])
      }, [
        _ctx.drag ? (openBlock(), createBlock(UploadDragger, {
          key: 0,
          disabled: unref(disabled),
          onFile: uploadFiles
        }, {
          default: withCtx(() => [
            renderSlot(_ctx.$slots, "default")
          ]),
          _: 3
        }, 8, ["disabled"])) : renderSlot(_ctx.$slots, "default", { key: 1 }),
        createBaseVNode("input", {
          ref_key: "inputRef",
          ref: inputRef,
          class: normalizeClass(unref(ns).e("input")),
          name: _ctx.name,
          disabled: unref(disabled),
          multiple: _ctx.multiple,
          accept: _ctx.accept,
          type: "file",
          onChange: handleChange,
          onClick: withModifiers(() => {
          }, ["stop"])
        }, null, 42, ["name", "disabled", "multiple", "accept", "onClick"])
      ], 42, ["tabindex", "onKeydown"]);
    };
  }
});
var UploadContent = _export_sfc2(_sfc_main$22, [["__file", "upload-content.vue"]]);
var SCOPE2 = "ElUpload";
var revokeFileObjectURL = (file2) => {
  var _a2;
  if ((_a2 = file2.url) == null ? void 0 : _a2.startsWith("blob:")) {
    URL.revokeObjectURL(file2.url);
  }
};
var useHandlers = (props, uploadRef) => {
  const uploadFiles = useVModel(props, "fileList", void 0, { passive: true });
  const getFile = (rawFile) => uploadFiles.value.find((file2) => file2.uid === rawFile.uid);
  function abort(file2) {
    var _a2;
    (_a2 = uploadRef.value) == null ? void 0 : _a2.abort(file2);
  }
  function clearFiles(states = ["ready", "uploading", "success", "fail"]) {
    uploadFiles.value = uploadFiles.value.filter((row) => !states.includes(row.status));
  }
  function removeFile(file2) {
    uploadFiles.value = uploadFiles.value.filter((uploadFile) => uploadFile.uid !== file2.uid);
  }
  const handleError = (err, rawFile) => {
    const file2 = getFile(rawFile);
    if (!file2)
      return;
    file2.status = "fail";
    removeFile(file2);
    props.onError(err, file2, uploadFiles.value);
    props.onChange(file2, uploadFiles.value);
  };
  const handleProgress = (evt, rawFile) => {
    const file2 = getFile(rawFile);
    if (!file2)
      return;
    props.onProgress(evt, file2, uploadFiles.value);
    file2.status = "uploading";
    file2.percentage = Math.round(evt.percent);
  };
  const handleSuccess = (response, rawFile) => {
    const file2 = getFile(rawFile);
    if (!file2)
      return;
    file2.status = "success";
    file2.response = response;
    props.onSuccess(response, file2, uploadFiles.value);
    props.onChange(file2, uploadFiles.value);
  };
  const handleStart = (file2) => {
    if (isNil(file2.uid))
      file2.uid = genFileId();
    const uploadFile = {
      name: file2.name,
      percentage: 0,
      status: "ready",
      size: file2.size,
      raw: file2,
      uid: file2.uid
    };
    if (props.listType === "picture-card" || props.listType === "picture") {
      try {
        uploadFile.url = URL.createObjectURL(file2);
      } catch (err) {
        debugWarn(SCOPE2, err.message);
        props.onError(err, uploadFile, uploadFiles.value);
      }
    }
    uploadFiles.value = [...uploadFiles.value, uploadFile];
    props.onChange(uploadFile, uploadFiles.value);
  };
  const handleRemove = async (file2) => {
    const uploadFile = file2 instanceof File ? getFile(file2) : file2;
    if (!uploadFile)
      throwError(SCOPE2, "file to be removed not found");
    const doRemove = (file22) => {
      abort(file22);
      removeFile(file22);
      props.onRemove(file22, uploadFiles.value);
      revokeFileObjectURL(file22);
    };
    if (props.beforeRemove) {
      const before = await props.beforeRemove(uploadFile, uploadFiles.value);
      if (before !== false)
        doRemove(uploadFile);
    } else {
      doRemove(uploadFile);
    }
  };
  function submit() {
    uploadFiles.value.filter(({ status }) => status === "ready").forEach(({ raw }) => {
      var _a2;
      return raw && ((_a2 = uploadRef.value) == null ? void 0 : _a2.upload(raw));
    });
  }
  watch(() => props.listType, (val) => {
    if (val !== "picture-card" && val !== "picture") {
      return;
    }
    uploadFiles.value = uploadFiles.value.map((file2) => {
      const { raw, url } = file2;
      if (!url && raw) {
        try {
          file2.url = URL.createObjectURL(raw);
        } catch (err) {
          props.onError(err, file2, uploadFiles.value);
        }
      }
      return file2;
    });
  });
  watch(uploadFiles, (files) => {
    for (const file2 of files) {
      file2.uid || (file2.uid = genFileId());
      file2.status || (file2.status = "success");
    }
  }, { immediate: true, deep: true });
  return {
    uploadFiles,
    abort,
    clearFiles,
    handleError,
    handleProgress,
    handleStart,
    handleSuccess,
    handleRemove,
    submit,
    revokeFileObjectURL
  };
};
var __default__5 = defineComponent({
  name: "ElUpload"
});
var _sfc_main$15 = defineComponent({
  ...__default__5,
  props: uploadProps,
  setup(__props, { expose }) {
    const props = __props;
    const disabled = useFormDisabled();
    const uploadRef = shallowRef();
    const {
      abort,
      submit,
      clearFiles,
      uploadFiles,
      handleStart,
      handleError,
      handleRemove,
      handleSuccess,
      handleProgress,
      revokeFileObjectURL: revokeFileObjectURL2
    } = useHandlers(props, uploadRef);
    const isPictureCard = computed(() => props.listType === "picture-card");
    const uploadContentProps2 = computed(() => ({
      ...props,
      fileList: uploadFiles.value,
      onStart: handleStart,
      onProgress: handleProgress,
      onSuccess: handleSuccess,
      onError: handleError,
      onRemove: handleRemove
    }));
    onBeforeUnmount(() => {
      uploadFiles.value.forEach(revokeFileObjectURL2);
    });
    provide(uploadContextKey, {
      accept: toRef(props, "accept")
    });
    expose({
      abort,
      submit,
      clearFiles,
      handleStart,
      handleRemove
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", null, [
        unref(isPictureCard) && _ctx.showFileList ? (openBlock(), createBlock(UploadList, {
          key: 0,
          disabled: unref(disabled),
          "list-type": _ctx.listType,
          files: unref(uploadFiles),
          crossorigin: _ctx.crossorigin,
          "handle-preview": _ctx.onPreview,
          onRemove: unref(handleRemove)
        }, createSlots({
          append: withCtx(() => [
            createVNode(UploadContent, mergeProps({
              ref_key: "uploadRef",
              ref: uploadRef
            }, unref(uploadContentProps2)), {
              default: withCtx(() => [
                _ctx.$slots.trigger ? renderSlot(_ctx.$slots, "trigger", { key: 0 }) : createCommentVNode("v-if", true),
                !_ctx.$slots.trigger && _ctx.$slots.default ? renderSlot(_ctx.$slots, "default", { key: 1 }) : createCommentVNode("v-if", true)
              ]),
              _: 3
            }, 16)
          ]),
          _: 2
        }, [
          _ctx.$slots.file ? {
            name: "default",
            fn: withCtx(({ file: file2, index }) => [
              renderSlot(_ctx.$slots, "file", {
                file: file2,
                index
              })
            ])
          } : void 0
        ]), 1032, ["disabled", "list-type", "files", "crossorigin", "handle-preview", "onRemove"])) : createCommentVNode("v-if", true),
        !unref(isPictureCard) || unref(isPictureCard) && !_ctx.showFileList ? (openBlock(), createBlock(UploadContent, mergeProps({
          key: 1,
          ref_key: "uploadRef",
          ref: uploadRef
        }, unref(uploadContentProps2)), {
          default: withCtx(() => [
            _ctx.$slots.trigger ? renderSlot(_ctx.$slots, "trigger", { key: 0 }) : createCommentVNode("v-if", true),
            !_ctx.$slots.trigger && _ctx.$slots.default ? renderSlot(_ctx.$slots, "default", { key: 1 }) : createCommentVNode("v-if", true)
          ]),
          _: 3
        }, 16)) : createCommentVNode("v-if", true),
        _ctx.$slots.trigger ? renderSlot(_ctx.$slots, "default", { key: 2 }) : createCommentVNode("v-if", true),
        renderSlot(_ctx.$slots, "tip"),
        !unref(isPictureCard) && _ctx.showFileList ? (openBlock(), createBlock(UploadList, {
          key: 3,
          disabled: unref(disabled),
          "list-type": _ctx.listType,
          files: unref(uploadFiles),
          crossorigin: _ctx.crossorigin,
          "handle-preview": _ctx.onPreview,
          onRemove: unref(handleRemove)
        }, createSlots({
          _: 2
        }, [
          _ctx.$slots.file ? {
            name: "default",
            fn: withCtx(({ file: file2, index }) => [
              renderSlot(_ctx.$slots, "file", {
                file: file2,
                index
              })
            ])
          } : void 0
        ]), 1032, ["disabled", "list-type", "files", "crossorigin", "handle-preview", "onRemove"])) : createCommentVNode("v-if", true)
      ]);
    };
  }
});
var Upload = _export_sfc2(_sfc_main$15, [["__file", "upload.vue"]]);
var ElUpload = withInstall(Upload);
var _hoisted_12 = { key: 0 };
var _hoisted_22 = { class: "elx-attachments-background" };
var _hoisted_32 = {
  key: 0,
  class: "elx-attachments-background-start"
};
var _hoisted_42 = {
  key: 1,
  class: "elx-attachments-background-end"
};
var _hoisted_52 = {
  key: 0,
  class: "elx-attachments-upload-placeholder"
};
var TOLERANCE = 1;
var _sfc_main6 = defineComponent({
  __name: "index",
  props: {
    items: { default: () => [] },
    overflow: { default: "scrollX" },
    listStyle: { default: () => ({}) },
    limit: {},
    hideUpload: { type: Boolean, default: false },
    uploadIconSize: { default: "64px" },
    dragTarget: { default: void 0 }
  },
  emits: ["uploadChange", "uploadSuccess", "uploadError", "uploadDrop", "deleteCard"],
  setup(__props, { expose: __expose, emit: __emit }) {
    const props = __props;
    const emits = __emit;
    const containerRef = ref(null);
    const wrapperRef = ref(null);
    const firstMount = ref(false);
    const pingStart = ref(false);
    const pingEnd = ref(false);
    function checkPing() {
      const containerEle = containerRef.value;
      if (!containerEle)
        return;
      if (props.overflow === "scrollX") {
        pingStart.value = Math.abs(containerEle.scrollLeft) >= TOLERANCE;
        pingEnd.value = containerEle.scrollWidth - containerEle.clientWidth - Math.abs(containerEle.scrollLeft) >= TOLERANCE;
      } else if (props.overflow === "scrollY") {
        pingStart.value = containerEle.scrollTop !== 0;
        pingEnd.value = containerEle.scrollHeight - containerEle.clientHeight !== containerEle.scrollTop;
      } else {
        pingStart.value = false;
        pingEnd.value = false;
      }
    }
    function onScrollOffset(offset) {
      const containerEle = containerRef.value;
      if (containerEle) {
        containerEle.scrollTo({
          left: props.overflow === "scrollX" ? containerEle.scrollLeft + offset * containerEle.clientWidth : containerEle.scrollLeft,
          top: props.overflow === "scrollY" ? containerEle.scrollTop + offset * containerEle.clientHeight : containerEle.scrollTop,
          behavior: "smooth"
        });
      }
    }
    function onScrollLeft() {
      onScrollOffset(-1);
    }
    function onScrollRight() {
      onScrollOffset(1);
    }
    const debouncedCheckPing = debounce2({ delay: 100 }, checkPing);
    const targetElement = ref(null);
    const isTargetDrag = ref(false);
    const debouncedStyle = debounce2({ delay: 100 }, toggleDragStyle);
    const _isOverLimit = computed(() => {
      if (props.limit && props.items.length >= props.limit) {
        return true;
      }
      return false;
    });
    const dropAreaRef = ref();
    function toggleDragStyle(isDrag) {
      isTargetDrag.value = isDrag;
      if (targetElement.value) {
        const isBodyTarget = targetElement.value === document.body;
        if (isDrag) {
          if (isBodyTarget && dropAreaRef.value) {
            dropAreaRef.value.style.position = "fixed";
            dropAreaRef.value.style.width = "100vw";
            dropAreaRef.value.style.height = "100vh";
            dropAreaRef.value.style.left = "0";
            dropAreaRef.value.style.top = "0";
          } else {
            targetElement.value.style.position = "relative";
          }
        } else {
          targetElement.value.style.position = "";
        }
      }
    }
    function handleUploadChange(file2, fileList) {
      emits("uploadChange", file2, fileList);
    }
    function handleUploadSuccess(response, file2, fileList) {
      emits("uploadSuccess", response, file2, fileList);
    }
    function handleUploadError(error, file2, fileList) {
      emits("uploadError", error, file2, fileList);
    }
    function getTargetElement() {
      if (!props.dragTarget)
        return wrapperRef.value;
      if (props.dragTarget instanceof HTMLElement) {
        return props.dragTarget;
      }
      if (typeof props.dragTarget === "string") {
        return document.getElementById(props.dragTarget);
      }
      if (isRef(props.dragTarget)) {
        return props.dragTarget.value;
      }
      return wrapperRef.value;
    }
    function targetDragEnter(event) {
      event.preventDefault();
      debouncedStyle(true);
    }
    function targetDropLeave(event) {
      event.preventDefault();
      const relatedTarget = event.relatedTarget;
      if (targetElement.value && targetElement.value.contains(relatedTarget)) {
        return;
      }
      debouncedStyle(false);
    }
    function targetDrop(event) {
      event.preventDefault();
      debouncedStyle(false);
      if (event.dataTransfer) {
        const files = event.dataTransfer.files;
        if (files.length) {
          emits("uploadDrop", [...files], { ...props });
        }
      }
    }
    function targetDragOver(event) {
      event.preventDefault();
    }
    function handleDelete(item, index) {
      emits("deleteCard", item, index);
      nextTick(() => debouncedCheckPing());
    }
    onMounted(() => {
      firstMount.value = true;
      nextTick(() => debouncedCheckPing());
      window.addEventListener("resize", debouncedCheckPing);
      if (wrapperRef.value) {
        targetElement.value = getTargetElement() || wrapperRef.value;
        targetElement.value.addEventListener("dragenter", targetDragEnter, false);
        targetElement.value.addEventListener("dragleave", targetDropLeave, false);
        targetElement.value.addEventListener("drop", targetDrop, false);
        targetElement.value.addEventListener("dragover", targetDragOver, false);
      }
    });
    onUnmounted(() => {
      window.removeEventListener("resize", debouncedCheckPing);
      if (targetElement.value) {
        targetElement.value.removeEventListener("dragenter", targetDragEnter, false);
        targetElement.value.removeEventListener("dragleave", targetDropLeave, false);
        targetElement.value.removeEventListener("drop", targetDrop, false);
        targetElement.value.removeEventListener("dragover", targetDragOver, false);
      }
    });
    watch(
      () => [props.overflow, props.items.length],
      () => {
        nextTick(() => debouncedCheckPing());
      },
      {
        immediate: true,
        // 组件初始化时立即调用一次
        deep: true
        // 如果 items 是对象或数组，需要深度监听
      }
    );
    watch(
      () => props.dragTarget,
      () => {
        nextTick(() => {
          if (wrapperRef.value) {
            targetElement.value = getTargetElement() || wrapperRef.value;
            targetElement.value.addEventListener("dragenter", targetDragEnter, false);
            targetElement.value.addEventListener("dragleave", targetDropLeave, false);
            targetElement.value.addEventListener("drop", targetDrop, false);
            targetElement.value.addEventListener("dragover", targetDragOver, false);
          }
        });
      },
      {
        immediate: true,
        // 组件初始化时立即调用一次
        deep: true
      }
    );
    __expose({
      onScrollLeft,
      onScrollRight,
      debouncedCheckPing
    });
    return (_ctx, _cache) => {
      const _component_el_icon = ElIcon;
      const _component_el_upload = ElUpload;
      const _component_el_button = ElButton;
      return openBlock(), createElementBlock("div", {
        ref_key: "wrapperRef",
        ref: wrapperRef,
        class: normalizeClass(["elx-attachments-wrapper", {
          "elx-attachments-overflow-ping-start": _ctx.overflow === "scrollX" && unref(pingStart),
          "elx-attachments-overflow-ping-end": _ctx.overflow === "scrollX" && unref(pingEnd)
        }]),
        style: normalizeStyle({
          ..._ctx.listStyle,
          "--elx-attachments-upload-icon-size": props.uploadIconSize
        })
      }, [
        !_ctx.items.length && !props.hideUpload ? (openBlock(), createElementBlock("div", _hoisted_12, [
          renderSlot(_ctx.$slots, "empty-upload", {}, () => [
            createVNode(_component_el_upload, mergeProps({ class: "elx-attachments-upload-btn" }, _ctx.$attrs, {
              "show-file-list": false,
              onChange: handleUploadChange,
              onSuccess: handleUploadSuccess,
              onError: handleUploadError
            }), {
              default: withCtx(() => [
                createVNode(_component_el_icon, { class: "uploader-icon" }, {
                  default: withCtx(() => [
                    createVNode(unref(plus_default))
                  ]),
                  _: 1
                })
              ]),
              _: 1
            }, 16)
          ], true)
        ])) : createCommentVNode("", true),
        createBaseVNode("div", _hoisted_22, [
          _ctx.overflow === "scrollX" && unref(pingStart) ? (openBlock(), createElementBlock("div", _hoisted_32)) : createCommentVNode("", true),
          _ctx.overflow === "scrollX" && unref(pingEnd) ? (openBlock(), createElementBlock("div", _hoisted_42)) : createCommentVNode("", true)
        ]),
        createBaseVNode("div", {
          ref_key: "containerRef",
          ref: containerRef,
          class: normalizeClass(["elx-attachments", {
            [`elx-attachments-overflow-${_ctx.overflow}`]: _ctx.overflow
          }]),
          style: normalizeStyle({
            ..._ctx.overflow === "scrollX" ? { whiteSpace: "nowrap", overflowX: "auto", overflowY: "hidden" } : {},
            ..._ctx.overflow === "scrollY" ? { overflowX: "hidden", overflowY: "auto" } : {},
            ..._ctx.overflow === "wrap" ? { display: "flex", flexWrap: "wrap" } : {}
          }),
          onScroll: _cache[0] || (_cache[0] = //@ts-ignore
          (...args) => unref(debouncedCheckPing) && unref(debouncedCheckPing)(...args))
        }, [
          _ctx.items.length ? (openBlock(), createElementBlock("div", {
            key: 0,
            class: normalizeClass({
              "elx-attachments-file-card-wrap": _ctx.overflow === "scrollX"
            })
          }, [
            renderSlot(_ctx.$slots, "file-list", { items: _ctx.items }, () => [
              (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.items, (item, index) => {
                return openBlock(), createElementBlock("div", {
                  key: item.uid,
                  class: "elx-attachments-card"
                }, [
                  createVNode(Transition, { name: "card-motion" }, {
                    default: withCtx(() => [
                      item.uid ? (openBlock(), createBlock(FilesCard, mergeProps({
                        key: 0,
                        ref_for: true
                      }, item, {
                        class: "elx-attachments-card-item",
                        onDelete: ($event) => handleDelete(item, index)
                      }), null, 16, ["onDelete"])) : createCommentVNode("", true)
                    ]),
                    _: 2
                  }, 1024)
                ]);
              }), 128))
            ], true),
            _ctx.items.length && !unref(_isOverLimit) && !props.hideUpload ? (openBlock(), createElementBlock("div", _hoisted_52, [
              renderSlot(_ctx.$slots, "no-empty-upload", {}, () => [
                createVNode(_component_el_upload, mergeProps(_ctx.$attrs, {
                  "show-file-list": false,
                  style: {
                    height: _ctx.overflow === "scrollY" && ""
                  },
                  class: "elx-attachments-upload-btn",
                  onChange: handleUploadChange,
                  onSuccess: handleUploadSuccess,
                  onError: handleUploadError
                }), {
                  trigger: withCtx(() => [
                    createVNode(_component_el_icon, { class: "uploader-icon" }, {
                      default: withCtx(() => [
                        createVNode(unref(plus_default))
                      ]),
                      _: 1
                    })
                  ]),
                  _: 1
                }, 16, ["style"])
              ], true)
            ])) : createCommentVNode("", true)
          ], 2)) : createCommentVNode("", true)
        ], 38),
        renderSlot(_ctx.$slots, "prev-button", {
          show: _ctx.overflow === "scrollX" && unref(pingStart),
          onScrollLeft
        }, () => [
          _ctx.overflow === "scrollX" && unref(pingStart) ? (openBlock(), createBlock(_component_el_button, {
            key: 0,
            size: "small",
            class: "elx-attachments-prev-btn",
            onClick: onScrollLeft
          }, {
            default: withCtx(() => [
              createVNode(_component_el_icon, null, {
                default: withCtx(() => [
                  createVNode(unref(arrow_left_bold_default))
                ]),
                _: 1
              })
            ]),
            _: 1
          })) : createCommentVNode("", true)
        ], true),
        renderSlot(_ctx.$slots, "next-button", {
          show: _ctx.overflow === "scrollX" && unref(pingEnd),
          onScrollRight
        }, () => [
          _ctx.overflow === "scrollX" && unref(pingEnd) ? (openBlock(), createBlock(_component_el_button, {
            key: 0,
            size: "small",
            class: "elx-attachments-next-btn",
            onClick: onScrollRight
          }, {
            default: withCtx(() => [
              createVNode(_component_el_icon, null, {
                default: withCtx(() => [
                  createVNode(unref(arrow_right_bold_default))
                ]),
                _: 1
              })
            ]),
            _: 1
          })) : createCommentVNode("", true)
        ], true),
        unref(targetElement) && unref(isTargetDrag) ? (openBlock(), createBlock(Teleport, {
          key: 1,
          to: unref(targetElement)
        }, [
          renderSlot(_ctx.$slots, "drop-area", {}, () => [
            createBaseVNode("div", {
              ref_key: "dropAreaRef",
              ref: dropAreaRef,
              class: "elx-attachments-drop-area"
            }, [
              createVNode(_component_el_icon, { class: "elx-attachments-drop-area-icon" }, {
                default: withCtx(() => [
                  createVNode(unref(upload_filled_default))
                ]),
                _: 1
              }),
              _cache[1] || (_cache[1] = createBaseVNode("div", { class: "elx-attachments-drop-area-text" }, " 在此处拖放文件上传 ", -1))
            ], 512)
          ], true)
        ], 8, ["to"])) : createCommentVNode("", true)
      ], 6);
    };
  }
});
var Attachments = _export_sfc(_sfc_main6, [["__scopeId", "data-v-012b5fbc"]]);

// node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/es/Bubble/index.js
import "/Users/Bone/Documents/Github/AI-RagFLow-Api/node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/index8.css";
var avatarProps = buildProps({
  size: {
    type: [Number, String],
    values: componentSizes,
    default: "",
    validator: (val) => isNumber(val)
  },
  shape: {
    type: String,
    values: ["circle", "square"],
    default: "circle"
  },
  icon: {
    type: iconPropType
  },
  src: {
    type: String,
    default: ""
  },
  alt: String,
  srcSet: String,
  fit: {
    type: definePropType(String),
    default: "cover"
  }
});
var avatarEmits = {
  error: (evt) => evt instanceof Event
};
var __default__6 = defineComponent({
  name: "ElAvatar"
});
var _sfc_main$16 = defineComponent({
  ...__default__6,
  props: avatarProps,
  emits: avatarEmits,
  setup(__props, { emit }) {
    const props = __props;
    const ns = useNamespace("avatar");
    const hasLoadError = ref(false);
    const avatarClass = computed(() => {
      const { size, icon, shape } = props;
      const classList = [ns.b()];
      if (isString$1(size))
        classList.push(ns.m(size));
      if (icon)
        classList.push(ns.m("icon"));
      if (shape)
        classList.push(ns.m(shape));
      return classList;
    });
    const sizeStyle = computed(() => {
      const { size } = props;
      return isNumber(size) ? ns.cssVarBlock({
        size: addUnit(size) || ""
      }) : void 0;
    });
    const fitStyle = computed(() => ({
      objectFit: props.fit
    }));
    watch(() => props.src, () => hasLoadError.value = false);
    function handleError(e) {
      hasLoadError.value = true;
      emit("error", e);
    }
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("span", {
        class: normalizeClass(unref(avatarClass)),
        style: normalizeStyle(unref(sizeStyle))
      }, [
        (_ctx.src || _ctx.srcSet) && !hasLoadError.value ? (openBlock(), createElementBlock("img", {
          key: 0,
          src: _ctx.src,
          alt: _ctx.alt,
          srcset: _ctx.srcSet,
          style: normalizeStyle(unref(fitStyle)),
          onError: handleError
        }, null, 44, ["src", "alt", "srcset"])) : _ctx.icon ? (openBlock(), createBlock(unref(ElIcon), { key: 1 }, {
          default: withCtx(() => [
            (openBlock(), createBlock(resolveDynamicComponent(_ctx.icon)))
          ]),
          _: 1
        })) : renderSlot(_ctx.$slots, "default", { key: 2 })
      ], 6);
    };
  }
});
var Avatar = _export_sfc2(_sfc_main$16, [["__file", "avatar.vue"]]);
var ElAvatar = withInstall(Avatar);
var _hoisted_13 = {
  key: 0,
  class: "el-bubble-avatar el-bubble-avatar-size"
};
var _hoisted_23 = {
  key: 1,
  class: "el-bubble-avatar-placeholder"
};
var _hoisted_33 = {
  key: 2,
  class: "el-bubble-avatar"
};
var _hoisted_43 = { class: "el-bubble-content-wrapper" };
var _hoisted_53 = {
  key: 0,
  class: "el-bubble-header"
};
var _hoisted_62 = {
  key: 2,
  class: "el-bubble-loading-wrap"
};
var _hoisted_72 = {
  key: 3,
  class: "el-bubble-loading-wrap"
};
var _hoisted_8 = {
  key: 1,
  class: "el-bubble-footer"
};
var _sfc_main7 = defineComponent({
  __name: "index",
  props: {
    content: { default: "" },
    reasoning_content: { default: "" },
    placement: { default: "start" },
    avatar: { default: "" },
    loading: { type: Boolean },
    shape: {},
    variant: { default: "filled" },
    isMarkdown: { type: Boolean },
    typing: { type: [Boolean, Object] },
    isFog: { type: [Boolean, Object] },
    maxWidth: { default: "500px" },
    avatarSize: { default: "" },
    avatarGap: { default: "12px" },
    avatarShape: { default: "circle" },
    avatarIcon: { default: "" },
    avatarSrcSet: { default: "" },
    avatarAlt: { default: "" },
    avatarFit: { default: "cover" },
    noStyle: { type: Boolean, default: false },
    highlight: { type: Function, default: void 0 },
    mdPlugins: { default: void 0 }
  },
  emits: ["start", "finish", "writing", "avatarError"],
  setup(__props, { expose: __expose, emit: __emit }) {
    const props = __props;
    const emits = __emit;
    const internalDestroyed = ref(false);
    const isTypingClass = ref(false);
    watch(() => props.content, (newVal, oldVal) => {
      if (newVal !== oldVal && internalDestroyed.value) {
        restart();
      }
    });
    const typewriterRef = ref();
    const instance = {
      interrupt,
      continue: continueTyping,
      restart,
      destroy,
      renderedContent: computed(() => {
        var _a2;
        return internalDestroyed.value ? "" : ((_a2 = typewriterRef.value) == null ? void 0 : _a2.renderedContent.value) || "";
      }),
      isTyping: computed(
        () => {
          var _a2;
          return !internalDestroyed.value && (((_a2 = typewriterRef.value) == null ? void 0 : _a2.isTyping.value) || false);
        }
      ),
      progress: computed(
        () => {
          var _a2;
          return internalDestroyed.value ? 0 : ((_a2 = typewriterRef.value) == null ? void 0 : _a2.progress.value) || 0;
        }
      )
    };
    const _step = computed(() => {
      if (typeof props.typing === "object" && props.typing.step)
        return props.typing.step;
      else
        return 2;
    });
    const _suffix = computed(() => {
      if (typeof props.typing === "object" && props.typing.suffix)
        return props.typing.suffix;
      else
        return "|";
    });
    const _interval = computed(() => {
      if (typeof props.typing === "object" && props.typing.interval)
        return props.typing.interval;
      else
        return 50;
    });
    const _typing = computed(() => {
      if (typeof props.typing === "undefined") {
        return false;
      } else if (typeof props.typing === "boolean") {
        return props.typing;
      } else {
        return {
          suffix: _suffix.value,
          step: _step.value,
          interval: _interval.value
        };
      }
    });
    function onStart(instance2) {
      emits("start", instance2);
    }
    function onFinish(instance2) {
      isTypingClass.value = false;
      emits("finish", instance2);
    }
    function onWriting(instance2) {
      isTypingClass.value = true;
      emits("writing", instance2);
    }
    function avatarError(e) {
      emits("avatarError", e);
    }
    function interrupt() {
      var _a2;
      (_a2 = typewriterRef.value) == null ? void 0 : _a2.interrupt();
    }
    function continueTyping() {
      var _a2;
      (_a2 = typewriterRef.value) == null ? void 0 : _a2.continue();
    }
    function restart() {
      var _a2;
      internalDestroyed.value = false;
      (_a2 = typewriterRef.value) == null ? void 0 : _a2.restart();
    }
    function destroy() {
      var _a2;
      (_a2 = typewriterRef.value) == null ? void 0 : _a2.destroy();
      internalDestroyed.value = true;
    }
    const dots = [1, 2, 3];
    onUnmounted(instance.destroy);
    __expose(instance);
    return (_ctx, _cache) => {
      const _component_el_avatar = ElAvatar;
      return !unref(internalDestroyed) ? (openBlock(), createElementBlock("div", {
        key: 0,
        class: normalizeClass(["el-bubble", {
          "el-bubble-start": _ctx.placement === "start",
          "el-bubble-end": _ctx.placement === "end",
          "el-bubble-no-style": _ctx.noStyle,
          "el-bubble-is-typing": unref(isTypingClass)
          // 新增动态类名
        }]),
        style: normalizeStyle({
          "--el-box-shadow-tertiary": `0 1px 2px 0 rgba(0, 0, 0, 0.03),
      0 1px 6px -1px rgba(0, 0, 0, 0.02),
      0 2px 4px 0 rgba(0, 0, 0, 0.02)`,
          "--bubble-content-max-width": `${_ctx.maxWidth}`,
          "--el-bubble-avatar-placeholder-width": `${_ctx.$slots.avatar ? "" : _ctx.avatarSize}`,
          "--el-bubble-avatar-placeholder-height": `${_ctx.$slots.avatar ? "" : _ctx.avatarSize}`,
          "--el-bubble-avatar-placeholder-gap": `${_ctx.avatarGap}`
        })
      }, [
        !_ctx.$slots.avatar && _ctx.avatar ? (openBlock(), createElementBlock("div", _hoisted_13, [
          createVNode(_component_el_avatar, {
            size: 0,
            src: _ctx.avatar,
            shape: _ctx.avatarShape,
            icon: _ctx.avatarIcon,
            "src-set": _ctx.avatarSrcSet,
            alt: _ctx.avatarFit,
            onError: avatarError
          }, null, 8, ["src", "shape", "icon", "src-set", "alt"])
        ])) : createCommentVNode("", true),
        !_ctx.$slots.avatar && !_ctx.avatar && _ctx.avatarSize ? (openBlock(), createElementBlock("div", _hoisted_23)) : createCommentVNode("", true),
        _ctx.$slots.avatar ? (openBlock(), createElementBlock("div", _hoisted_33, [
          renderSlot(_ctx.$slots, "avatar", {}, void 0, true)
        ])) : createCommentVNode("", true),
        createBaseVNode("div", _hoisted_43, [
          _ctx.$slots.header ? (openBlock(), createElementBlock("div", _hoisted_53, [
            renderSlot(_ctx.$slots, "header", {}, void 0, true)
          ])) : createCommentVNode("", true),
          createBaseVNode("div", {
            class: normalizeClass(["el-bubble-content", {
              "el-bubble-content-loading": _ctx.loading,
              "el-bubble-content-round": _ctx.shape === "round",
              "el-bubble-content-corner": _ctx.shape === "corner",
              "el-bubble-content-filled": _ctx.variant === "filled",
              "el-bubble-content-borderless": _ctx.variant === "borderless",
              "el-bubble-content-outlined": _ctx.variant === "outlined",
              "el-bubble-content-shadow": _ctx.variant === "shadow"
            }])
          }, [
            !_ctx.loading ? (openBlock(), createElementBlock("div", {
              key: 0,
              class: normalizeClass(["el-typewriter", {
                "no-content": !_ctx.content
              }])
            }, [
              !_ctx.$slots.content && _ctx.content ? (openBlock(), createBlock(Typewriter, {
                key: 0,
                ref_key: "typewriterRef",
                ref: typewriterRef,
                typing: unref(_typing),
                content: _ctx.content,
                "is-markdown": _ctx.isMarkdown,
                "is-fog": props.isFog,
                highlight: props.highlight,
                "md-plugins": props.mdPlugins,
                onStart,
                onWriting,
                onFinish
              }, null, 8, ["typing", "content", "is-markdown", "is-fog", "highlight", "md-plugins"])) : createCommentVNode("", true)
            ], 2)) : createCommentVNode("", true),
            !unref(internalDestroyed) && _ctx.$slots.content && !_ctx.loading ? renderSlot(_ctx.$slots, "content", { key: 1 }, void 0, true) : createCommentVNode("", true),
            _ctx.loading && !_ctx.$slots.loading ? (openBlock(), createElementBlock("div", _hoisted_62, [
              (openBlock(), createElementBlock(Fragment, null, renderList(dots, (_, index) => {
                return createBaseVNode("div", {
                  key: index,
                  class: "dot",
                  style: normalizeStyle({ animationDelay: `${index * 0.2}s` })
                }, null, 4);
              }), 64))
            ])) : createCommentVNode("", true),
            _ctx.loading && _ctx.$slots.loading ? (openBlock(), createElementBlock("div", _hoisted_72, [
              renderSlot(_ctx.$slots, "loading", {}, void 0, true)
            ])) : createCommentVNode("", true)
          ], 2),
          _ctx.$slots.footer ? (openBlock(), createElementBlock("div", _hoisted_8, [
            renderSlot(_ctx.$slots, "footer", {}, void 0, true)
          ])) : createCommentVNode("", true)
        ])
      ], 6)) : createCommentVNode("", true);
    };
  }
});
var Bubble = _export_sfc(_sfc_main7, [["__scopeId", "data-v-7186c661"]]);

// node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/es/BubbleList/loading.js
var _sfc_main8 = {};
var _hoisted_14 = {
  xmlns: "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink",
  version: "1.1",
  width: "704",
  height: "704",
  viewBox: "0 0 704 704"
};
function _sfc_render3(_ctx, _cache) {
  return openBlock(), createElementBlock("svg", _hoisted_14, _cache[0] || (_cache[0] = [
    createStaticVNode('<defs><filter id="master_svg0_62_10054" filterUnits="objectBoundingBox" color-interpolation-filters="sRGB" x="-0.030120481927710843" y="-0.030120481927710843" width="1.0602409638554218" height="1.0602409638554218"><feFlood flood-opacity="0" result="BackgroundImageFix"></feFlood><feBlend mode="normal" in="SourceGraphic" in2="BackgroundImageFix" result="shape"></feBlend><feGaussianBlur stdDeviation="5" result="effect1_foregroundBlur"></feGaussianBlur></filter><linearGradient id="master_svg1_62_10082" x1="0.5" y1="-0.13192443549633026" x2="0.42319029569625854" y2="1.368432641029358"><stop offset="9.145302325487137%" stop-color="currentColor" stop-opacity="1"></stop><stop offset="13.636428117752075%" stop-color="currentColor" stop-opacity="0.07539999485015869"></stop><stop offset="16.968481242656708%" stop-color="currentColor" stop-opacity="0"></stop></linearGradient></defs><g transform="matrix(0,1,-1,0,704,-664)" filter="url(#master_svg0_62_10054)"><path d="M1016,684C1199.359,684,1348,535.359,1348,352C1348,168.641,1199.359,20,1016,20C832.641,20,684,168.641,684,352C684,535.359,832.641,684,1016,684ZM1016,32C1192.731,32,1336,175.269,1336,352C1336,528.731,1192.731,672,1016,672C839.269,672,696,528.731,696,352C696,175.269,839.269,32,1016,32Z" fill-rule="evenodd" fill="url(#master_svg1_62_10082)" fill-opacity="1"></path></g>', 2)
  ]));
}
var loadingBg = _export_sfc(_sfc_main8, [["render", _sfc_render3]]);

// node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/es/BubbleList/index.js
import "/Users/Bone/Documents/Github/AI-RagFLow-Api/node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/index.css";
var useScrollDetector = (elementRef) => {
  const hasVertical = ref(false);
  const hasHorizontal = ref(false);
  const check = () => {
    const el = elementRef.value;
    if (!el)
      return;
    hasVertical.value = el.scrollHeight > el.clientHeight;
    hasHorizontal.value = el.scrollWidth > el.clientWidth;
  };
  onMounted(() => {
    check();
    const observer = new ResizeObserver(check);
    observer.observe(elementRef.value);
    onBeforeUnmount(() => observer.disconnect());
  });
  return {
    hasVertical,
    // 是否有纵向滚动条
    hasHorizontal,
    // 是否有横向滚动条
    check
    // 检查滚动条状态
  };
};
var threshold = 20;
var _sfc_main9 = defineComponent({
  __name: "index",
  props: {
    list: { default: () => [] },
    maxHeight: { default: "500px" },
    triggerIndices: { default: "only-last" },
    alwaysShowScrollbar: { type: Boolean, default: false },
    backButtonThreshold: { default: 80 },
    showBackButton: { type: Boolean, default: true },
    backButtonPosition: { default: () => {
      return { bottom: "20px", left: "calc(50% - 19px)" };
    } },
    btnLoading: { type: Boolean, default: true },
    btnColor: { default: "#409EFF" },
    btnIconSize: { default: 24 },
    highlight: { type: Function, default: void 0 },
    mdPlugins: { default: void 0 }
  },
  emits: ["complete"],
  setup(__props, { expose: __expose, emit: __emit }) {
    const props = __props;
    const emits = __emit;
    const scrollContainer = ref(null);
    const { hasVertical } = useScrollDetector(scrollContainer);
    const stopAutoScrollToBottom = ref(false);
    const lastScrollTop = ref(0);
    const accumulatedScrollUpDistance = ref(0);
    const resizeObserver = ref(null);
    const showBackToBottom = ref(false);
    const effectiveTriggerIndices = computed(() => {
      if (props.triggerIndices === "only-last") {
        const triggerIndices = props.list.filter((item) => item.typing).map((_, index) => index);
        return triggerIndices.length > 0 ? [triggerIndices[triggerIndices.length - 1]] : [];
      } else if (props.triggerIndices === "all") {
        return props.list.map((_, index) => index);
      } else if (Array.isArray(props.triggerIndices)) {
        const validIndices = getValidIndices(props.list, props.triggerIndices);
        return validIndices.length > 0 ? [validIndices[validIndices.length - 1]] : [];
      }
      return [];
    });
    function getValidIndices(list, indices) {
      const validIndices = [];
      for (let i = 0; i < indices.length; i++) {
        const index = indices[i];
        if (index < 0 || index >= list.length || !list[index].typing) ;
        else {
          validIndices.push(index);
        }
      }
      return validIndices;
    }
    watch(
      () => props.list.length,
      () => {
        if (props.list && props.list.length > 0) {
          nextTick(() => {
            autoScroll();
          });
        }
      },
      { immediate: true }
    );
    function scrollToTop() {
      stopAutoScrollToBottom.value = true;
      nextTick(() => {
        scrollContainer.value.scrollTop = 0;
      });
    }
    function scrollToBottom() {
      try {
        if (scrollContainer.value && scrollContainer.value.scrollHeight) {
          nextTick(() => {
            scrollContainer.value.scrollTop = scrollContainer.value.scrollHeight;
            stopAutoScrollToBottom.value = false;
          });
        }
      } catch (error) {
      }
    }
    function scrollToBubble(index) {
      const container = scrollContainer.value;
      if (!container)
        return;
      const bubbles = container.querySelectorAll(".el-bubble");
      if (index >= bubbles.length)
        return;
      stopAutoScrollToBottom.value = true;
      const targetBubble = bubbles[index];
      const containerRect = container.getBoundingClientRect();
      const bubbleRect = targetBubble.getBoundingClientRect();
      const scrollPosition = bubbleRect.top - containerRect.top + container.scrollTop;
      container.scrollTo({
        top: scrollPosition,
        behavior: "smooth"
      });
    }
    function autoScroll() {
      if (scrollContainer.value) {
        const listBubbles = scrollContainer.value.querySelectorAll(".el-bubble-content-wrapper");
        if (resizeObserver.value) {
          resizeObserver.value.disconnect();
        }
        const lastItem = listBubbles[listBubbles.length - 1];
        if (lastItem) {
          resizeObserver.value = new ResizeObserver(() => {
            if (!stopAutoScrollToBottom.value) {
              scrollToBottom();
            }
          });
          resizeObserver.value.observe(lastItem);
        }
      }
    }
    function handleBubbleComplete(index, instance) {
      if (effectiveTriggerIndices.value.includes(index)) {
        emits("complete", instance, index);
      }
    }
    function handleScroll() {
      if (scrollContainer.value) {
        const { scrollTop, scrollHeight, clientHeight } = scrollContainer.value;
        const distanceToBottom = scrollHeight - (scrollTop + clientHeight);
        showBackToBottom.value = props.showBackButton && distanceToBottom > props.backButtonThreshold;
        const isCloseToBottom = scrollTop + clientHeight >= scrollHeight - 30;
        const isScrollingUp = lastScrollTop.value > scrollTop;
        const isScrollingDown = lastScrollTop.value < scrollTop;
        const scrollDelta = lastScrollTop.value - scrollTop;
        lastScrollTop.value = scrollTop;
        if (isScrollingUp) {
          accumulatedScrollUpDistance.value += scrollDelta;
          if (accumulatedScrollUpDistance.value >= threshold) {
            if (!stopAutoScrollToBottom.value) {
              stopAutoScrollToBottom.value = true;
            }
            accumulatedScrollUpDistance.value = 0;
          }
        } else {
          accumulatedScrollUpDistance.value = 0;
        }
        if (isScrollingDown && isCloseToBottom) {
          if (stopAutoScrollToBottom.value) {
            stopAutoScrollToBottom.value = false;
          }
        }
      }
    }
    __expose({
      scrollToTop,
      scrollToBottom,
      scrollToBubble
    });
    return (_ctx, _cache) => {
      const _component_el_icon = ElIcon;
      return openBlock(), createElementBlock("div", {
        ref_key: "scrollContainer",
        ref: scrollContainer,
        class: normalizeClass(["el-bubble-list", { "always-scrollbar": props.alwaysShowScrollbar }]),
        style: normalizeStyle({
          "--el-bubble-list-max-height": `${_ctx.maxHeight}`,
          "--el-bubble-list-btn-size": `${props.btnIconSize}px`
        }),
        onScroll: handleScroll
      }, [
        (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.list, (item, index) => {
          return openBlock(), createBlock(Bubble, {
            key: index,
            content: item.content,
            placement: item.placement,
            loading: item.loading,
            shape: item.shape,
            variant: item.variant,
            "is-markdown": item.isMarkdown,
            "is-fog": item.isFog,
            typing: item.typing,
            "max-width": item.maxWidth,
            avatar: item.avatar,
            "avatar-size": item.avatarSize,
            "avatar-gap": item.avatarGap,
            "avatar-shape": item.avatarShape,
            "avatar-icon": item.avatarIcon,
            "avatar-src-set": item.avatarSrcSet,
            "avatar-alt": item.avatarAlt,
            "avatar-fit": item.avatarFit,
            "no-style": item.noStyle,
            highlight: item.highlight ? item.highlight : props.highlight,
            "md-plugins": item.mdPlugins ? item.mdPlugins : props.mdPlugins,
            onFinish: (instance) => handleBubbleComplete(index, instance)
          }, createSlots({ _: 2 }, [
            _ctx.$slots.avatar ? {
              name: "avatar",
              fn: withCtx(() => [
                renderSlot(_ctx.$slots, "avatar", { item }, void 0, true)
              ]),
              key: "0"
            } : void 0,
            _ctx.$slots.header ? {
              name: "header",
              fn: withCtx(() => [
                renderSlot(_ctx.$slots, "header", { item }, void 0, true)
              ]),
              key: "1"
            } : void 0,
            _ctx.$slots.content ? {
              name: "content",
              fn: withCtx(() => [
                renderSlot(_ctx.$slots, "content", { item }, void 0, true)
              ]),
              key: "2"
            } : void 0,
            _ctx.$slots.footer ? {
              name: "footer",
              fn: withCtx(() => [
                renderSlot(_ctx.$slots, "footer", { item }, void 0, true)
              ]),
              key: "3"
            } : void 0,
            _ctx.$slots.loading ? {
              name: "loading",
              fn: withCtx(() => [
                renderSlot(_ctx.$slots, "loading", { item }, void 0, true)
              ]),
              key: "4"
            } : void 0
          ]), 1032, ["content", "placement", "loading", "shape", "variant", "is-markdown", "is-fog", "typing", "max-width", "avatar", "avatar-size", "avatar-gap", "avatar-shape", "avatar-icon", "avatar-src-set", "avatar-alt", "avatar-fit", "no-style", "highlight", "md-plugins", "onFinish"]);
        }), 128)),
        unref(showBackToBottom) && unref(hasVertical) ? (openBlock(), createElementBlock("div", {
          key: 0,
          class: normalizeClass(["el-bubble-list-default-back-button", {
            "el-bubble-list-back-to-bottom-solt": _ctx.$slots.backToBottom
          }]),
          style: normalizeStyle({
            bottom: _ctx.backButtonPosition.bottom,
            left: _ctx.backButtonPosition.left
          }),
          onClick: scrollToBottom
        }, [
          renderSlot(_ctx.$slots, "backToBottom", {}, () => [
            createVNode(_component_el_icon, {
              class: "el-bubble-list-back-to-bottom-icon",
              style: normalizeStyle({ color: props.btnColor })
            }, {
              default: withCtx(() => [
                createVNode(unref(arrow_down_bold_default)),
                props.btnLoading ? (openBlock(), createBlock(loadingBg, {
                  key: 0,
                  class: "back-to-bottom-loading-svg-bg"
                })) : createCommentVNode("", true)
              ]),
              _: 1
            }, 8, ["style"])
          ], true)
        ], 6)) : createCommentVNode("", true)
      ], 38);
    };
  }
});
var BubbleList = _export_sfc(_sfc_main9, [["__scopeId", "data-v-2f7f5231"]]);

// node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/el-tooltip-m3ef_CN2.js
import "/Users/Bone/Documents/Github/AI-RagFLow-Api/node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/el-tooltip.css";
function castArray() {
  if (!arguments.length) {
    return [];
  }
  var value = arguments[0];
  return isArray(value) ? value : [value];
}

// node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/index.vue_vue_type_style_index_0_scoped_499173a8_lang-Dspc3KiZ.js
import "/Users/Bone/Documents/Github/AI-RagFLow-Api/node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/index13.css";
var get2 = (value, path, defaultValue) => {
  const segments = path.split(/[\.\[\]]/g);
  let current = value;
  for (const key of segments) {
    if (current === null)
      return defaultValue;
    if (current === void 0)
      return defaultValue;
    const dequoted = key.replace(/['"]/g, "");
    if (dequoted.trim() === "")
      continue;
    current = current[dequoted];
  }
  if (current === void 0)
    return defaultValue;
  return current;
};

// node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/es/Conversations/index.js
import "/Users/Bone/Documents/Github/AI-RagFLow-Api/node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/el-popper.css";

// node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/index-CGA7RalZ.js
var ariaProps = buildProps({
  ariaLabel: String,
  ariaOrientation: {
    type: String,
    values: ["horizontal", "vertical", "undefined"]
  },
  ariaControls: String
});
var useAriaProps = (arias) => {
  return pick(ariaProps, arias);
};
var POPPER_INJECTION_KEY = Symbol("popper");
var POPPER_CONTENT_INJECTION_KEY = Symbol("popperContent");
var roleTypes = [
  "dialog",
  "grid",
  "group",
  "listbox",
  "menu",
  "navigation",
  "tooltip",
  "tree"
];
var popperProps = buildProps({
  role: {
    type: String,
    values: roleTypes,
    default: "tooltip"
  }
});
var __default__$6 = defineComponent({
  name: "ElPopper",
  inheritAttrs: false
});
var _sfc_main$62 = defineComponent({
  ...__default__$6,
  props: popperProps,
  setup(__props, { expose }) {
    const props = __props;
    const triggerRef = ref();
    const popperInstanceRef = ref();
    const contentRef = ref();
    const referenceRef = ref();
    const role = computed(() => props.role);
    const popperProvides = {
      triggerRef,
      popperInstanceRef,
      contentRef,
      referenceRef,
      role
    };
    expose(popperProvides);
    provide(POPPER_INJECTION_KEY, popperProvides);
    return (_ctx, _cache) => {
      return renderSlot(_ctx.$slots, "default");
    };
  }
});
var Popper = _export_sfc2(_sfc_main$62, [["__file", "popper.vue"]]);
var popperArrowProps = buildProps({
  arrowOffset: {
    type: Number,
    default: 5
  }
});
var __default__$5 = defineComponent({
  name: "ElPopperArrow",
  inheritAttrs: false
});
var _sfc_main$52 = defineComponent({
  ...__default__$5,
  props: popperArrowProps,
  setup(__props, { expose }) {
    const props = __props;
    const ns = useNamespace("popper");
    const { arrowOffset, arrowRef, arrowStyle } = inject(POPPER_CONTENT_INJECTION_KEY, void 0);
    watch(() => props.arrowOffset, (val) => {
      arrowOffset.value = val;
    });
    onBeforeUnmount(() => {
      arrowRef.value = void 0;
    });
    expose({
      arrowRef
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("span", {
        ref_key: "arrowRef",
        ref: arrowRef,
        class: normalizeClass(unref(ns).e("arrow")),
        style: normalizeStyle(unref(arrowStyle)),
        "data-popper-arrow": ""
      }, null, 6);
    };
  }
});
var ElPopperArrow = _export_sfc2(_sfc_main$52, [["__file", "arrow.vue"]]);
var popperTriggerProps = buildProps({
  virtualRef: {
    type: definePropType(Object)
  },
  virtualTriggering: Boolean,
  onMouseenter: {
    type: definePropType(Function)
  },
  onMouseleave: {
    type: definePropType(Function)
  },
  onClick: {
    type: definePropType(Function)
  },
  onKeydown: {
    type: definePropType(Function)
  },
  onFocus: {
    type: definePropType(Function)
  },
  onBlur: {
    type: definePropType(Function)
  },
  onContextmenu: {
    type: definePropType(Function)
  },
  id: String,
  open: Boolean
});
var FORWARD_REF_INJECTION_KEY = Symbol("elForwardRef");
var useForwardRef = (forwardRef) => {
  const setForwardRef = (el) => {
    forwardRef.value = el;
  };
  provide(FORWARD_REF_INJECTION_KEY, {
    setForwardRef
  });
};
var useForwardRefDirective = (setForwardRef) => {
  return {
    mounted(el) {
      setForwardRef(el);
    },
    updated(el) {
      setForwardRef(el);
    },
    unmounted() {
      setForwardRef(null);
    }
  };
};
var NAME = "ElOnlyChild";
var OnlyChild = defineComponent({
  name: NAME,
  setup(_, {
    slots,
    attrs
  }) {
    var _a2;
    const forwardRefInjection = inject(FORWARD_REF_INJECTION_KEY);
    const forwardRefDirective = useForwardRefDirective((_a2 = forwardRefInjection == null ? void 0 : forwardRefInjection.setForwardRef) != null ? _a2 : NOOP);
    return () => {
      var _a22;
      const defaultSlot = (_a22 = slots.default) == null ? void 0 : _a22.call(slots, attrs);
      if (!defaultSlot)
        return null;
      if (defaultSlot.length > 1) {
        debugWarn(NAME, "requires exact only one valid child.");
        return null;
      }
      const firstLegitNode = findFirstLegitChild(defaultSlot);
      if (!firstLegitNode) {
        debugWarn(NAME, "no valid child node found");
        return null;
      }
      return withDirectives(cloneVNode(firstLegitNode, attrs), [[forwardRefDirective]]);
    };
  }
});
function findFirstLegitChild(node) {
  if (!node)
    return null;
  const children = node;
  for (const child of children) {
    if (isObject2(child)) {
      switch (child.type) {
        case Comment:
          continue;
        case Text:
        case "svg":
          return wrapTextContent(child);
        case Fragment:
          return findFirstLegitChild(child.children);
        default:
          return child;
      }
    }
    return wrapTextContent(child);
  }
  return null;
}
function wrapTextContent(s) {
  const ns = useNamespace("only-child");
  return createVNode("span", {
    "class": ns.e("content")
  }, [s]);
}
var __default__$4 = defineComponent({
  name: "ElPopperTrigger",
  inheritAttrs: false
});
var _sfc_main$43 = defineComponent({
  ...__default__$4,
  props: popperTriggerProps,
  setup(__props, { expose }) {
    const props = __props;
    const { role, triggerRef } = inject(POPPER_INJECTION_KEY, void 0);
    useForwardRef(triggerRef);
    const ariaControls = computed(() => {
      return ariaHaspopup.value ? props.id : void 0;
    });
    const ariaDescribedby = computed(() => {
      if (role && role.value === "tooltip") {
        return props.open && props.id ? props.id : void 0;
      }
      return void 0;
    });
    const ariaHaspopup = computed(() => {
      if (role && role.value !== "tooltip") {
        return role.value;
      }
      return void 0;
    });
    const ariaExpanded = computed(() => {
      return ariaHaspopup.value ? `${props.open}` : void 0;
    });
    let virtualTriggerAriaStopWatch = void 0;
    const TRIGGER_ELE_EVENTS = [
      "onMouseenter",
      "onMouseleave",
      "onClick",
      "onKeydown",
      "onFocus",
      "onBlur",
      "onContextmenu"
    ];
    onMounted(() => {
      watch(() => props.virtualRef, (virtualEl) => {
        if (virtualEl) {
          triggerRef.value = unrefElement(virtualEl);
        }
      }, {
        immediate: true
      });
      watch(triggerRef, (el, prevEl) => {
        virtualTriggerAriaStopWatch == null ? void 0 : virtualTriggerAriaStopWatch();
        virtualTriggerAriaStopWatch = void 0;
        if (isElement(el)) {
          TRIGGER_ELE_EVENTS.forEach((eventName) => {
            var _a2;
            const handler = props[eventName];
            if (handler) {
              el.addEventListener(eventName.slice(2).toLowerCase(), handler);
              (_a2 = prevEl == null ? void 0 : prevEl.removeEventListener) == null ? void 0 : _a2.call(prevEl, eventName.slice(2).toLowerCase(), handler);
            }
          });
          if (isFocusable(el)) {
            virtualTriggerAriaStopWatch = watch([ariaControls, ariaDescribedby, ariaHaspopup, ariaExpanded], (watches) => {
              [
                "aria-controls",
                "aria-describedby",
                "aria-haspopup",
                "aria-expanded"
              ].forEach((key, idx) => {
                isNil(watches[idx]) ? el.removeAttribute(key) : el.setAttribute(key, watches[idx]);
              });
            }, { immediate: true });
          }
        }
        if (isElement(prevEl) && isFocusable(prevEl)) {
          [
            "aria-controls",
            "aria-describedby",
            "aria-haspopup",
            "aria-expanded"
          ].forEach((key) => prevEl.removeAttribute(key));
        }
      }, {
        immediate: true
      });
    });
    onBeforeUnmount(() => {
      virtualTriggerAriaStopWatch == null ? void 0 : virtualTriggerAriaStopWatch();
      virtualTriggerAriaStopWatch = void 0;
      if (triggerRef.value && isElement(triggerRef.value)) {
        const el = triggerRef.value;
        TRIGGER_ELE_EVENTS.forEach((eventName) => {
          const handler = props[eventName];
          if (handler) {
            el.removeEventListener(eventName.slice(2).toLowerCase(), handler);
          }
        });
        triggerRef.value = void 0;
      }
    });
    expose({
      triggerRef
    });
    return (_ctx, _cache) => {
      return !_ctx.virtualTriggering ? (openBlock(), createBlock(unref(OnlyChild), mergeProps({ key: 0 }, _ctx.$attrs, {
        "aria-controls": unref(ariaControls),
        "aria-describedby": unref(ariaDescribedby),
        "aria-expanded": unref(ariaExpanded),
        "aria-haspopup": unref(ariaHaspopup)
      }), {
        default: withCtx(() => [
          renderSlot(_ctx.$slots, "default")
        ]),
        _: 3
      }, 16, ["aria-controls", "aria-describedby", "aria-expanded", "aria-haspopup"])) : createCommentVNode("v-if", true);
    };
  }
});
var ElPopperTrigger = _export_sfc2(_sfc_main$43, [["__file", "trigger.vue"]]);
var E = "top";
var R = "bottom";
var W = "right";
var P = "left";
var me = "auto";
var G = [E, R, W, P];
var U = "start";
var J = "end";
var Xe = "clippingParents";
var je = "viewport";
var K = "popper";
var Ye = "reference";
var De = G.reduce(function(t, e) {
  return t.concat([e + "-" + U, e + "-" + J]);
}, []);
var Ee = [].concat(G, [me]).reduce(function(t, e) {
  return t.concat([e, e + "-" + U, e + "-" + J]);
}, []);
var Ge = "beforeRead";
var Je = "read";
var Ke = "afterRead";
var Qe = "beforeMain";
var Ze = "main";
var et = "afterMain";
var tt = "beforeWrite";
var nt = "write";
var rt = "afterWrite";
var ot = [Ge, Je, Ke, Qe, Ze, et, tt, nt, rt];
function C(t) {
  return t ? (t.nodeName || "").toLowerCase() : null;
}
function H(t) {
  if (t == null) return window;
  if (t.toString() !== "[object Window]") {
    var e = t.ownerDocument;
    return e && e.defaultView || window;
  }
  return t;
}
function Q(t) {
  var e = H(t).Element;
  return t instanceof e || t instanceof Element;
}
function B(t) {
  var e = H(t).HTMLElement;
  return t instanceof e || t instanceof HTMLElement;
}
function Pe(t) {
  if (typeof ShadowRoot == "undefined") return false;
  var e = H(t).ShadowRoot;
  return t instanceof e || t instanceof ShadowRoot;
}
function Mt(t) {
  var e = t.state;
  Object.keys(e.elements).forEach(function(n) {
    var r = e.styles[n] || {}, o = e.attributes[n] || {}, i = e.elements[n];
    !B(i) || !C(i) || (Object.assign(i.style, r), Object.keys(o).forEach(function(a) {
      var s = o[a];
      s === false ? i.removeAttribute(a) : i.setAttribute(a, s === true ? "" : s);
    }));
  });
}
function Rt(t) {
  var e = t.state, n = { popper: { position: e.options.strategy, left: "0", top: "0", margin: "0" }, arrow: { position: "absolute" }, reference: {} };
  return Object.assign(e.elements.popper.style, n.popper), e.styles = n, e.elements.arrow && Object.assign(e.elements.arrow.style, n.arrow), function() {
    Object.keys(e.elements).forEach(function(r) {
      var o = e.elements[r], i = e.attributes[r] || {}, a = Object.keys(e.styles.hasOwnProperty(r) ? e.styles[r] : n[r]), s = a.reduce(function(f, c) {
        return f[c] = "", f;
      }, {});
      !B(o) || !C(o) || (Object.assign(o.style, s), Object.keys(i).forEach(function(f) {
        o.removeAttribute(f);
      }));
    });
  };
}
var Ae = { name: "applyStyles", enabled: true, phase: "write", fn: Mt, effect: Rt, requires: ["computeStyles"] };
function q(t) {
  return t.split("-")[0];
}
var X = Math.max;
var ve = Math.min;
var Z = Math.round;
function ee(t, e) {
  e === void 0 && (e = false);
  var n = t.getBoundingClientRect(), r = 1, o = 1;
  if (B(t) && e) {
    var i = t.offsetHeight, a = t.offsetWidth;
    a > 0 && (r = Z(n.width) / a || 1), i > 0 && (o = Z(n.height) / i || 1);
  }
  return { width: n.width / r, height: n.height / o, top: n.top / o, right: n.right / r, bottom: n.bottom / o, left: n.left / r, x: n.left / r, y: n.top / o };
}
function ke(t) {
  var e = ee(t), n = t.offsetWidth, r = t.offsetHeight;
  return Math.abs(e.width - n) <= 1 && (n = e.width), Math.abs(e.height - r) <= 1 && (r = e.height), { x: t.offsetLeft, y: t.offsetTop, width: n, height: r };
}
function it(t, e) {
  var n = e.getRootNode && e.getRootNode();
  if (t.contains(e)) return true;
  if (n && Pe(n)) {
    var r = e;
    do {
      if (r && t.isSameNode(r)) return true;
      r = r.parentNode || r.host;
    } while (r);
  }
  return false;
}
function N(t) {
  return H(t).getComputedStyle(t);
}
function Wt(t) {
  return ["table", "td", "th"].indexOf(C(t)) >= 0;
}
function I(t) {
  return ((Q(t) ? t.ownerDocument : t.document) || window.document).documentElement;
}
function ge(t) {
  return C(t) === "html" ? t : t.assignedSlot || t.parentNode || (Pe(t) ? t.host : null) || I(t);
}
function at(t) {
  return !B(t) || N(t).position === "fixed" ? null : t.offsetParent;
}
function Bt(t) {
  var e = navigator.userAgent.toLowerCase().indexOf("firefox") !== -1, n = navigator.userAgent.indexOf("Trident") !== -1;
  if (n && B(t)) {
    var r = N(t);
    if (r.position === "fixed") return null;
  }
  var o = ge(t);
  for (Pe(o) && (o = o.host); B(o) && ["html", "body"].indexOf(C(o)) < 0; ) {
    var i = N(o);
    if (i.transform !== "none" || i.perspective !== "none" || i.contain === "paint" || ["transform", "perspective"].indexOf(i.willChange) !== -1 || e && i.willChange === "filter" || e && i.filter && i.filter !== "none") return o;
    o = o.parentNode;
  }
  return null;
}
function se(t) {
  for (var e = H(t), n = at(t); n && Wt(n) && N(n).position === "static"; ) n = at(n);
  return n && (C(n) === "html" || C(n) === "body" && N(n).position === "static") ? e : n || Bt(t) || e;
}
function Le(t) {
  return ["top", "bottom"].indexOf(t) >= 0 ? "x" : "y";
}
function fe(t, e, n) {
  return X(t, ve(e, n));
}
function St(t, e, n) {
  var r = fe(t, e, n);
  return r > n ? n : r;
}
function st() {
  return { top: 0, right: 0, bottom: 0, left: 0 };
}
function ft(t) {
  return Object.assign({}, st(), t);
}
function ct(t, e) {
  return e.reduce(function(n, r) {
    return n[r] = t, n;
  }, {});
}
var Tt = function(t, e) {
  return t = typeof t == "function" ? t(Object.assign({}, e.rects, { placement: e.placement })) : t, ft(typeof t != "number" ? t : ct(t, G));
};
function Ht(t) {
  var e, n = t.state, r = t.name, o = t.options, i = n.elements.arrow, a = n.modifiersData.popperOffsets, s = q(n.placement), f = Le(s), c = [P, W].indexOf(s) >= 0, u = c ? "height" : "width";
  if (!(!i || !a)) {
    var m = Tt(o.padding, n), v = ke(i), l = f === "y" ? E : P, h2 = f === "y" ? R : W, p = n.rects.reference[u] + n.rects.reference[f] - a[f] - n.rects.popper[u], g = a[f] - n.rects.reference[f], x = se(i), y = x ? f === "y" ? x.clientHeight || 0 : x.clientWidth || 0 : 0, $ = p / 2 - g / 2, d = m[l], b = y - v[u] - m[h2], w = y / 2 - v[u] / 2 + $, O = fe(d, w, b), j = f;
    n.modifiersData[r] = (e = {}, e[j] = O, e.centerOffset = O - w, e);
  }
}
function Ct(t) {
  var e = t.state, n = t.options, r = n.element, o = r === void 0 ? "[data-popper-arrow]" : r;
  o != null && (typeof o == "string" && (o = e.elements.popper.querySelector(o), !o) || !it(e.elements.popper, o) || (e.elements.arrow = o));
}
var pt = { name: "arrow", enabled: true, phase: "main", fn: Ht, effect: Ct, requires: ["popperOffsets"], requiresIfExists: ["preventOverflow"] };
function te(t) {
  return t.split("-")[1];
}
var qt = { top: "auto", right: "auto", bottom: "auto", left: "auto" };
function Vt(t) {
  var e = t.x, n = t.y, r = window, o = r.devicePixelRatio || 1;
  return { x: Z(e * o) / o || 0, y: Z(n * o) / o || 0 };
}
function ut(t) {
  var e, n = t.popper, r = t.popperRect, o = t.placement, i = t.variation, a = t.offsets, s = t.position, f = t.gpuAcceleration, c = t.adaptive, u = t.roundOffsets, m = t.isFixed, v = a.x, l = v === void 0 ? 0 : v, h2 = a.y, p = h2 === void 0 ? 0 : h2, g = typeof u == "function" ? u({ x: l, y: p }) : { x: l, y: p };
  l = g.x, p = g.y;
  var x = a.hasOwnProperty("x"), y = a.hasOwnProperty("y"), $ = P, d = E, b = window;
  if (c) {
    var w = se(n), O = "clientHeight", j = "clientWidth";
    if (w === H(n) && (w = I(n), N(w).position !== "static" && s === "absolute" && (O = "scrollHeight", j = "scrollWidth")), w = w, o === E || (o === P || o === W) && i === J) {
      d = R;
      var A = m && w === b && b.visualViewport ? b.visualViewport.height : w[O];
      p -= A - r.height, p *= f ? 1 : -1;
    }
    if (o === P || (o === E || o === R) && i === J) {
      $ = W;
      var k = m && w === b && b.visualViewport ? b.visualViewport.width : w[j];
      l -= k - r.width, l *= f ? 1 : -1;
    }
  }
  var D = Object.assign({ position: s }, c && qt), S = u === true ? Vt({ x: l, y: p }) : { x: l, y: p };
  if (l = S.x, p = S.y, f) {
    var L;
    return Object.assign({}, D, (L = {}, L[d] = y ? "0" : "", L[$] = x ? "0" : "", L.transform = (b.devicePixelRatio || 1) <= 1 ? "translate(" + l + "px, " + p + "px)" : "translate3d(" + l + "px, " + p + "px, 0)", L));
  }
  return Object.assign({}, D, (e = {}, e[d] = y ? p + "px" : "", e[$] = x ? l + "px" : "", e.transform = "", e));
}
function Nt(t) {
  var e = t.state, n = t.options, r = n.gpuAcceleration, o = r === void 0 ? true : r, i = n.adaptive, a = i === void 0 ? true : i, s = n.roundOffsets, f = s === void 0 ? true : s, c = { placement: q(e.placement), variation: te(e.placement), popper: e.elements.popper, popperRect: e.rects.popper, gpuAcceleration: o, isFixed: e.options.strategy === "fixed" };
  e.modifiersData.popperOffsets != null && (e.styles.popper = Object.assign({}, e.styles.popper, ut(Object.assign({}, c, { offsets: e.modifiersData.popperOffsets, position: e.options.strategy, adaptive: a, roundOffsets: f })))), e.modifiersData.arrow != null && (e.styles.arrow = Object.assign({}, e.styles.arrow, ut(Object.assign({}, c, { offsets: e.modifiersData.arrow, position: "absolute", adaptive: false, roundOffsets: f })))), e.attributes.popper = Object.assign({}, e.attributes.popper, { "data-popper-placement": e.placement });
}
var Me = { name: "computeStyles", enabled: true, phase: "beforeWrite", fn: Nt, data: {} };
var ye = { passive: true };
function It(t) {
  var e = t.state, n = t.instance, r = t.options, o = r.scroll, i = o === void 0 ? true : o, a = r.resize, s = a === void 0 ? true : a, f = H(e.elements.popper), c = [].concat(e.scrollParents.reference, e.scrollParents.popper);
  return i && c.forEach(function(u) {
    u.addEventListener("scroll", n.update, ye);
  }), s && f.addEventListener("resize", n.update, ye), function() {
    i && c.forEach(function(u) {
      u.removeEventListener("scroll", n.update, ye);
    }), s && f.removeEventListener("resize", n.update, ye);
  };
}
var Re = { name: "eventListeners", enabled: true, phase: "write", fn: function() {
}, effect: It, data: {} };
var _t = { left: "right", right: "left", bottom: "top", top: "bottom" };
function be(t) {
  return t.replace(/left|right|bottom|top/g, function(e) {
    return _t[e];
  });
}
var zt = { start: "end", end: "start" };
function lt(t) {
  return t.replace(/start|end/g, function(e) {
    return zt[e];
  });
}
function We(t) {
  var e = H(t), n = e.pageXOffset, r = e.pageYOffset;
  return { scrollLeft: n, scrollTop: r };
}
function Be(t) {
  return ee(I(t)).left + We(t).scrollLeft;
}
function Ft(t) {
  var e = H(t), n = I(t), r = e.visualViewport, o = n.clientWidth, i = n.clientHeight, a = 0, s = 0;
  return r && (o = r.width, i = r.height, /^((?!chrome|android).)*safari/i.test(navigator.userAgent) || (a = r.offsetLeft, s = r.offsetTop)), { width: o, height: i, x: a + Be(t), y: s };
}
function Ut(t) {
  var e, n = I(t), r = We(t), o = (e = t.ownerDocument) == null ? void 0 : e.body, i = X(n.scrollWidth, n.clientWidth, o ? o.scrollWidth : 0, o ? o.clientWidth : 0), a = X(n.scrollHeight, n.clientHeight, o ? o.scrollHeight : 0, o ? o.clientHeight : 0), s = -r.scrollLeft + Be(t), f = -r.scrollTop;
  return N(o || n).direction === "rtl" && (s += X(n.clientWidth, o ? o.clientWidth : 0) - i), { width: i, height: a, x: s, y: f };
}
function Se(t) {
  var e = N(t), n = e.overflow, r = e.overflowX, o = e.overflowY;
  return /auto|scroll|overlay|hidden/.test(n + o + r);
}
function dt(t) {
  return ["html", "body", "#document"].indexOf(C(t)) >= 0 ? t.ownerDocument.body : B(t) && Se(t) ? t : dt(ge(t));
}
function ce(t, e) {
  var n;
  e === void 0 && (e = []);
  var r = dt(t), o = r === ((n = t.ownerDocument) == null ? void 0 : n.body), i = H(r), a = o ? [i].concat(i.visualViewport || [], Se(r) ? r : []) : r, s = e.concat(a);
  return o ? s : s.concat(ce(ge(a)));
}
function Te(t) {
  return Object.assign({}, t, { left: t.x, top: t.y, right: t.x + t.width, bottom: t.y + t.height });
}
function Xt(t) {
  var e = ee(t);
  return e.top = e.top + t.clientTop, e.left = e.left + t.clientLeft, e.bottom = e.top + t.clientHeight, e.right = e.left + t.clientWidth, e.width = t.clientWidth, e.height = t.clientHeight, e.x = e.left, e.y = e.top, e;
}
function ht(t, e) {
  return e === je ? Te(Ft(t)) : Q(e) ? Xt(e) : Te(Ut(I(t)));
}
function Yt(t) {
  var e = ce(ge(t)), n = ["absolute", "fixed"].indexOf(N(t).position) >= 0, r = n && B(t) ? se(t) : t;
  return Q(r) ? e.filter(function(o) {
    return Q(o) && it(o, r) && C(o) !== "body";
  }) : [];
}
function Gt(t, e, n) {
  var r = e === "clippingParents" ? Yt(t) : [].concat(e), o = [].concat(r, [n]), i = o[0], a = o.reduce(function(s, f) {
    var c = ht(t, f);
    return s.top = X(c.top, s.top), s.right = ve(c.right, s.right), s.bottom = ve(c.bottom, s.bottom), s.left = X(c.left, s.left), s;
  }, ht(t, i));
  return a.width = a.right - a.left, a.height = a.bottom - a.top, a.x = a.left, a.y = a.top, a;
}
function mt(t) {
  var e = t.reference, n = t.element, r = t.placement, o = r ? q(r) : null, i = r ? te(r) : null, a = e.x + e.width / 2 - n.width / 2, s = e.y + e.height / 2 - n.height / 2, f;
  switch (o) {
    case E:
      f = { x: a, y: e.y - n.height };
      break;
    case R:
      f = { x: a, y: e.y + e.height };
      break;
    case W:
      f = { x: e.x + e.width, y: s };
      break;
    case P:
      f = { x: e.x - n.width, y: s };
      break;
    default:
      f = { x: e.x, y: e.y };
  }
  var c = o ? Le(o) : null;
  if (c != null) {
    var u = c === "y" ? "height" : "width";
    switch (i) {
      case U:
        f[c] = f[c] - (e[u] / 2 - n[u] / 2);
        break;
      case J:
        f[c] = f[c] + (e[u] / 2 - n[u] / 2);
        break;
    }
  }
  return f;
}
function ne(t, e) {
  e === void 0 && (e = {});
  var n = e, r = n.placement, o = r === void 0 ? t.placement : r, i = n.boundary, a = i === void 0 ? Xe : i, s = n.rootBoundary, f = s === void 0 ? je : s, c = n.elementContext, u = c === void 0 ? K : c, m = n.altBoundary, v = m === void 0 ? false : m, l = n.padding, h2 = l === void 0 ? 0 : l, p = ft(typeof h2 != "number" ? h2 : ct(h2, G)), g = u === K ? Ye : K, x = t.rects.popper, y = t.elements[v ? g : u], $ = Gt(Q(y) ? y : y.contextElement || I(t.elements.popper), a, f), d = ee(t.elements.reference), b = mt({ reference: d, element: x, placement: o }), w = Te(Object.assign({}, x, b)), O = u === K ? w : d, j = { top: $.top - O.top + p.top, bottom: O.bottom - $.bottom + p.bottom, left: $.left - O.left + p.left, right: O.right - $.right + p.right }, A = t.modifiersData.offset;
  if (u === K && A) {
    var k = A[o];
    Object.keys(j).forEach(function(D) {
      var S = [W, R].indexOf(D) >= 0 ? 1 : -1, L = [E, R].indexOf(D) >= 0 ? "y" : "x";
      j[D] += k[L] * S;
    });
  }
  return j;
}
function Jt(t, e) {
  e === void 0 && (e = {});
  var n = e, r = n.placement, o = n.boundary, i = n.rootBoundary, a = n.padding, s = n.flipVariations, f = n.allowedAutoPlacements, c = f === void 0 ? Ee : f, u = te(r), m = u ? s ? De : De.filter(function(h2) {
    return te(h2) === u;
  }) : G, v = m.filter(function(h2) {
    return c.indexOf(h2) >= 0;
  });
  v.length === 0 && (v = m);
  var l = v.reduce(function(h2, p) {
    return h2[p] = ne(t, { placement: p, boundary: o, rootBoundary: i, padding: a })[q(p)], h2;
  }, {});
  return Object.keys(l).sort(function(h2, p) {
    return l[h2] - l[p];
  });
}
function Kt(t) {
  if (q(t) === me) return [];
  var e = be(t);
  return [lt(t), e, lt(e)];
}
function Qt(t) {
  var e = t.state, n = t.options, r = t.name;
  if (!e.modifiersData[r]._skip) {
    for (var o = n.mainAxis, i = o === void 0 ? true : o, a = n.altAxis, s = a === void 0 ? true : a, f = n.fallbackPlacements, c = n.padding, u = n.boundary, m = n.rootBoundary, v = n.altBoundary, l = n.flipVariations, h2 = l === void 0 ? true : l, p = n.allowedAutoPlacements, g = e.options.placement, x = q(g), y = x === g, $ = f || (y || !h2 ? [be(g)] : Kt(g)), d = [g].concat($).reduce(function(z, V) {
      return z.concat(q(V) === me ? Jt(e, { placement: V, boundary: u, rootBoundary: m, padding: c, flipVariations: h2, allowedAutoPlacements: p }) : V);
    }, []), b = e.rects.reference, w = e.rects.popper, O = /* @__PURE__ */ new Map(), j = true, A = d[0], k = 0; k < d.length; k++) {
      var D = d[k], S = q(D), L = te(D) === U, re = [E, R].indexOf(S) >= 0, oe = re ? "width" : "height", M = ne(e, { placement: D, boundary: u, rootBoundary: m, altBoundary: v, padding: c }), T = re ? L ? W : P : L ? R : E;
      b[oe] > w[oe] && (T = be(T));
      var pe = be(T), _ = [];
      if (i && _.push(M[S] <= 0), s && _.push(M[T] <= 0, M[pe] <= 0), _.every(function(z) {
        return z;
      })) {
        A = D, j = false;
        break;
      }
      O.set(D, _);
    }
    if (j) for (var ue = h2 ? 3 : 1, xe = function(z) {
      var V = d.find(function(de) {
        var ae = O.get(de);
        if (ae) return ae.slice(0, z).every(function(Y) {
          return Y;
        });
      });
      if (V) return A = V, "break";
    }, ie = ue; ie > 0; ie--) {
      var le = xe(ie);
      if (le === "break") break;
    }
    e.placement !== A && (e.modifiersData[r]._skip = true, e.placement = A, e.reset = true);
  }
}
var vt = { name: "flip", enabled: true, phase: "main", fn: Qt, requiresIfExists: ["offset"], data: { _skip: false } };
function gt(t, e, n) {
  return n === void 0 && (n = { x: 0, y: 0 }), { top: t.top - e.height - n.y, right: t.right - e.width + n.x, bottom: t.bottom - e.height + n.y, left: t.left - e.width - n.x };
}
function yt(t) {
  return [E, W, R, P].some(function(e) {
    return t[e] >= 0;
  });
}
function Zt(t) {
  var e = t.state, n = t.name, r = e.rects.reference, o = e.rects.popper, i = e.modifiersData.preventOverflow, a = ne(e, { elementContext: "reference" }), s = ne(e, { altBoundary: true }), f = gt(a, r), c = gt(s, o, i), u = yt(f), m = yt(c);
  e.modifiersData[n] = { referenceClippingOffsets: f, popperEscapeOffsets: c, isReferenceHidden: u, hasPopperEscaped: m }, e.attributes.popper = Object.assign({}, e.attributes.popper, { "data-popper-reference-hidden": u, "data-popper-escaped": m });
}
var bt = { name: "hide", enabled: true, phase: "main", requiresIfExists: ["preventOverflow"], fn: Zt };
function en(t, e, n) {
  var r = q(t), o = [P, E].indexOf(r) >= 0 ? -1 : 1, i = typeof n == "function" ? n(Object.assign({}, e, { placement: t })) : n, a = i[0], s = i[1];
  return a = a || 0, s = (s || 0) * o, [P, W].indexOf(r) >= 0 ? { x: s, y: a } : { x: a, y: s };
}
function tn(t) {
  var e = t.state, n = t.options, r = t.name, o = n.offset, i = o === void 0 ? [0, 0] : o, a = Ee.reduce(function(u, m) {
    return u[m] = en(m, e.rects, i), u;
  }, {}), s = a[e.placement], f = s.x, c = s.y;
  e.modifiersData.popperOffsets != null && (e.modifiersData.popperOffsets.x += f, e.modifiersData.popperOffsets.y += c), e.modifiersData[r] = a;
}
var wt = { name: "offset", enabled: true, phase: "main", requires: ["popperOffsets"], fn: tn };
function nn(t) {
  var e = t.state, n = t.name;
  e.modifiersData[n] = mt({ reference: e.rects.reference, element: e.rects.popper, placement: e.placement });
}
var He = { name: "popperOffsets", enabled: true, phase: "read", fn: nn, data: {} };
function rn(t) {
  return t === "x" ? "y" : "x";
}
function on(t) {
  var e = t.state, n = t.options, r = t.name, o = n.mainAxis, i = o === void 0 ? true : o, a = n.altAxis, s = a === void 0 ? false : a, f = n.boundary, c = n.rootBoundary, u = n.altBoundary, m = n.padding, v = n.tether, l = v === void 0 ? true : v, h2 = n.tetherOffset, p = h2 === void 0 ? 0 : h2, g = ne(e, { boundary: f, rootBoundary: c, padding: m, altBoundary: u }), x = q(e.placement), y = te(e.placement), $ = !y, d = Le(x), b = rn(d), w = e.modifiersData.popperOffsets, O = e.rects.reference, j = e.rects.popper, A = typeof p == "function" ? p(Object.assign({}, e.rects, { placement: e.placement })) : p, k = typeof A == "number" ? { mainAxis: A, altAxis: A } : Object.assign({ mainAxis: 0, altAxis: 0 }, A), D = e.modifiersData.offset ? e.modifiersData.offset[e.placement] : null, S = { x: 0, y: 0 };
  if (w) {
    if (i) {
      var L, re = d === "y" ? E : P, oe = d === "y" ? R : W, M = d === "y" ? "height" : "width", T = w[d], pe = T + g[re], _ = T - g[oe], ue = l ? -j[M] / 2 : 0, xe = y === U ? O[M] : j[M], ie = y === U ? -j[M] : -O[M], le = e.elements.arrow, z = l && le ? ke(le) : { width: 0, height: 0 }, V = e.modifiersData["arrow#persistent"] ? e.modifiersData["arrow#persistent"].padding : st(), de = V[re], ae = V[oe], Y = fe(0, O[M], z[M]), jt = $ ? O[M] / 2 - ue - Y - de - k.mainAxis : xe - Y - de - k.mainAxis, Dt = $ ? -O[M] / 2 + ue + Y + ae + k.mainAxis : ie + Y + ae + k.mainAxis, Oe = e.elements.arrow && se(e.elements.arrow), Et = Oe ? d === "y" ? Oe.clientTop || 0 : Oe.clientLeft || 0 : 0, Ce = (L = D == null ? void 0 : D[d]) != null ? L : 0, Pt = T + jt - Ce - Et, At = T + Dt - Ce, qe = fe(l ? ve(pe, Pt) : pe, T, l ? X(_, At) : _);
      w[d] = qe, S[d] = qe - T;
    }
    if (s) {
      var Ve, kt = d === "x" ? E : P, Lt = d === "x" ? R : W, F = w[b], he = b === "y" ? "height" : "width", Ne = F + g[kt], Ie = F - g[Lt], $e = [E, P].indexOf(x) !== -1, _e = (Ve = D == null ? void 0 : D[b]) != null ? Ve : 0, ze = $e ? Ne : F - O[he] - j[he] - _e + k.altAxis, Fe = $e ? F + O[he] + j[he] - _e - k.altAxis : Ie, Ue = l && $e ? St(ze, F, Fe) : fe(l ? ze : Ne, F, l ? Fe : Ie);
      w[b] = Ue, S[b] = Ue - F;
    }
    e.modifiersData[r] = S;
  }
}
var xt = { name: "preventOverflow", enabled: true, phase: "main", fn: on, requiresIfExists: ["offset"] };
function an(t) {
  return { scrollLeft: t.scrollLeft, scrollTop: t.scrollTop };
}
function sn(t) {
  return t === H(t) || !B(t) ? We(t) : an(t);
}
function fn(t) {
  var e = t.getBoundingClientRect(), n = Z(e.width) / t.offsetWidth || 1, r = Z(e.height) / t.offsetHeight || 1;
  return n !== 1 || r !== 1;
}
function cn(t, e, n) {
  n === void 0 && (n = false);
  var r = B(e), o = B(e) && fn(e), i = I(e), a = ee(t, o), s = { scrollLeft: 0, scrollTop: 0 }, f = { x: 0, y: 0 };
  return (r || !r && !n) && ((C(e) !== "body" || Se(i)) && (s = sn(e)), B(e) ? (f = ee(e, true), f.x += e.clientLeft, f.y += e.clientTop) : i && (f.x = Be(i))), { x: a.left + s.scrollLeft - f.x, y: a.top + s.scrollTop - f.y, width: a.width, height: a.height };
}
function pn(t) {
  var e = /* @__PURE__ */ new Map(), n = /* @__PURE__ */ new Set(), r = [];
  t.forEach(function(i) {
    e.set(i.name, i);
  });
  function o(i) {
    n.add(i.name);
    var a = [].concat(i.requires || [], i.requiresIfExists || []);
    a.forEach(function(s) {
      if (!n.has(s)) {
        var f = e.get(s);
        f && o(f);
      }
    }), r.push(i);
  }
  return t.forEach(function(i) {
    n.has(i.name) || o(i);
  }), r;
}
function un(t) {
  var e = pn(t);
  return ot.reduce(function(n, r) {
    return n.concat(e.filter(function(o) {
      return o.phase === r;
    }));
  }, []);
}
function ln(t) {
  var e;
  return function() {
    return e || (e = new Promise(function(n) {
      Promise.resolve().then(function() {
        e = void 0, n(t());
      });
    })), e;
  };
}
function dn(t) {
  var e = t.reduce(function(n, r) {
    var o = n[r.name];
    return n[r.name] = o ? Object.assign({}, o, r, { options: Object.assign({}, o.options, r.options), data: Object.assign({}, o.data, r.data) }) : r, n;
  }, {});
  return Object.keys(e).map(function(n) {
    return e[n];
  });
}
var Ot = { placement: "bottom", modifiers: [], strategy: "absolute" };
function $t() {
  for (var t = arguments.length, e = new Array(t), n = 0; n < t; n++) e[n] = arguments[n];
  return !e.some(function(r) {
    return !(r && typeof r.getBoundingClientRect == "function");
  });
}
function we(t) {
  t === void 0 && (t = {});
  var e = t, n = e.defaultModifiers, r = n === void 0 ? [] : n, o = e.defaultOptions, i = o === void 0 ? Ot : o;
  return function(a, s, f) {
    f === void 0 && (f = i);
    var c = { placement: "bottom", orderedModifiers: [], options: Object.assign({}, Ot, i), modifiersData: {}, elements: { reference: a, popper: s }, attributes: {}, styles: {} }, u = [], m = false, v = { state: c, setOptions: function(p) {
      var g = typeof p == "function" ? p(c.options) : p;
      h2(), c.options = Object.assign({}, i, c.options, g), c.scrollParents = { reference: Q(a) ? ce(a) : a.contextElement ? ce(a.contextElement) : [], popper: ce(s) };
      var x = un(dn([].concat(r, c.options.modifiers)));
      return c.orderedModifiers = x.filter(function(y) {
        return y.enabled;
      }), l(), v.update();
    }, forceUpdate: function() {
      if (!m) {
        var p = c.elements, g = p.reference, x = p.popper;
        if ($t(g, x)) {
          c.rects = { reference: cn(g, se(x), c.options.strategy === "fixed"), popper: ke(x) }, c.reset = false, c.placement = c.options.placement, c.orderedModifiers.forEach(function(j) {
            return c.modifiersData[j.name] = Object.assign({}, j.data);
          });
          for (var y = 0; y < c.orderedModifiers.length; y++) {
            if (c.reset === true) {
              c.reset = false, y = -1;
              continue;
            }
            var $ = c.orderedModifiers[y], d = $.fn, b = $.options, w = b === void 0 ? {} : b, O = $.name;
            typeof d == "function" && (c = d({ state: c, options: w, name: O, instance: v }) || c);
          }
        }
      }
    }, update: ln(function() {
      return new Promise(function(p) {
        v.forceUpdate(), p(c);
      });
    }), destroy: function() {
      h2(), m = true;
    } };
    if (!$t(a, s)) return v;
    v.setOptions(f).then(function(p) {
      !m && f.onFirstUpdate && f.onFirstUpdate(p);
    });
    function l() {
      c.orderedModifiers.forEach(function(p) {
        var g = p.name, x = p.options, y = x === void 0 ? {} : x, $ = p.effect;
        if (typeof $ == "function") {
          var d = $({ state: c, name: g, instance: v, options: y }), b = function() {
          };
          u.push(d || b);
        }
      });
    }
    function h2() {
      u.forEach(function(p) {
        return p();
      }), u = [];
    }
    return v;
  };
}
we();
var mn = [Re, He, Me, Ae];
we({ defaultModifiers: mn });
var gn = [Re, He, Me, Ae, wt, vt, xt, pt, bt];
var yn = we({ defaultModifiers: gn });
var POSITIONING_STRATEGIES = ["fixed", "absolute"];
var popperCoreConfigProps = buildProps({
  boundariesPadding: {
    type: Number,
    default: 0
  },
  fallbackPlacements: {
    type: definePropType(Array),
    default: void 0
  },
  gpuAcceleration: {
    type: Boolean,
    default: true
  },
  offset: {
    type: Number,
    default: 12
  },
  placement: {
    type: String,
    values: Ee,
    default: "bottom"
  },
  popperOptions: {
    type: definePropType(Object),
    default: () => ({})
  },
  strategy: {
    type: String,
    values: POSITIONING_STRATEGIES,
    default: "absolute"
  }
});
var popperContentProps = buildProps({
  ...popperCoreConfigProps,
  id: String,
  style: {
    type: definePropType([String, Array, Object])
  },
  className: {
    type: definePropType([String, Array, Object])
  },
  effect: {
    type: definePropType(String),
    default: "dark"
  },
  visible: Boolean,
  enterable: {
    type: Boolean,
    default: true
  },
  pure: Boolean,
  focusOnShow: {
    type: Boolean,
    default: false
  },
  trapping: {
    type: Boolean,
    default: false
  },
  popperClass: {
    type: definePropType([String, Array, Object])
  },
  popperStyle: {
    type: definePropType([String, Array, Object])
  },
  referenceEl: {
    type: definePropType(Object)
  },
  triggerTargetEl: {
    type: definePropType(Object)
  },
  stopPopperMouseEvent: {
    type: Boolean,
    default: true
  },
  virtualTriggering: Boolean,
  zIndex: Number,
  ...useAriaProps(["ariaLabel"])
});
var popperContentEmits = {
  mouseenter: (evt) => evt instanceof MouseEvent,
  mouseleave: (evt) => evt instanceof MouseEvent,
  focus: () => true,
  blur: () => true,
  close: () => true
};
var usePopperContentFocusTrap = (props, emit) => {
  const trapped = ref(false);
  const focusStartRef = ref();
  const onFocusAfterTrapped = () => {
    emit("focus");
  };
  const onFocusAfterReleased = (event) => {
    var _a2;
    if (((_a2 = event.detail) == null ? void 0 : _a2.focusReason) !== "pointer") {
      focusStartRef.value = "first";
      emit("blur");
    }
  };
  const onFocusInTrap = (event) => {
    if (props.visible && !trapped.value) {
      if (event.target) {
        focusStartRef.value = event.target;
      }
      trapped.value = true;
    }
  };
  const onFocusoutPrevented = (event) => {
    if (!props.trapping) {
      if (event.detail.focusReason === "pointer") {
        event.preventDefault();
      }
      trapped.value = false;
    }
  };
  const onReleaseRequested = () => {
    trapped.value = false;
    emit("close");
  };
  return {
    focusStartRef,
    trapped,
    onFocusAfterReleased,
    onFocusAfterTrapped,
    onFocusInTrap,
    onFocusoutPrevented,
    onReleaseRequested
  };
};
var buildPopperOptions = (props, modifiers = []) => {
  const { placement, strategy, popperOptions } = props;
  const options = {
    placement,
    strategy,
    ...popperOptions,
    modifiers: [...genModifiers(props), ...modifiers]
  };
  deriveExtraModifiers(options, popperOptions == null ? void 0 : popperOptions.modifiers);
  return options;
};
var unwrapMeasurableEl = ($el) => {
  if (!isClient)
    return;
  return unrefElement($el);
};
function genModifiers(options) {
  const { offset, gpuAcceleration, fallbackPlacements } = options;
  return [
    {
      name: "offset",
      options: {
        offset: [0, offset != null ? offset : 12]
      }
    },
    {
      name: "preventOverflow",
      options: {
        padding: {
          top: 2,
          bottom: 2,
          left: 5,
          right: 5
        }
      }
    },
    {
      name: "flip",
      options: {
        padding: 5,
        fallbackPlacements
      }
    },
    {
      name: "computeStyles",
      options: {
        gpuAcceleration
      }
    }
  ];
}
function deriveExtraModifiers(options, modifiers) {
  if (modifiers) {
    options.modifiers = [...options.modifiers, ...modifiers != null ? modifiers : []];
  }
}
var usePopper = (referenceElementRef, popperElementRef, opts = {}) => {
  const stateUpdater = {
    name: "updateState",
    enabled: true,
    phase: "write",
    fn: ({ state }) => {
      const derivedState = deriveState(state);
      Object.assign(states.value, derivedState);
    },
    requires: ["computeStyles"]
  };
  const options = computed(() => {
    const { onFirstUpdate, placement, strategy, modifiers } = unref(opts);
    return {
      onFirstUpdate,
      placement: placement || "bottom",
      strategy: strategy || "absolute",
      modifiers: [
        ...modifiers || [],
        stateUpdater,
        { name: "applyStyles", enabled: false }
      ]
    };
  });
  const instanceRef = shallowRef();
  const states = ref({
    styles: {
      popper: {
        position: unref(options).strategy,
        left: "0",
        top: "0"
      },
      arrow: {
        position: "absolute"
      }
    },
    attributes: {}
  });
  const destroy = () => {
    if (!instanceRef.value)
      return;
    instanceRef.value.destroy();
    instanceRef.value = void 0;
  };
  watch(options, (newOptions) => {
    const instance = unref(instanceRef);
    if (instance) {
      instance.setOptions(newOptions);
    }
  }, {
    deep: true
  });
  watch([referenceElementRef, popperElementRef], ([referenceElement, popperElement]) => {
    destroy();
    if (!referenceElement || !popperElement)
      return;
    instanceRef.value = yn(referenceElement, popperElement, unref(options));
  });
  onBeforeUnmount(() => {
    destroy();
  });
  return {
    state: computed(() => {
      var _a2;
      return { ...((_a2 = unref(instanceRef)) == null ? void 0 : _a2.state) || {} };
    }),
    styles: computed(() => unref(states).styles),
    attributes: computed(() => unref(states).attributes),
    update: () => {
      var _a2;
      return (_a2 = unref(instanceRef)) == null ? void 0 : _a2.update();
    },
    forceUpdate: () => {
      var _a2;
      return (_a2 = unref(instanceRef)) == null ? void 0 : _a2.forceUpdate();
    },
    instanceRef: computed(() => unref(instanceRef))
  };
};
function deriveState(state) {
  const elements = Object.keys(state.elements);
  const styles = fromPairs(elements.map((element) => [element, state.styles[element] || {}]));
  const attributes = fromPairs(elements.map((element) => [element, state.attributes[element]]));
  return {
    styles,
    attributes
  };
}
var DEFAULT_ARROW_OFFSET = 0;
var usePopperContent = (props) => {
  const { popperInstanceRef, contentRef, triggerRef, role } = inject(POPPER_INJECTION_KEY, void 0);
  const arrowRef = ref();
  const arrowOffset = ref();
  const eventListenerModifier = computed(() => {
    return {
      name: "eventListeners",
      enabled: !!props.visible
    };
  });
  const arrowModifier = computed(() => {
    var _a2;
    const arrowEl = unref(arrowRef);
    const offset = (_a2 = unref(arrowOffset)) != null ? _a2 : DEFAULT_ARROW_OFFSET;
    return {
      name: "arrow",
      enabled: !isUndefined(arrowEl),
      options: {
        element: arrowEl,
        padding: offset
      }
    };
  });
  const options = computed(() => {
    return {
      onFirstUpdate: () => {
        update();
      },
      ...buildPopperOptions(props, [
        unref(arrowModifier),
        unref(eventListenerModifier)
      ])
    };
  });
  const computedReference = computed(() => unwrapMeasurableEl(props.referenceEl) || unref(triggerRef));
  const { attributes, state, styles, update, forceUpdate, instanceRef } = usePopper(computedReference, contentRef, options);
  watch(instanceRef, (instance) => popperInstanceRef.value = instance, {
    flush: "sync"
  });
  onMounted(() => {
    watch(() => {
      var _a2;
      return (_a2 = unref(computedReference)) == null ? void 0 : _a2.getBoundingClientRect();
    }, () => {
      update();
    });
  });
  return {
    attributes,
    arrowRef,
    contentRef,
    instanceRef,
    state,
    styles,
    role,
    forceUpdate,
    update
  };
};
var usePopperContentDOM = (props, {
  attributes,
  styles,
  role
}) => {
  const { nextZIndex } = useZIndex();
  const ns = useNamespace("popper");
  const contentAttrs = computed(() => unref(attributes).popper);
  const contentZIndex = ref(isNumber(props.zIndex) ? props.zIndex : nextZIndex());
  const contentClass = computed(() => [
    ns.b(),
    ns.is("pure", props.pure),
    ns.is(props.effect),
    props.popperClass
  ]);
  const contentStyle = computed(() => {
    return [
      { zIndex: unref(contentZIndex) },
      unref(styles).popper,
      props.popperStyle || {}
    ];
  });
  const ariaModal = computed(() => role.value === "dialog" ? "false" : void 0);
  const arrowStyle = computed(() => unref(styles).arrow || {});
  const updateZIndex = () => {
    contentZIndex.value = isNumber(props.zIndex) ? props.zIndex : nextZIndex();
  };
  return {
    ariaModal,
    arrowStyle,
    contentAttrs,
    contentClass,
    contentStyle,
    contentZIndex,
    updateZIndex
  };
};
var __default__$32 = defineComponent({
  name: "ElPopperContent"
});
var _sfc_main$33 = defineComponent({
  ...__default__$32,
  props: popperContentProps,
  emits: popperContentEmits,
  setup(__props, { expose, emit }) {
    const props = __props;
    const {
      focusStartRef,
      trapped,
      onFocusAfterReleased,
      onFocusAfterTrapped,
      onFocusInTrap,
      onFocusoutPrevented,
      onReleaseRequested
    } = usePopperContentFocusTrap(props, emit);
    const { attributes, arrowRef, contentRef, styles, instanceRef, role, update } = usePopperContent(props);
    const {
      ariaModal,
      arrowStyle,
      contentAttrs,
      contentClass,
      contentStyle,
      updateZIndex
    } = usePopperContentDOM(props, {
      styles,
      attributes,
      role
    });
    const formItemContext = inject(formItemContextKey, void 0);
    const arrowOffset = ref();
    provide(POPPER_CONTENT_INJECTION_KEY, {
      arrowStyle,
      arrowRef,
      arrowOffset
    });
    if (formItemContext) {
      provide(formItemContextKey, {
        ...formItemContext,
        addInputId: NOOP,
        removeInputId: NOOP
      });
    }
    let triggerTargetAriaStopWatch = void 0;
    const updatePopper = (shouldUpdateZIndex = true) => {
      update();
      shouldUpdateZIndex && updateZIndex();
    };
    const togglePopperAlive = () => {
      updatePopper(false);
      if (props.visible && props.focusOnShow) {
        trapped.value = true;
      } else if (props.visible === false) {
        trapped.value = false;
      }
    };
    onMounted(() => {
      watch(() => props.triggerTargetEl, (triggerTargetEl, prevTriggerTargetEl) => {
        triggerTargetAriaStopWatch == null ? void 0 : triggerTargetAriaStopWatch();
        triggerTargetAriaStopWatch = void 0;
        const el = unref(triggerTargetEl || contentRef.value);
        const prevEl = unref(prevTriggerTargetEl || contentRef.value);
        if (isElement(el)) {
          triggerTargetAriaStopWatch = watch([role, () => props.ariaLabel, ariaModal, () => props.id], (watches) => {
            ["role", "aria-label", "aria-modal", "id"].forEach((key, idx) => {
              isNil(watches[idx]) ? el.removeAttribute(key) : el.setAttribute(key, watches[idx]);
            });
          }, { immediate: true });
        }
        if (prevEl !== el && isElement(prevEl)) {
          ["role", "aria-label", "aria-modal", "id"].forEach((key) => {
            prevEl.removeAttribute(key);
          });
        }
      }, { immediate: true });
      watch(() => props.visible, togglePopperAlive, { immediate: true });
    });
    onBeforeUnmount(() => {
      triggerTargetAriaStopWatch == null ? void 0 : triggerTargetAriaStopWatch();
      triggerTargetAriaStopWatch = void 0;
    });
    expose({
      popperContentRef: contentRef,
      popperInstanceRef: instanceRef,
      updatePopper,
      contentStyle
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", mergeProps({
        ref_key: "contentRef",
        ref: contentRef
      }, unref(contentAttrs), {
        style: unref(contentStyle),
        class: unref(contentClass),
        tabindex: "-1",
        onMouseenter: (e) => _ctx.$emit("mouseenter", e),
        onMouseleave: (e) => _ctx.$emit("mouseleave", e)
      }), [
        createVNode(unref(ElFocusTrap), {
          trapped: unref(trapped),
          "trap-on-focus-in": true,
          "focus-trap-el": unref(contentRef),
          "focus-start-el": unref(focusStartRef),
          onFocusAfterTrapped: unref(onFocusAfterTrapped),
          onFocusAfterReleased: unref(onFocusAfterReleased),
          onFocusin: unref(onFocusInTrap),
          onFocusoutPrevented: unref(onFocusoutPrevented),
          onReleaseRequested: unref(onReleaseRequested)
        }, {
          default: withCtx(() => [
            renderSlot(_ctx.$slots, "default")
          ]),
          _: 3
        }, 8, ["trapped", "focus-trap-el", "focus-start-el", "onFocusAfterTrapped", "onFocusAfterReleased", "onFocusin", "onFocusoutPrevented", "onReleaseRequested"])
      ], 16, ["onMouseenter", "onMouseleave"]);
    };
  }
});
var ElPopperContent = _export_sfc2(_sfc_main$33, [["__file", "content.vue"]]);
var ElPopper = withInstall(Popper);
var TOOLTIP_INJECTION_KEY = Symbol("elTooltip");
function useTimeout() {
  let timeoutHandle;
  const registerTimeout = (fn2, delay) => {
    cancelTimeout();
    timeoutHandle = window.setTimeout(fn2, delay);
  };
  const cancelTimeout = () => window.clearTimeout(timeoutHandle);
  tryOnScopeDispose(() => cancelTimeout());
  return {
    registerTimeout,
    cancelTimeout
  };
}
var useDelayedToggleProps = buildProps({
  showAfter: {
    type: Number,
    default: 0
  },
  hideAfter: {
    type: Number,
    default: 200
  },
  autoClose: {
    type: Number,
    default: 0
  }
});
var useDelayedToggle = ({
  showAfter,
  hideAfter,
  autoClose,
  open,
  close
}) => {
  const { registerTimeout } = useTimeout();
  const {
    registerTimeout: registerTimeoutForAutoClose,
    cancelTimeout: cancelTimeoutForAutoClose
  } = useTimeout();
  const onOpen = (event) => {
    registerTimeout(() => {
      open(event);
      const _autoClose = unref(autoClose);
      if (isNumber(_autoClose) && _autoClose > 0) {
        registerTimeoutForAutoClose(() => {
          close(event);
        }, _autoClose);
      }
    }, unref(showAfter));
  };
  const onClose = (event) => {
    cancelTimeoutForAutoClose();
    registerTimeout(() => {
      close(event);
    }, unref(hideAfter));
  };
  return {
    onOpen,
    onClose
  };
};
var useTooltipContentProps = buildProps({
  ...useDelayedToggleProps,
  ...popperContentProps,
  appendTo: {
    type: teleportProps.to.type
  },
  content: {
    type: String,
    default: ""
  },
  rawContent: Boolean,
  persistent: Boolean,
  visible: {
    type: definePropType(Boolean),
    default: null
  },
  transition: String,
  teleported: {
    type: Boolean,
    default: true
  },
  disabled: Boolean,
  ...useAriaProps(["ariaLabel"])
});
var useTooltipTriggerProps = buildProps({
  ...popperTriggerProps,
  disabled: Boolean,
  trigger: {
    type: definePropType([String, Array]),
    default: "hover"
  },
  triggerKeys: {
    type: definePropType(Array),
    default: () => [EVENT_CODE.enter, EVENT_CODE.numpadEnter, EVENT_CODE.space]
  }
});
var _prop = buildProp({
  type: definePropType(Boolean),
  default: null
});
var _event = buildProp({
  type: definePropType(Function)
});
var createModelToggleComposable = (name) => {
  const updateEventKey = `update:${name}`;
  const updateEventKeyRaw2 = `onUpdate:${name}`;
  const useModelToggleEmits2 = [updateEventKey];
  const useModelToggleProps2 = {
    [name]: _prop,
    [updateEventKeyRaw2]: _event
  };
  const useModelToggle2 = ({
    indicator,
    toggleReason,
    shouldHideWhenRouteChanges,
    shouldProceed,
    onShow,
    onHide
  }) => {
    const instance = getCurrentInstance();
    const { emit } = instance;
    const props = instance.props;
    const hasUpdateHandler = computed(() => isFunction$1(props[updateEventKeyRaw2]));
    const isModelBindingAbsent = computed(() => props[name] === null);
    const doShow = (event) => {
      if (indicator.value === true) {
        return;
      }
      indicator.value = true;
      if (toggleReason) {
        toggleReason.value = event;
      }
      if (isFunction$1(onShow)) {
        onShow(event);
      }
    };
    const doHide = (event) => {
      if (indicator.value === false) {
        return;
      }
      indicator.value = false;
      if (toggleReason) {
        toggleReason.value = event;
      }
      if (isFunction$1(onHide)) {
        onHide(event);
      }
    };
    const show = (event) => {
      if (props.disabled === true || isFunction$1(shouldProceed) && !shouldProceed())
        return;
      const shouldEmit = hasUpdateHandler.value && isClient;
      if (shouldEmit) {
        emit(updateEventKey, true);
      }
      if (isModelBindingAbsent.value || !shouldEmit) {
        doShow(event);
      }
    };
    const hide = (event) => {
      if (props.disabled === true || !isClient)
        return;
      const shouldEmit = hasUpdateHandler.value && isClient;
      if (shouldEmit) {
        emit(updateEventKey, false);
      }
      if (isModelBindingAbsent.value || !shouldEmit) {
        doHide(event);
      }
    };
    const onChange = (val) => {
      if (!isBoolean(val))
        return;
      if (props.disabled && val) {
        if (hasUpdateHandler.value) {
          emit(updateEventKey, false);
        }
      } else if (indicator.value !== val) {
        if (val) {
          doShow();
        } else {
          doHide();
        }
      }
    };
    const toggle = () => {
      if (indicator.value) {
        hide();
      } else {
        show();
      }
    };
    watch(() => props[name], onChange);
    if (shouldHideWhenRouteChanges && instance.appContext.config.globalProperties.$route !== void 0) {
      watch(() => ({
        ...instance.proxy.$route
      }), () => {
        if (shouldHideWhenRouteChanges.value && indicator.value) {
          hide();
        }
      });
    }
    onMounted(() => {
      onChange(props[name]);
    });
    return {
      hide,
      show,
      toggle,
      hasUpdateHandler
    };
  };
  return {
    useModelToggle: useModelToggle2,
    useModelToggleProps: useModelToggleProps2,
    useModelToggleEmits: useModelToggleEmits2
  };
};
var {
  useModelToggleProps: useTooltipModelToggleProps,
  useModelToggleEmits: useTooltipModelToggleEmits,
  useModelToggle: useTooltipModelToggle
} = createModelToggleComposable("visible");
var useTooltipProps = buildProps({
  ...popperProps,
  ...useTooltipModelToggleProps,
  ...useTooltipContentProps,
  ...useTooltipTriggerProps,
  ...popperArrowProps,
  showArrow: {
    type: Boolean,
    default: true
  }
});
var tooltipEmits = [
  ...useTooltipModelToggleEmits,
  "before-show",
  "before-hide",
  "show",
  "hide",
  "open",
  "close"
];
var isTriggerType = (trigger, type) => {
  if (isArray2(trigger)) {
    return trigger.includes(type);
  }
  return trigger === type;
};
var whenTrigger = (trigger, type, handler) => {
  return (e) => {
    isTriggerType(unref(trigger), type) && handler(e);
  };
};
var composeEventHandlers = (theirsHandler, oursHandler, { checkForDefaultPrevented = true } = {}) => {
  const handleEvent = (event) => {
    const shouldPrevent = theirsHandler == null ? void 0 : theirsHandler(event);
    if (checkForDefaultPrevented === false || !shouldPrevent) {
      return oursHandler == null ? void 0 : oursHandler(event);
    }
  };
  return handleEvent;
};
var whenMouse = (handler) => {
  return (e) => e.pointerType === "mouse" ? handler(e) : void 0;
};
var __default__$22 = defineComponent({
  name: "ElTooltipTrigger"
});
var _sfc_main$23 = defineComponent({
  ...__default__$22,
  props: useTooltipTriggerProps,
  setup(__props, { expose }) {
    const props = __props;
    const ns = useNamespace("tooltip");
    const { controlled, id, open, onOpen, onClose, onToggle } = inject(TOOLTIP_INJECTION_KEY, void 0);
    const triggerRef = ref(null);
    const stopWhenControlledOrDisabled = () => {
      if (unref(controlled) || props.disabled) {
        return true;
      }
    };
    const trigger = toRef(props, "trigger");
    const onMouseenter = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, "hover", onOpen));
    const onMouseleave = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, "hover", onClose));
    const onClick = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, "click", (e) => {
      if (e.button === 0) {
        onToggle(e);
      }
    }));
    const onFocus = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, "focus", onOpen));
    const onBlur = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, "focus", onClose));
    const onContextMenu = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, "contextmenu", (e) => {
      e.preventDefault();
      onToggle(e);
    }));
    const onKeydown = composeEventHandlers(stopWhenControlledOrDisabled, (e) => {
      const { code: code2 } = e;
      if (props.triggerKeys.includes(code2)) {
        e.preventDefault();
        onToggle(e);
      }
    });
    expose({
      triggerRef
    });
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(ElPopperTrigger), {
        id: unref(id),
        "virtual-ref": _ctx.virtualRef,
        open: unref(open),
        "virtual-triggering": _ctx.virtualTriggering,
        class: normalizeClass(unref(ns).e("trigger")),
        onBlur: unref(onBlur),
        onClick: unref(onClick),
        onContextmenu: unref(onContextMenu),
        onFocus: unref(onFocus),
        onMouseenter: unref(onMouseenter),
        onMouseleave: unref(onMouseleave),
        onKeydown: unref(onKeydown)
      }, {
        default: withCtx(() => [
          renderSlot(_ctx.$slots, "default")
        ]),
        _: 3
      }, 8, ["id", "virtual-ref", "open", "virtual-triggering", "class", "onBlur", "onClick", "onContextmenu", "onFocus", "onMouseenter", "onMouseleave", "onKeydown"]);
    };
  }
});
var ElTooltipTrigger = _export_sfc2(_sfc_main$23, [["__file", "trigger.vue"]]);
var usePopperContainerId = () => {
  const namespace = useGetDerivedNamespace();
  const idInjection = useIdInjection();
  const id = computed(() => {
    return `${namespace.value}-popper-container-${idInjection.prefix}`;
  });
  const selector = computed(() => `#${id.value}`);
  return {
    id,
    selector
  };
};
var createContainer = (id) => {
  const container = document.createElement("div");
  container.id = id;
  document.body.appendChild(container);
  return container;
};
var usePopperContainer = () => {
  const { id, selector } = usePopperContainerId();
  onBeforeMount(() => {
    if (!isClient)
      return;
    if (!document.body.querySelector(selector.value)) {
      createContainer(id.value);
    }
  });
  return {
    id,
    selector
  };
};
var __default__$14 = defineComponent({
  name: "ElTooltipContent",
  inheritAttrs: false
});
var _sfc_main$17 = defineComponent({
  ...__default__$14,
  props: useTooltipContentProps,
  setup(__props, { expose }) {
    const props = __props;
    const { selector } = usePopperContainerId();
    const ns = useNamespace("tooltip");
    const contentRef = ref();
    const popperContentRef = computedEager(() => {
      var _a2;
      return (_a2 = contentRef.value) == null ? void 0 : _a2.popperContentRef;
    });
    let stopHandle;
    const {
      controlled,
      id,
      open,
      trigger,
      onClose,
      onOpen,
      onShow,
      onHide,
      onBeforeShow,
      onBeforeHide
    } = inject(TOOLTIP_INJECTION_KEY, void 0);
    const transitionClass = computed(() => {
      return props.transition || `${ns.namespace.value}-fade-in-linear`;
    });
    const persistentRef = computed(() => {
      if (false) {
        return true;
      }
      return props.persistent;
    });
    onBeforeUnmount(() => {
      stopHandle == null ? void 0 : stopHandle();
    });
    const shouldRender = computed(() => {
      return unref(persistentRef) ? true : unref(open);
    });
    const shouldShow = computed(() => {
      return props.disabled ? false : unref(open);
    });
    const appendTo = computed(() => {
      return props.appendTo || selector.value;
    });
    const contentStyle = computed(() => {
      var _a2;
      return (_a2 = props.style) != null ? _a2 : {};
    });
    const ariaHidden = ref(true);
    const onTransitionLeave = () => {
      onHide();
      isFocusInsideContent() && tryFocus(document.body);
      ariaHidden.value = true;
    };
    const stopWhenControlled = () => {
      if (unref(controlled))
        return true;
    };
    const onContentEnter = composeEventHandlers(stopWhenControlled, () => {
      if (props.enterable && unref(trigger) === "hover") {
        onOpen();
      }
    });
    const onContentLeave = composeEventHandlers(stopWhenControlled, () => {
      if (unref(trigger) === "hover") {
        onClose();
      }
    });
    const onBeforeEnter = () => {
      var _a2, _b;
      (_b = (_a2 = contentRef.value) == null ? void 0 : _a2.updatePopper) == null ? void 0 : _b.call(_a2);
      onBeforeShow == null ? void 0 : onBeforeShow();
    };
    const onBeforeLeave = () => {
      onBeforeHide == null ? void 0 : onBeforeHide();
    };
    const onAfterShow = () => {
      onShow();
      stopHandle = onClickOutside(popperContentRef, () => {
        if (unref(controlled))
          return;
        const $trigger = unref(trigger);
        if ($trigger !== "hover") {
          onClose();
        }
      });
    };
    const onBlur = () => {
      if (!props.virtualTriggering) {
        onClose();
      }
    };
    const isFocusInsideContent = (event) => {
      var _a2;
      const popperContent = (_a2 = contentRef.value) == null ? void 0 : _a2.popperContentRef;
      const activeElement = (event == null ? void 0 : event.relatedTarget) || document.activeElement;
      return popperContent == null ? void 0 : popperContent.contains(activeElement);
    };
    watch(() => unref(open), (val) => {
      if (!val) {
        stopHandle == null ? void 0 : stopHandle();
      } else {
        ariaHidden.value = false;
      }
    }, {
      flush: "post"
    });
    watch(() => props.content, () => {
      var _a2, _b;
      (_b = (_a2 = contentRef.value) == null ? void 0 : _a2.updatePopper) == null ? void 0 : _b.call(_a2);
    });
    expose({
      contentRef,
      isFocusInsideContent
    });
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(ElTeleport), {
        disabled: !_ctx.teleported,
        to: unref(appendTo)
      }, {
        default: withCtx(() => [
          createVNode(Transition, {
            name: unref(transitionClass),
            onAfterLeave: onTransitionLeave,
            onBeforeEnter,
            onAfterEnter: onAfterShow,
            onBeforeLeave
          }, {
            default: withCtx(() => [
              unref(shouldRender) ? withDirectives((openBlock(), createBlock(unref(ElPopperContent), mergeProps({
                key: 0,
                id: unref(id),
                ref_key: "contentRef",
                ref: contentRef
              }, _ctx.$attrs, {
                "aria-label": _ctx.ariaLabel,
                "aria-hidden": ariaHidden.value,
                "boundaries-padding": _ctx.boundariesPadding,
                "fallback-placements": _ctx.fallbackPlacements,
                "gpu-acceleration": _ctx.gpuAcceleration,
                offset: _ctx.offset,
                placement: _ctx.placement,
                "popper-options": _ctx.popperOptions,
                strategy: _ctx.strategy,
                effect: _ctx.effect,
                enterable: _ctx.enterable,
                pure: _ctx.pure,
                "popper-class": _ctx.popperClass,
                "popper-style": [_ctx.popperStyle, unref(contentStyle)],
                "reference-el": _ctx.referenceEl,
                "trigger-target-el": _ctx.triggerTargetEl,
                visible: unref(shouldShow),
                "z-index": _ctx.zIndex,
                onMouseenter: unref(onContentEnter),
                onMouseleave: unref(onContentLeave),
                onBlur,
                onClose: unref(onClose)
              }), {
                default: withCtx(() => [
                  renderSlot(_ctx.$slots, "default")
                ]),
                _: 3
              }, 16, ["id", "aria-label", "aria-hidden", "boundaries-padding", "fallback-placements", "gpu-acceleration", "offset", "placement", "popper-options", "strategy", "effect", "enterable", "pure", "popper-class", "popper-style", "reference-el", "trigger-target-el", "visible", "z-index", "onMouseenter", "onMouseleave", "onClose"])), [
                [vShow, unref(shouldShow)]
              ]) : createCommentVNode("v-if", true)
            ]),
            _: 3
          }, 8, ["name"])
        ]),
        _: 3
      }, 8, ["disabled", "to"]);
    };
  }
});
var ElTooltipContent = _export_sfc2(_sfc_main$17, [["__file", "content.vue"]]);
var __default__7 = defineComponent({
  name: "ElTooltip"
});
var _sfc_main10 = defineComponent({
  ...__default__7,
  props: useTooltipProps,
  emits: tooltipEmits,
  setup(__props, { expose, emit }) {
    const props = __props;
    usePopperContainer();
    const ns = useNamespace("tooltip");
    const id = useId();
    const popperRef = ref();
    const contentRef = ref();
    const updatePopper = () => {
      var _a2;
      const popperComponent = unref(popperRef);
      if (popperComponent) {
        (_a2 = popperComponent.popperInstanceRef) == null ? void 0 : _a2.update();
      }
    };
    const open = ref(false);
    const toggleReason = ref();
    const { show, hide, hasUpdateHandler } = useTooltipModelToggle({
      indicator: open,
      toggleReason
    });
    const { onOpen, onClose } = useDelayedToggle({
      showAfter: toRef(props, "showAfter"),
      hideAfter: toRef(props, "hideAfter"),
      autoClose: toRef(props, "autoClose"),
      open: show,
      close: hide
    });
    const controlled = computed(() => isBoolean(props.visible) && !hasUpdateHandler.value);
    const kls = computed(() => {
      return [ns.b(), props.popperClass];
    });
    provide(TOOLTIP_INJECTION_KEY, {
      controlled,
      id,
      open: readonly(open),
      trigger: toRef(props, "trigger"),
      onOpen: (event) => {
        onOpen(event);
      },
      onClose: (event) => {
        onClose(event);
      },
      onToggle: (event) => {
        if (unref(open)) {
          onClose(event);
        } else {
          onOpen(event);
        }
      },
      onShow: () => {
        emit("show", toggleReason.value);
      },
      onHide: () => {
        emit("hide", toggleReason.value);
      },
      onBeforeShow: () => {
        emit("before-show", toggleReason.value);
      },
      onBeforeHide: () => {
        emit("before-hide", toggleReason.value);
      },
      updatePopper
    });
    watch(() => props.disabled, (disabled) => {
      if (disabled && open.value) {
        open.value = false;
      }
    });
    const isFocusInsideContent = (event) => {
      var _a2;
      return (_a2 = contentRef.value) == null ? void 0 : _a2.isFocusInsideContent(event);
    };
    onDeactivated(() => open.value && hide());
    expose({
      popperRef,
      contentRef,
      isFocusInsideContent,
      updatePopper,
      onOpen,
      onClose,
      hide
    });
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(ElPopper), {
        ref_key: "popperRef",
        ref: popperRef,
        role: _ctx.role
      }, {
        default: withCtx(() => [
          createVNode(ElTooltipTrigger, {
            disabled: _ctx.disabled,
            trigger: _ctx.trigger,
            "trigger-keys": _ctx.triggerKeys,
            "virtual-ref": _ctx.virtualRef,
            "virtual-triggering": _ctx.virtualTriggering
          }, {
            default: withCtx(() => [
              _ctx.$slots.default ? renderSlot(_ctx.$slots, "default", { key: 0 }) : createCommentVNode("v-if", true)
            ]),
            _: 3
          }, 8, ["disabled", "trigger", "trigger-keys", "virtual-ref", "virtual-triggering"]),
          createVNode(ElTooltipContent, {
            ref_key: "contentRef",
            ref: contentRef,
            "aria-label": _ctx.ariaLabel,
            "boundaries-padding": _ctx.boundariesPadding,
            content: _ctx.content,
            disabled: _ctx.disabled,
            effect: _ctx.effect,
            enterable: _ctx.enterable,
            "fallback-placements": _ctx.fallbackPlacements,
            "hide-after": _ctx.hideAfter,
            "gpu-acceleration": _ctx.gpuAcceleration,
            offset: _ctx.offset,
            persistent: _ctx.persistent,
            "popper-class": unref(kls),
            "popper-style": _ctx.popperStyle,
            placement: _ctx.placement,
            "popper-options": _ctx.popperOptions,
            pure: _ctx.pure,
            "raw-content": _ctx.rawContent,
            "reference-el": _ctx.referenceEl,
            "trigger-target-el": _ctx.triggerTargetEl,
            "show-after": _ctx.showAfter,
            strategy: _ctx.strategy,
            teleported: _ctx.teleported,
            transition: _ctx.transition,
            "virtual-triggering": _ctx.virtualTriggering,
            "z-index": _ctx.zIndex,
            "append-to": _ctx.appendTo
          }, {
            default: withCtx(() => [
              renderSlot(_ctx.$slots, "content", {}, () => [
                _ctx.rawContent ? (openBlock(), createElementBlock("span", {
                  key: 0,
                  innerHTML: _ctx.content
                }, null, 8, ["innerHTML"])) : (openBlock(), createElementBlock("span", { key: 1 }, toDisplayString(_ctx.content), 1))
              ]),
              _ctx.showArrow ? (openBlock(), createBlock(unref(ElPopperArrow), {
                key: 0,
                "arrow-offset": _ctx.arrowOffset
              }, null, 8, ["arrow-offset"])) : createCommentVNode("v-if", true)
            ]),
            _: 3
          }, 8, ["aria-label", "boundaries-padding", "content", "disabled", "effect", "enterable", "fallback-placements", "hide-after", "gpu-acceleration", "offset", "persistent", "popper-class", "popper-style", "placement", "popper-options", "pure", "raw-content", "reference-el", "trigger-target-el", "show-after", "strategy", "teleported", "transition", "virtual-triggering", "z-index", "append-to"])
        ]),
        _: 3
      }, 8, ["role"]);
    };
  }
});
var Tooltip = _export_sfc2(_sfc_main10, [["__file", "tooltip.vue"]]);
var ElTooltip = withInstall(Tooltip);

// node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/index-2FqfStMI.js
var GAP = 4;
var BAR_MAP = {
  vertical: {
    offset: "offsetHeight",
    scroll: "scrollTop",
    scrollSize: "scrollHeight",
    size: "height",
    key: "vertical",
    axis: "Y",
    client: "clientY",
    direction: "top"
  },
  horizontal: {
    offset: "offsetWidth",
    scroll: "scrollLeft",
    scrollSize: "scrollWidth",
    size: "width",
    key: "horizontal",
    axis: "X",
    client: "clientX",
    direction: "left"
  }
};
var renderThumbStyle = ({
  move,
  size,
  bar
}) => ({
  [bar.size]: size,
  transform: `translate${bar.axis}(${move}%)`
});
var scrollbarContextKey = Symbol("scrollbarContextKey");
var thumbProps = buildProps({
  vertical: Boolean,
  size: String,
  move: Number,
  ratio: {
    type: Number,
    required: true
  },
  always: Boolean
});
var COMPONENT_NAME$1 = "Thumb";
var _sfc_main$24 = defineComponent({
  __name: "thumb",
  props: thumbProps,
  setup(__props) {
    const props = __props;
    const scrollbar = inject(scrollbarContextKey);
    const ns = useNamespace("scrollbar");
    if (!scrollbar)
      throwError(COMPONENT_NAME$1, "can not inject scrollbar context");
    const instance = ref();
    const thumb = ref();
    const thumbState = ref({});
    const visible = ref(false);
    let cursorDown = false;
    let cursorLeave = false;
    let originalOnSelectStart = isClient ? document.onselectstart : null;
    const bar = computed(() => BAR_MAP[props.vertical ? "vertical" : "horizontal"]);
    const thumbStyle = computed(() => renderThumbStyle({
      size: props.size,
      move: props.move,
      bar: bar.value
    }));
    const offsetRatio = computed(() => instance.value[bar.value.offset] ** 2 / scrollbar.wrapElement[bar.value.scrollSize] / props.ratio / thumb.value[bar.value.offset]);
    const clickThumbHandler = (e) => {
      var _a2;
      e.stopPropagation();
      if (e.ctrlKey || [1, 2].includes(e.button))
        return;
      (_a2 = window.getSelection()) == null ? void 0 : _a2.removeAllRanges();
      startDrag(e);
      const el = e.currentTarget;
      if (!el)
        return;
      thumbState.value[bar.value.axis] = el[bar.value.offset] - (e[bar.value.client] - el.getBoundingClientRect()[bar.value.direction]);
    };
    const clickTrackHandler = (e) => {
      if (!thumb.value || !instance.value || !scrollbar.wrapElement)
        return;
      const offset = Math.abs(e.target.getBoundingClientRect()[bar.value.direction] - e[bar.value.client]);
      const thumbHalf = thumb.value[bar.value.offset] / 2;
      const thumbPositionPercentage = (offset - thumbHalf) * 100 * offsetRatio.value / instance.value[bar.value.offset];
      scrollbar.wrapElement[bar.value.scroll] = thumbPositionPercentage * scrollbar.wrapElement[bar.value.scrollSize] / 100;
    };
    const startDrag = (e) => {
      e.stopImmediatePropagation();
      cursorDown = true;
      document.addEventListener("mousemove", mouseMoveDocumentHandler);
      document.addEventListener("mouseup", mouseUpDocumentHandler);
      originalOnSelectStart = document.onselectstart;
      document.onselectstart = () => false;
    };
    const mouseMoveDocumentHandler = (e) => {
      if (!instance.value || !thumb.value)
        return;
      if (cursorDown === false)
        return;
      const prevPage = thumbState.value[bar.value.axis];
      if (!prevPage)
        return;
      const offset = (instance.value.getBoundingClientRect()[bar.value.direction] - e[bar.value.client]) * -1;
      const thumbClickPosition = thumb.value[bar.value.offset] - prevPage;
      const thumbPositionPercentage = (offset - thumbClickPosition) * 100 * offsetRatio.value / instance.value[bar.value.offset];
      scrollbar.wrapElement[bar.value.scroll] = thumbPositionPercentage * scrollbar.wrapElement[bar.value.scrollSize] / 100;
    };
    const mouseUpDocumentHandler = () => {
      cursorDown = false;
      thumbState.value[bar.value.axis] = 0;
      document.removeEventListener("mousemove", mouseMoveDocumentHandler);
      document.removeEventListener("mouseup", mouseUpDocumentHandler);
      restoreOnselectstart();
      if (cursorLeave)
        visible.value = false;
    };
    const mouseMoveScrollbarHandler = () => {
      cursorLeave = false;
      visible.value = !!props.size;
    };
    const mouseLeaveScrollbarHandler = () => {
      cursorLeave = true;
      visible.value = cursorDown;
    };
    onBeforeUnmount(() => {
      restoreOnselectstart();
      document.removeEventListener("mouseup", mouseUpDocumentHandler);
    });
    const restoreOnselectstart = () => {
      if (document.onselectstart !== originalOnSelectStart)
        document.onselectstart = originalOnSelectStart;
    };
    useEventListener(toRef(scrollbar, "scrollbarElement"), "mousemove", mouseMoveScrollbarHandler);
    useEventListener(toRef(scrollbar, "scrollbarElement"), "mouseleave", mouseLeaveScrollbarHandler);
    return (_ctx, _cache) => {
      return openBlock(), createBlock(Transition, {
        name: unref(ns).b("fade"),
        persisted: ""
      }, {
        default: withCtx(() => [
          withDirectives(createBaseVNode("div", {
            ref_key: "instance",
            ref: instance,
            class: normalizeClass([unref(ns).e("bar"), unref(ns).is(unref(bar).key)]),
            onMousedown: clickTrackHandler,
            onClick: withModifiers(() => {
            }, ["stop"])
          }, [
            createBaseVNode("div", {
              ref_key: "thumb",
              ref: thumb,
              class: normalizeClass(unref(ns).e("thumb")),
              style: normalizeStyle(unref(thumbStyle)),
              onMousedown: clickThumbHandler
            }, null, 38)
          ], 42, ["onClick"]), [
            [vShow, _ctx.always || visible.value]
          ])
        ]),
        _: 1
      }, 8, ["name"]);
    };
  }
});
var Thumb = _export_sfc2(_sfc_main$24, [["__file", "thumb.vue"]]);
var barProps = buildProps({
  always: {
    type: Boolean,
    default: true
  },
  minSize: {
    type: Number,
    required: true
  }
});
var _sfc_main$18 = defineComponent({
  __name: "bar",
  props: barProps,
  setup(__props, { expose }) {
    const props = __props;
    const scrollbar = inject(scrollbarContextKey);
    const moveX = ref(0);
    const moveY = ref(0);
    const sizeWidth = ref("");
    const sizeHeight = ref("");
    const ratioY = ref(1);
    const ratioX = ref(1);
    const handleScroll = (wrap) => {
      if (wrap) {
        const offsetHeight = wrap.offsetHeight - GAP;
        const offsetWidth = wrap.offsetWidth - GAP;
        moveY.value = wrap.scrollTop * 100 / offsetHeight * ratioY.value;
        moveX.value = wrap.scrollLeft * 100 / offsetWidth * ratioX.value;
      }
    };
    const update = () => {
      const wrap = scrollbar == null ? void 0 : scrollbar.wrapElement;
      if (!wrap)
        return;
      const offsetHeight = wrap.offsetHeight - GAP;
      const offsetWidth = wrap.offsetWidth - GAP;
      const originalHeight = offsetHeight ** 2 / wrap.scrollHeight;
      const originalWidth = offsetWidth ** 2 / wrap.scrollWidth;
      const height = Math.max(originalHeight, props.minSize);
      const width = Math.max(originalWidth, props.minSize);
      ratioY.value = originalHeight / (offsetHeight - originalHeight) / (height / (offsetHeight - height));
      ratioX.value = originalWidth / (offsetWidth - originalWidth) / (width / (offsetWidth - width));
      sizeHeight.value = height + GAP < offsetHeight ? `${height}px` : "";
      sizeWidth.value = width + GAP < offsetWidth ? `${width}px` : "";
    };
    expose({
      handleScroll,
      update
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock(Fragment, null, [
        createVNode(Thumb, {
          move: moveX.value,
          ratio: ratioX.value,
          size: sizeWidth.value,
          always: _ctx.always
        }, null, 8, ["move", "ratio", "size", "always"]),
        createVNode(Thumb, {
          move: moveY.value,
          ratio: ratioY.value,
          size: sizeHeight.value,
          vertical: "",
          always: _ctx.always
        }, null, 8, ["move", "ratio", "size", "always"])
      ], 64);
    };
  }
});
var Bar = _export_sfc2(_sfc_main$18, [["__file", "bar.vue"]]);
var scrollbarProps = buildProps({
  height: {
    type: [String, Number],
    default: ""
  },
  maxHeight: {
    type: [String, Number],
    default: ""
  },
  native: {
    type: Boolean,
    default: false
  },
  wrapStyle: {
    type: definePropType([String, Object, Array]),
    default: ""
  },
  wrapClass: {
    type: [String, Array],
    default: ""
  },
  viewClass: {
    type: [String, Array],
    default: ""
  },
  viewStyle: {
    type: [String, Array, Object],
    default: ""
  },
  noresize: Boolean,
  tag: {
    type: String,
    default: "div"
  },
  always: Boolean,
  minSize: {
    type: Number,
    default: 20
  },
  tabindex: {
    type: [String, Number],
    default: void 0
  },
  id: String,
  role: String,
  ...useAriaProps(["ariaLabel", "ariaOrientation"])
});
var scrollbarEmits = {
  scroll: ({
    scrollTop,
    scrollLeft
  }) => [scrollTop, scrollLeft].every(isNumber)
};
var COMPONENT_NAME2 = "ElScrollbar";
var __default__8 = defineComponent({
  name: COMPONENT_NAME2
});
var _sfc_main11 = defineComponent({
  ...__default__8,
  props: scrollbarProps,
  emits: scrollbarEmits,
  setup(__props, { expose, emit }) {
    const props = __props;
    const ns = useNamespace("scrollbar");
    let stopResizeObserver = void 0;
    let stopResizeListener = void 0;
    let wrapScrollTop = 0;
    let wrapScrollLeft = 0;
    const scrollbarRef = ref();
    const wrapRef = ref();
    const resizeRef = ref();
    const barRef = ref();
    const wrapStyle = computed(() => {
      const style = {};
      if (props.height)
        style.height = addUnit(props.height);
      if (props.maxHeight)
        style.maxHeight = addUnit(props.maxHeight);
      return [props.wrapStyle, style];
    });
    const wrapKls = computed(() => {
      return [
        props.wrapClass,
        ns.e("wrap"),
        { [ns.em("wrap", "hidden-default")]: !props.native }
      ];
    });
    const resizeKls = computed(() => {
      return [ns.e("view"), props.viewClass];
    });
    const handleScroll = () => {
      var _a2;
      if (wrapRef.value) {
        (_a2 = barRef.value) == null ? void 0 : _a2.handleScroll(wrapRef.value);
        wrapScrollTop = wrapRef.value.scrollTop;
        wrapScrollLeft = wrapRef.value.scrollLeft;
        emit("scroll", {
          scrollTop: wrapRef.value.scrollTop,
          scrollLeft: wrapRef.value.scrollLeft
        });
      }
    };
    function scrollTo(arg1, arg2) {
      if (isObject2(arg1)) {
        wrapRef.value.scrollTo(arg1);
      } else if (isNumber(arg1) && isNumber(arg2)) {
        wrapRef.value.scrollTo(arg1, arg2);
      }
    }
    const setScrollTop = (value) => {
      if (!isNumber(value)) {
        debugWarn(COMPONENT_NAME2, "value must be a number");
        return;
      }
      wrapRef.value.scrollTop = value;
    };
    const setScrollLeft = (value) => {
      if (!isNumber(value)) {
        debugWarn(COMPONENT_NAME2, "value must be a number");
        return;
      }
      wrapRef.value.scrollLeft = value;
    };
    const update = () => {
      var _a2;
      (_a2 = barRef.value) == null ? void 0 : _a2.update();
    };
    watch(() => props.noresize, (noresize) => {
      if (noresize) {
        stopResizeObserver == null ? void 0 : stopResizeObserver();
        stopResizeListener == null ? void 0 : stopResizeListener();
      } else {
        ({ stop: stopResizeObserver } = useResizeObserver(resizeRef, update));
        stopResizeListener = useEventListener("resize", update);
      }
    }, { immediate: true });
    watch(() => [props.maxHeight, props.height], () => {
      if (!props.native)
        nextTick(() => {
          var _a2;
          update();
          if (wrapRef.value) {
            (_a2 = barRef.value) == null ? void 0 : _a2.handleScroll(wrapRef.value);
          }
        });
    });
    provide(scrollbarContextKey, reactive({
      scrollbarElement: scrollbarRef,
      wrapElement: wrapRef
    }));
    onActivated(() => {
      if (wrapRef.value) {
        wrapRef.value.scrollTop = wrapScrollTop;
        wrapRef.value.scrollLeft = wrapScrollLeft;
      }
    });
    onMounted(() => {
      if (!props.native)
        nextTick(() => {
          update();
        });
    });
    onUpdated(() => update());
    expose({
      wrapRef,
      update,
      scrollTo,
      setScrollTop,
      setScrollLeft,
      handleScroll
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        ref_key: "scrollbarRef",
        ref: scrollbarRef,
        class: normalizeClass(unref(ns).b())
      }, [
        createBaseVNode("div", {
          ref_key: "wrapRef",
          ref: wrapRef,
          class: normalizeClass(unref(wrapKls)),
          style: normalizeStyle(unref(wrapStyle)),
          tabindex: _ctx.tabindex,
          onScroll: handleScroll
        }, [
          (openBlock(), createBlock(resolveDynamicComponent(_ctx.tag), {
            id: _ctx.id,
            ref_key: "resizeRef",
            ref: resizeRef,
            class: normalizeClass(unref(resizeKls)),
            style: normalizeStyle(_ctx.viewStyle),
            role: _ctx.role,
            "aria-label": _ctx.ariaLabel,
            "aria-orientation": _ctx.ariaOrientation
          }, {
            default: withCtx(() => [
              renderSlot(_ctx.$slots, "default")
            ]),
            _: 3
          }, 8, ["id", "class", "style", "role", "aria-label", "aria-orientation"]))
        ], 46, ["tabindex"]),
        !_ctx.native ? (openBlock(), createBlock(Bar, {
          key: 0,
          ref_key: "barRef",
          ref: barRef,
          always: _ctx.always,
          "min-size": _ctx.minSize
        }, null, 8, ["always", "min-size"])) : createCommentVNode("v-if", true)
      ], 2);
    };
  }
});
var Scrollbar = _export_sfc2(_sfc_main11, [["__file", "scrollbar.vue"]]);
var ElScrollbar = withInstall(Scrollbar);

// node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/dropdown-BZbCs6iC.js
var _sfc_main$19 = defineComponent({
  inheritAttrs: false
});
function _sfc_render$12(_ctx, _cache, $props, $setup, $data, $options) {
  return renderSlot(_ctx.$slots, "default");
}
var Collection = _export_sfc2(_sfc_main$19, [["render", _sfc_render$12], ["__file", "collection.vue"]]);
var _sfc_main12 = defineComponent({
  name: "ElCollectionItem",
  inheritAttrs: false
});
function _sfc_render4(_ctx, _cache, $props, $setup, $data, $options) {
  return renderSlot(_ctx.$slots, "default");
}
var CollectionItem = _export_sfc2(_sfc_main12, [["render", _sfc_render4], ["__file", "collection-item.vue"]]);
var COLLECTION_ITEM_SIGN = `data-el-collection-item`;
var createCollectionWithScope = (name) => {
  const COLLECTION_NAME = `El${name}Collection`;
  const COLLECTION_ITEM_NAME = `${COLLECTION_NAME}Item`;
  const COLLECTION_INJECTION_KEY22 = Symbol(COLLECTION_NAME);
  const COLLECTION_ITEM_INJECTION_KEY22 = Symbol(COLLECTION_ITEM_NAME);
  const ElCollection22 = {
    ...Collection,
    name: COLLECTION_NAME,
    setup() {
      const collectionRef = ref();
      const itemMap = /* @__PURE__ */ new Map();
      const getItems = () => {
        const collectionEl = unref(collectionRef);
        if (!collectionEl)
          return [];
        const orderedNodes = Array.from(collectionEl.querySelectorAll(`[${COLLECTION_ITEM_SIGN}]`));
        const items = [...itemMap.values()];
        return items.sort((a, b) => orderedNodes.indexOf(a.ref) - orderedNodes.indexOf(b.ref));
      };
      provide(COLLECTION_INJECTION_KEY22, {
        itemMap,
        getItems,
        collectionRef
      });
    }
  };
  const ElCollectionItem22 = {
    ...CollectionItem,
    name: COLLECTION_ITEM_NAME,
    setup(_, { attrs }) {
      const collectionItemRef = ref();
      const collectionInjection = inject(COLLECTION_INJECTION_KEY22, void 0);
      provide(COLLECTION_ITEM_INJECTION_KEY22, {
        collectionItemRef
      });
      onMounted(() => {
        const collectionItemEl = unref(collectionItemRef);
        if (collectionItemEl) {
          collectionInjection.itemMap.set(collectionItemEl, {
            ref: collectionItemEl,
            ...attrs
          });
        }
      });
      onBeforeUnmount(() => {
        const collectionItemEl = unref(collectionItemRef);
        collectionInjection.itemMap.delete(collectionItemEl);
      });
    }
  };
  return {
    COLLECTION_INJECTION_KEY: COLLECTION_INJECTION_KEY22,
    COLLECTION_ITEM_INJECTION_KEY: COLLECTION_ITEM_INJECTION_KEY22,
    ElCollection: ElCollection22,
    ElCollectionItem: ElCollectionItem22
  };
};
var dropdownProps = buildProps({
  trigger: useTooltipTriggerProps.trigger,
  triggerKeys: {
    type: definePropType(Array),
    default: () => [
      EVENT_CODE.enter,
      EVENT_CODE.numpadEnter,
      EVENT_CODE.space,
      EVENT_CODE.down
    ]
  },
  effect: {
    ...useTooltipContentProps.effect,
    default: "light"
  },
  type: {
    type: definePropType(String)
  },
  placement: {
    type: definePropType(String),
    default: "bottom"
  },
  popperOptions: {
    type: definePropType(Object),
    default: () => ({})
  },
  id: String,
  size: {
    type: String,
    default: ""
  },
  splitButton: Boolean,
  hideOnClick: {
    type: Boolean,
    default: true
  },
  loop: {
    type: Boolean,
    default: true
  },
  showTimeout: {
    type: Number,
    default: 150
  },
  hideTimeout: {
    type: Number,
    default: 150
  },
  tabindex: {
    type: definePropType([Number, String]),
    default: 0
  },
  maxHeight: {
    type: definePropType([Number, String]),
    default: ""
  },
  popperClass: {
    type: String,
    default: ""
  },
  disabled: Boolean,
  role: {
    type: String,
    values: roleTypes,
    default: "menu"
  },
  buttonProps: {
    type: definePropType(Object)
  },
  teleported: useTooltipContentProps.teleported,
  persistent: {
    type: Boolean,
    default: true
  }
});
var dropdownItemProps = buildProps({
  command: {
    type: [Object, String, Number],
    default: () => ({})
  },
  disabled: Boolean,
  divided: Boolean,
  textValue: String,
  icon: {
    type: iconPropType
  }
});
var dropdownMenuProps = buildProps({
  onKeydown: { type: definePropType(Function) }
});
var FIRST_KEYS = [
  EVENT_CODE.down,
  EVENT_CODE.pageDown,
  EVENT_CODE.home
];
var LAST_KEYS = [EVENT_CODE.up, EVENT_CODE.pageUp, EVENT_CODE.end];
var FIRST_LAST_KEYS = [...FIRST_KEYS, ...LAST_KEYS];
var {
  ElCollection,
  ElCollectionItem,
  COLLECTION_INJECTION_KEY,
  COLLECTION_ITEM_INJECTION_KEY
} = createCollectionWithScope("Dropdown");

// node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/es/Conversations/index.js
var composeRefs = (...refs) => {
  return (el) => {
    refs.forEach((ref2) => {
      if (isFunction$1(ref2)) {
        ref2(el);
      } else {
        ref2.value = el;
      }
    });
  };
};
var rovingFocusGroupProps = buildProps({
  style: { type: definePropType([String, Array, Object]) },
  currentTabId: {
    type: definePropType(String)
  },
  defaultCurrentTabId: String,
  loop: Boolean,
  dir: {
    type: String,
    values: ["ltr", "rtl"],
    default: "ltr"
  },
  orientation: {
    type: definePropType(String)
  },
  onBlur: Function,
  onFocus: Function,
  onMousedown: Function
});
var {
  ElCollection: ElCollection2,
  ElCollectionItem: ElCollectionItem2,
  COLLECTION_INJECTION_KEY: COLLECTION_INJECTION_KEY2,
  COLLECTION_ITEM_INJECTION_KEY: COLLECTION_ITEM_INJECTION_KEY2
} = createCollectionWithScope("RovingFocusGroup");
var ROVING_FOCUS_GROUP_INJECTION_KEY = Symbol("elRovingFocusGroup");
var ROVING_FOCUS_GROUP_ITEM_INJECTION_KEY = Symbol("elRovingFocusGroupItem");
var MAP_KEY_TO_FOCUS_INTENT = {
  ArrowLeft: "prev",
  ArrowUp: "prev",
  ArrowRight: "next",
  ArrowDown: "next",
  PageUp: "first",
  Home: "first",
  PageDown: "last",
  End: "last"
};
var getDirectionAwareKey = (key, dir) => {
  return key;
};
var getFocusIntent = (event, orientation, dir) => {
  const key = getDirectionAwareKey(event.code);
  return MAP_KEY_TO_FOCUS_INTENT[key];
};
var reorderArray = (array, atIdx) => {
  return array.map((_, idx) => array[(idx + atIdx) % array.length]);
};
var focusFirst = (elements) => {
  const { activeElement: prevActive } = document;
  for (const element of elements) {
    if (element === prevActive)
      return;
    element.focus();
    if (prevActive !== document.activeElement)
      return;
  }
};
var CURRENT_TAB_ID_CHANGE_EVT = "currentTabIdChange";
var ENTRY_FOCUS_EVT = "rovingFocusGroup.entryFocus";
var EVT_OPTS = { bubbles: false, cancelable: true };
var _sfc_main$82 = defineComponent({
  name: "ElRovingFocusGroupImpl",
  inheritAttrs: false,
  props: rovingFocusGroupProps,
  emits: [CURRENT_TAB_ID_CHANGE_EVT, "entryFocus"],
  setup(props, { emit }) {
    var _a2;
    const currentTabbedId = ref((_a2 = props.currentTabId || props.defaultCurrentTabId) != null ? _a2 : null);
    const isBackingOut = ref(false);
    const isClickFocus = ref(false);
    const rovingFocusGroupRef = ref();
    const { getItems } = inject(COLLECTION_INJECTION_KEY2, void 0);
    const rovingFocusGroupRootStyle = computed(() => {
      return [
        {
          outline: "none"
        },
        props.style
      ];
    });
    const onItemFocus = (tabbedId) => {
      emit(CURRENT_TAB_ID_CHANGE_EVT, tabbedId);
    };
    const onItemShiftTab = () => {
      isBackingOut.value = true;
    };
    const onMousedown = composeEventHandlers((e) => {
      var _a22;
      (_a22 = props.onMousedown) == null ? void 0 : _a22.call(props, e);
    }, () => {
      isClickFocus.value = true;
    });
    const onFocus = composeEventHandlers((e) => {
      var _a22;
      (_a22 = props.onFocus) == null ? void 0 : _a22.call(props, e);
    }, (e) => {
      const isKeyboardFocus = !unref(isClickFocus);
      const { target, currentTarget } = e;
      if (target === currentTarget && isKeyboardFocus && !unref(isBackingOut)) {
        const entryFocusEvt = new Event(ENTRY_FOCUS_EVT, EVT_OPTS);
        currentTarget == null ? void 0 : currentTarget.dispatchEvent(entryFocusEvt);
        if (!entryFocusEvt.defaultPrevented) {
          const items = getItems().filter((item) => item.focusable);
          const activeItem = items.find((item) => item.active);
          const currentItem = items.find((item) => item.id === unref(currentTabbedId));
          const candidates = [activeItem, currentItem, ...items].filter(Boolean);
          const candidateNodes = candidates.map((item) => item.ref);
          focusFirst(candidateNodes);
        }
      }
      isClickFocus.value = false;
    });
    const onBlur = composeEventHandlers((e) => {
      var _a22;
      (_a22 = props.onBlur) == null ? void 0 : _a22.call(props, e);
    }, () => {
      isBackingOut.value = false;
    });
    const handleEntryFocus = (...args) => {
      emit("entryFocus", ...args);
    };
    provide(ROVING_FOCUS_GROUP_INJECTION_KEY, {
      currentTabbedId: readonly(currentTabbedId),
      loop: toRef(props, "loop"),
      tabIndex: computed(() => {
        return unref(isBackingOut) ? -1 : 0;
      }),
      rovingFocusGroupRef,
      rovingFocusGroupRootStyle,
      orientation: toRef(props, "orientation"),
      dir: toRef(props, "dir"),
      onItemFocus,
      onItemShiftTab,
      onBlur,
      onFocus,
      onMousedown
    });
    watch(() => props.currentTabId, (val) => {
      currentTabbedId.value = val != null ? val : null;
    });
    useEventListener(rovingFocusGroupRef, ENTRY_FOCUS_EVT, handleEntryFocus);
  }
});
function _sfc_render$62(_ctx, _cache, $props, $setup, $data, $options) {
  return renderSlot(_ctx.$slots, "default");
}
var ElRovingFocusGroupImpl = _export_sfc2(_sfc_main$82, [["render", _sfc_render$62], ["__file", "roving-focus-group-impl.vue"]]);
var _sfc_main$72 = defineComponent({
  name: "ElRovingFocusGroup",
  components: {
    ElFocusGroupCollection: ElCollection2,
    ElRovingFocusGroupImpl
  }
});
function _sfc_render$52(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_el_roving_focus_group_impl = resolveComponent("el-roving-focus-group-impl");
  const _component_el_focus_group_collection = resolveComponent("el-focus-group-collection");
  return openBlock(), createBlock(_component_el_focus_group_collection, null, {
    default: withCtx(() => [
      createVNode(_component_el_roving_focus_group_impl, normalizeProps(guardReactiveProps(_ctx.$attrs)), {
        default: withCtx(() => [
          renderSlot(_ctx.$slots, "default")
        ]),
        _: 3
      }, 16)
    ]),
    _: 3
  });
}
var ElRovingFocusGroup = _export_sfc2(_sfc_main$72, [["render", _sfc_render$52], ["__file", "roving-focus-group.vue"]]);
var DROPDOWN_INJECTION_KEY = Symbol("elDropdown");
var { ButtonGroup: ElButtonGroup } = ElButton;
var _sfc_main$63 = defineComponent({
  name: "ElDropdown",
  components: {
    ElButton,
    ElButtonGroup,
    ElScrollbar,
    ElDropdownCollection: ElCollection,
    ElTooltip,
    ElRovingFocusGroup,
    ElOnlyChild: OnlyChild,
    ElIcon,
    ArrowDown: arrow_down_default
  },
  props: dropdownProps,
  emits: ["visible-change", "click", "command"],
  setup(props, { emit }) {
    const _instance2 = getCurrentInstance();
    const ns = useNamespace("dropdown");
    const { t } = useLocale();
    const triggeringElementRef = ref();
    const referenceElementRef = ref();
    const popperRef = ref();
    const contentRef = ref();
    const scrollbar = ref(null);
    const currentTabId = ref(null);
    const isUsingKeyboard = ref(false);
    const wrapStyle = computed(() => ({
      maxHeight: addUnit(props.maxHeight)
    }));
    const dropdownTriggerKls = computed(() => [ns.m(dropdownSize.value)]);
    const trigger = computed(() => castArray(props.trigger));
    const defaultTriggerId = useId().value;
    const triggerId = computed(() => props.id || defaultTriggerId);
    watch([triggeringElementRef, trigger], ([triggeringElement, trigger2], [prevTriggeringElement]) => {
      var _a2, _b, _c;
      if ((_a2 = prevTriggeringElement == null ? void 0 : prevTriggeringElement.$el) == null ? void 0 : _a2.removeEventListener) {
        prevTriggeringElement.$el.removeEventListener("pointerenter", onAutofocusTriggerEnter);
      }
      if ((_b = triggeringElement == null ? void 0 : triggeringElement.$el) == null ? void 0 : _b.removeEventListener) {
        triggeringElement.$el.removeEventListener("pointerenter", onAutofocusTriggerEnter);
      }
      if (((_c = triggeringElement == null ? void 0 : triggeringElement.$el) == null ? void 0 : _c.addEventListener) && trigger2.includes("hover")) {
        triggeringElement.$el.addEventListener("pointerenter", onAutofocusTriggerEnter);
      }
    }, { immediate: true });
    onBeforeUnmount(() => {
      var _a2, _b;
      if ((_b = (_a2 = triggeringElementRef.value) == null ? void 0 : _a2.$el) == null ? void 0 : _b.removeEventListener) {
        triggeringElementRef.value.$el.removeEventListener("pointerenter", onAutofocusTriggerEnter);
      }
    });
    function handleClick() {
      handleClose();
    }
    function handleClose() {
      var _a2;
      (_a2 = popperRef.value) == null ? void 0 : _a2.onClose();
    }
    function handleOpen() {
      var _a2;
      (_a2 = popperRef.value) == null ? void 0 : _a2.onOpen();
    }
    const dropdownSize = useFormSize();
    function commandHandler(...args) {
      emit("command", ...args);
    }
    function onAutofocusTriggerEnter() {
      var _a2, _b;
      (_b = (_a2 = triggeringElementRef.value) == null ? void 0 : _a2.$el) == null ? void 0 : _b.focus();
    }
    function onItemEnter() {
    }
    function onItemLeave() {
      const contentEl = unref(contentRef);
      trigger.value.includes("hover") && (contentEl == null ? void 0 : contentEl.focus());
      currentTabId.value = null;
    }
    function handleCurrentTabIdChange(id) {
      currentTabId.value = id;
    }
    function handleEntryFocus(e) {
      if (!isUsingKeyboard.value) {
        e.preventDefault();
        e.stopImmediatePropagation();
      }
    }
    function handleBeforeShowTooltip() {
      emit("visible-change", true);
    }
    function handleShowTooltip(event) {
      var _a2;
      if ((event == null ? void 0 : event.type) === "keydown") {
        (_a2 = contentRef.value) == null ? void 0 : _a2.focus();
      }
    }
    function handleBeforeHideTooltip() {
      emit("visible-change", false);
    }
    provide(DROPDOWN_INJECTION_KEY, {
      contentRef,
      role: computed(() => props.role),
      triggerId,
      isUsingKeyboard,
      onItemEnter,
      onItemLeave
    });
    provide("elDropdown", {
      instance: _instance2,
      dropdownSize,
      handleClick,
      commandHandler,
      trigger: toRef(props, "trigger"),
      hideOnClick: toRef(props, "hideOnClick")
    });
    const onFocusAfterTrapped = (e) => {
      var _a2, _b;
      e.preventDefault();
      (_b = (_a2 = contentRef.value) == null ? void 0 : _a2.focus) == null ? void 0 : _b.call(_a2, {
        preventScroll: true
      });
    };
    const handlerMainButtonClick = (event) => {
      emit("click", event);
    };
    return {
      t,
      ns,
      scrollbar,
      wrapStyle,
      dropdownTriggerKls,
      dropdownSize,
      triggerId,
      currentTabId,
      handleCurrentTabIdChange,
      handlerMainButtonClick,
      handleEntryFocus,
      handleClose,
      handleOpen,
      handleBeforeShowTooltip,
      handleShowTooltip,
      handleBeforeHideTooltip,
      onFocusAfterTrapped,
      popperRef,
      contentRef,
      triggeringElementRef,
      referenceElementRef
    };
  }
});
function _sfc_render$42(_ctx, _cache, $props, $setup, $data, $options) {
  var _a2;
  const _component_el_dropdown_collection = resolveComponent("el-dropdown-collection");
  const _component_el_roving_focus_group = resolveComponent("el-roving-focus-group");
  const _component_el_scrollbar = resolveComponent("el-scrollbar");
  const _component_el_only_child = resolveComponent("el-only-child");
  const _component_el_tooltip = resolveComponent("el-tooltip");
  const _component_el_button = resolveComponent("el-button");
  const _component_arrow_down = resolveComponent("arrow-down");
  const _component_el_icon = resolveComponent("el-icon");
  const _component_el_button_group = resolveComponent("el-button-group");
  return openBlock(), createElementBlock("div", {
    class: normalizeClass([_ctx.ns.b(), _ctx.ns.is("disabled", _ctx.disabled)])
  }, [
    createVNode(_component_el_tooltip, {
      ref: "popperRef",
      role: _ctx.role,
      effect: _ctx.effect,
      "fallback-placements": ["bottom", "top"],
      "popper-options": _ctx.popperOptions,
      "gpu-acceleration": false,
      "hide-after": _ctx.trigger === "hover" ? _ctx.hideTimeout : 0,
      "manual-mode": true,
      placement: _ctx.placement,
      "popper-class": [_ctx.ns.e("popper"), _ctx.popperClass],
      "reference-element": (_a2 = _ctx.referenceElementRef) == null ? void 0 : _a2.$el,
      trigger: _ctx.trigger,
      "trigger-keys": _ctx.triggerKeys,
      "trigger-target-el": _ctx.contentRef,
      "show-after": _ctx.trigger === "hover" ? _ctx.showTimeout : 0,
      "stop-popper-mouse-event": false,
      "virtual-ref": _ctx.triggeringElementRef,
      "virtual-triggering": _ctx.splitButton,
      disabled: _ctx.disabled,
      transition: `${_ctx.ns.namespace.value}-zoom-in-top`,
      teleported: _ctx.teleported,
      pure: "",
      persistent: _ctx.persistent,
      onBeforeShow: _ctx.handleBeforeShowTooltip,
      onShow: _ctx.handleShowTooltip,
      onBeforeHide: _ctx.handleBeforeHideTooltip
    }, createSlots({
      content: withCtx(() => [
        createVNode(_component_el_scrollbar, {
          ref: "scrollbar",
          "wrap-style": _ctx.wrapStyle,
          tag: "div",
          "view-class": _ctx.ns.e("list")
        }, {
          default: withCtx(() => [
            createVNode(_component_el_roving_focus_group, {
              loop: _ctx.loop,
              "current-tab-id": _ctx.currentTabId,
              orientation: "horizontal",
              onCurrentTabIdChange: _ctx.handleCurrentTabIdChange,
              onEntryFocus: _ctx.handleEntryFocus
            }, {
              default: withCtx(() => [
                createVNode(_component_el_dropdown_collection, null, {
                  default: withCtx(() => [
                    renderSlot(_ctx.$slots, "dropdown")
                  ]),
                  _: 3
                })
              ]),
              _: 3
            }, 8, ["loop", "current-tab-id", "onCurrentTabIdChange", "onEntryFocus"])
          ]),
          _: 3
        }, 8, ["wrap-style", "view-class"])
      ]),
      _: 2
    }, [
      !_ctx.splitButton ? {
        name: "default",
        fn: withCtx(() => [
          createVNode(_component_el_only_child, {
            id: _ctx.triggerId,
            ref: "triggeringElementRef",
            role: "button",
            tabindex: _ctx.tabindex
          }, {
            default: withCtx(() => [
              renderSlot(_ctx.$slots, "default")
            ]),
            _: 3
          }, 8, ["id", "tabindex"])
        ])
      } : void 0
    ]), 1032, ["role", "effect", "popper-options", "hide-after", "placement", "popper-class", "reference-element", "trigger", "trigger-keys", "trigger-target-el", "show-after", "virtual-ref", "virtual-triggering", "disabled", "transition", "teleported", "persistent", "onBeforeShow", "onShow", "onBeforeHide"]),
    _ctx.splitButton ? (openBlock(), createBlock(_component_el_button_group, { key: 0 }, {
      default: withCtx(() => [
        createVNode(_component_el_button, mergeProps({ ref: "referenceElementRef" }, _ctx.buttonProps, {
          size: _ctx.dropdownSize,
          type: _ctx.type,
          disabled: _ctx.disabled,
          tabindex: _ctx.tabindex,
          onClick: _ctx.handlerMainButtonClick
        }), {
          default: withCtx(() => [
            renderSlot(_ctx.$slots, "default")
          ]),
          _: 3
        }, 16, ["size", "type", "disabled", "tabindex", "onClick"]),
        createVNode(_component_el_button, mergeProps({
          id: _ctx.triggerId,
          ref: "triggeringElementRef"
        }, _ctx.buttonProps, {
          role: "button",
          size: _ctx.dropdownSize,
          type: _ctx.type,
          class: _ctx.ns.e("caret-button"),
          disabled: _ctx.disabled,
          tabindex: _ctx.tabindex,
          "aria-label": _ctx.t("el.dropdown.toggleDropdown")
        }), {
          default: withCtx(() => [
            createVNode(_component_el_icon, {
              class: normalizeClass(_ctx.ns.e("icon"))
            }, {
              default: withCtx(() => [
                createVNode(_component_arrow_down)
              ]),
              _: 1
            }, 8, ["class"])
          ]),
          _: 1
        }, 16, ["id", "size", "type", "class", "disabled", "tabindex", "aria-label"])
      ]),
      _: 3
    })) : createCommentVNode("v-if", true)
  ], 2);
}
var Dropdown = _export_sfc2(_sfc_main$63, [["render", _sfc_render$42], ["__file", "dropdown.vue"]]);
var _sfc_main$53 = defineComponent({
  components: {
    ElRovingFocusCollectionItem: ElCollectionItem2
  },
  props: {
    focusable: {
      type: Boolean,
      default: true
    },
    active: {
      type: Boolean,
      default: false
    }
  },
  emits: ["mousedown", "focus", "keydown"],
  setup(props, { emit }) {
    const { currentTabbedId, loop, onItemFocus, onItemShiftTab } = inject(ROVING_FOCUS_GROUP_INJECTION_KEY, void 0);
    const { getItems } = inject(COLLECTION_INJECTION_KEY2, void 0);
    const id = useId();
    const rovingFocusGroupItemRef = ref();
    const handleMousedown = composeEventHandlers((e) => {
      emit("mousedown", e);
    }, (e) => {
      if (!props.focusable) {
        e.preventDefault();
      } else {
        onItemFocus(unref(id));
      }
    });
    const handleFocus = composeEventHandlers((e) => {
      emit("focus", e);
    }, () => {
      onItemFocus(unref(id));
    });
    const handleKeydown = composeEventHandlers((e) => {
      emit("keydown", e);
    }, (e) => {
      const { code: code2, shiftKey, target, currentTarget } = e;
      if (code2 === EVENT_CODE.tab && shiftKey) {
        onItemShiftTab();
        return;
      }
      if (target !== currentTarget)
        return;
      const focusIntent = getFocusIntent(e);
      if (focusIntent) {
        e.preventDefault();
        const items = getItems().filter((item) => item.focusable);
        let elements = items.map((item) => item.ref);
        switch (focusIntent) {
          case "last": {
            elements.reverse();
            break;
          }
          case "prev":
          case "next": {
            if (focusIntent === "prev") {
              elements.reverse();
            }
            const currentIdx = elements.indexOf(currentTarget);
            elements = loop.value ? reorderArray(elements, currentIdx + 1) : elements.slice(currentIdx + 1);
            break;
          }
        }
        nextTick(() => {
          focusFirst(elements);
        });
      }
    });
    const isCurrentTab = computed(() => currentTabbedId.value === unref(id));
    provide(ROVING_FOCUS_GROUP_ITEM_INJECTION_KEY, {
      rovingFocusGroupItemRef,
      tabIndex: computed(() => unref(isCurrentTab) ? 0 : -1),
      handleMousedown,
      handleFocus,
      handleKeydown
    });
    return {
      id,
      handleKeydown,
      handleFocus,
      handleMousedown
    };
  }
});
function _sfc_render$32(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_el_roving_focus_collection_item = resolveComponent("el-roving-focus-collection-item");
  return openBlock(), createBlock(_component_el_roving_focus_collection_item, {
    id: _ctx.id,
    focusable: _ctx.focusable,
    active: _ctx.active
  }, {
    default: withCtx(() => [
      renderSlot(_ctx.$slots, "default")
    ]),
    _: 3
  }, 8, ["id", "focusable", "active"]);
}
var ElRovingFocusItem = _export_sfc2(_sfc_main$53, [["render", _sfc_render$32], ["__file", "roving-focus-item.vue"]]);
var _sfc_main$44 = defineComponent({
  name: "DropdownItemImpl",
  components: {
    ElIcon
  },
  props: dropdownItemProps,
  emits: ["pointermove", "pointerleave", "click", "clickimpl"],
  setup(_, { emit }) {
    const ns = useNamespace("dropdown");
    const { role: menuRole } = inject(DROPDOWN_INJECTION_KEY, void 0);
    const { collectionItemRef: dropdownCollectionItemRef } = inject(COLLECTION_ITEM_INJECTION_KEY, void 0);
    const { collectionItemRef: rovingFocusCollectionItemRef } = inject(COLLECTION_ITEM_INJECTION_KEY2, void 0);
    const {
      rovingFocusGroupItemRef,
      tabIndex,
      handleFocus,
      handleKeydown: handleItemKeydown,
      handleMousedown
    } = inject(ROVING_FOCUS_GROUP_ITEM_INJECTION_KEY, void 0);
    const itemRef = composeRefs(dropdownCollectionItemRef, rovingFocusCollectionItemRef, rovingFocusGroupItemRef);
    const role = computed(() => {
      if (menuRole.value === "menu") {
        return "menuitem";
      } else if (menuRole.value === "navigation") {
        return "link";
      }
      return "button";
    });
    const handleKeydown = composeEventHandlers((e) => {
      if ([EVENT_CODE.enter, EVENT_CODE.numpadEnter, EVENT_CODE.space].includes(e.code)) {
        e.preventDefault();
        e.stopImmediatePropagation();
        emit("clickimpl", e);
        return true;
      }
    }, handleItemKeydown);
    return {
      ns,
      itemRef,
      dataset: {
        [COLLECTION_ITEM_SIGN]: ""
      },
      role,
      tabIndex,
      handleFocus,
      handleKeydown,
      handleMousedown
    };
  }
});
function _sfc_render$22(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_el_icon = resolveComponent("el-icon");
  return openBlock(), createElementBlock(Fragment, null, [
    _ctx.divided ? (openBlock(), createElementBlock("li", {
      key: 0,
      role: "separator",
      class: normalizeClass(_ctx.ns.bem("menu", "item", "divided"))
    }, null, 2)) : createCommentVNode("v-if", true),
    createBaseVNode("li", mergeProps({ ref: _ctx.itemRef }, { ..._ctx.dataset, ..._ctx.$attrs }, {
      "aria-disabled": _ctx.disabled,
      class: [_ctx.ns.be("menu", "item"), _ctx.ns.is("disabled", _ctx.disabled)],
      tabindex: _ctx.tabIndex,
      role: _ctx.role,
      onClick: (e) => _ctx.$emit("clickimpl", e),
      onFocus: _ctx.handleFocus,
      onKeydown: withModifiers(_ctx.handleKeydown, ["self"]),
      onMousedown: _ctx.handleMousedown,
      onPointermove: (e) => _ctx.$emit("pointermove", e),
      onPointerleave: (e) => _ctx.$emit("pointerleave", e)
    }), [
      _ctx.icon ? (openBlock(), createBlock(_component_el_icon, { key: 0 }, {
        default: withCtx(() => [
          (openBlock(), createBlock(resolveDynamicComponent(_ctx.icon)))
        ]),
        _: 1
      })) : createCommentVNode("v-if", true),
      renderSlot(_ctx.$slots, "default")
    ], 16, ["aria-disabled", "tabindex", "role", "onClick", "onFocus", "onKeydown", "onMousedown", "onPointermove", "onPointerleave"])
  ], 64);
}
var ElDropdownItemImpl = _export_sfc2(_sfc_main$44, [["render", _sfc_render$22], ["__file", "dropdown-item-impl.vue"]]);
var useDropdown = () => {
  const elDropdown = inject("elDropdown", {});
  const _elDropdownSize = computed(() => elDropdown == null ? void 0 : elDropdown.dropdownSize);
  return {
    elDropdown,
    _elDropdownSize
  };
};
var _sfc_main$34 = defineComponent({
  name: "ElDropdownItem",
  components: {
    ElDropdownCollectionItem: ElCollectionItem,
    ElRovingFocusItem,
    ElDropdownItemImpl
  },
  inheritAttrs: false,
  props: dropdownItemProps,
  emits: ["pointermove", "pointerleave", "click"],
  setup(props, { emit, attrs }) {
    const { elDropdown } = useDropdown();
    const _instance2 = getCurrentInstance();
    const itemRef = ref(null);
    const textContent = computed(() => {
      var _a2, _b;
      return (_b = (_a2 = unref(itemRef)) == null ? void 0 : _a2.textContent) != null ? _b : "";
    });
    const { onItemEnter, onItemLeave } = inject(DROPDOWN_INJECTION_KEY, void 0);
    const handlePointerMove = composeEventHandlers((e) => {
      emit("pointermove", e);
      return e.defaultPrevented;
    }, whenMouse((e) => {
      if (props.disabled) {
        onItemLeave(e);
        return;
      }
      const target = e.currentTarget;
      if (target === document.activeElement || target.contains(document.activeElement)) {
        return;
      }
      onItemEnter(e);
      if (!e.defaultPrevented) {
        target == null ? void 0 : target.focus();
      }
    }));
    const handlePointerLeave = composeEventHandlers((e) => {
      emit("pointerleave", e);
      return e.defaultPrevented;
    }, whenMouse(onItemLeave));
    const handleClick = composeEventHandlers((e) => {
      if (props.disabled) {
        return;
      }
      emit("click", e);
      return e.type !== "keydown" && e.defaultPrevented;
    }, (e) => {
      var _a2, _b, _c;
      if (props.disabled) {
        e.stopImmediatePropagation();
        return;
      }
      if ((_a2 = elDropdown == null ? void 0 : elDropdown.hideOnClick) == null ? void 0 : _a2.value) {
        (_b = elDropdown.handleClick) == null ? void 0 : _b.call(elDropdown);
      }
      (_c = elDropdown.commandHandler) == null ? void 0 : _c.call(elDropdown, props.command, _instance2, e);
    });
    const propsAndAttrs = computed(() => ({ ...props, ...attrs }));
    return {
      handleClick,
      handlePointerMove,
      handlePointerLeave,
      textContent,
      propsAndAttrs
    };
  }
});
function _sfc_render$13(_ctx, _cache, $props, $setup, $data, $options) {
  var _a2;
  const _component_el_dropdown_item_impl = resolveComponent("el-dropdown-item-impl");
  const _component_el_roving_focus_item = resolveComponent("el-roving-focus-item");
  const _component_el_dropdown_collection_item = resolveComponent("el-dropdown-collection-item");
  return openBlock(), createBlock(_component_el_dropdown_collection_item, {
    disabled: _ctx.disabled,
    "text-value": (_a2 = _ctx.textValue) != null ? _a2 : _ctx.textContent
  }, {
    default: withCtx(() => [
      createVNode(_component_el_roving_focus_item, {
        focusable: !_ctx.disabled
      }, {
        default: withCtx(() => [
          createVNode(_component_el_dropdown_item_impl, mergeProps(_ctx.propsAndAttrs, {
            onPointerleave: _ctx.handlePointerLeave,
            onPointermove: _ctx.handlePointerMove,
            onClickimpl: _ctx.handleClick
          }), {
            default: withCtx(() => [
              renderSlot(_ctx.$slots, "default")
            ]),
            _: 3
          }, 16, ["onPointerleave", "onPointermove", "onClickimpl"])
        ]),
        _: 3
      }, 8, ["focusable"])
    ]),
    _: 3
  }, 8, ["disabled", "text-value"]);
}
var DropdownItem = _export_sfc2(_sfc_main$34, [["render", _sfc_render$13], ["__file", "dropdown-item.vue"]]);
var _sfc_main$25 = defineComponent({
  name: "ElDropdownMenu",
  props: dropdownMenuProps,
  setup(props) {
    const ns = useNamespace("dropdown");
    const { _elDropdownSize } = useDropdown();
    const size = _elDropdownSize.value;
    const { focusTrapRef, onKeydown } = inject(FOCUS_TRAP_INJECTION_KEY, void 0);
    const { contentRef, role, triggerId } = inject(DROPDOWN_INJECTION_KEY, void 0);
    const { collectionRef: dropdownCollectionRef, getItems } = inject(COLLECTION_INJECTION_KEY, void 0);
    const {
      rovingFocusGroupRef,
      rovingFocusGroupRootStyle,
      tabIndex,
      onBlur,
      onFocus,
      onMousedown
    } = inject(ROVING_FOCUS_GROUP_INJECTION_KEY, void 0);
    const { collectionRef: rovingFocusGroupCollectionRef } = inject(COLLECTION_INJECTION_KEY2, void 0);
    const dropdownKls = computed(() => {
      return [ns.b("menu"), ns.bm("menu", size == null ? void 0 : size.value)];
    });
    const dropdownListWrapperRef = composeRefs(contentRef, dropdownCollectionRef, focusTrapRef, rovingFocusGroupRef, rovingFocusGroupCollectionRef);
    const composedKeydown = composeEventHandlers((e) => {
      var _a2;
      (_a2 = props.onKeydown) == null ? void 0 : _a2.call(props, e);
    }, (e) => {
      const { currentTarget, code: code2, target } = e;
      currentTarget.contains(target);
      if (EVENT_CODE.tab === code2) {
        e.stopImmediatePropagation();
      }
      e.preventDefault();
      if (target !== unref(contentRef) || !FIRST_LAST_KEYS.includes(code2))
        return;
      const items = getItems().filter((item) => !item.disabled);
      const targets = items.map((item) => item.ref);
      if (LAST_KEYS.includes(code2)) {
        targets.reverse();
      }
      focusFirst(targets);
    });
    const handleKeydown = (e) => {
      composedKeydown(e);
      onKeydown(e);
    };
    return {
      size,
      rovingFocusGroupRootStyle,
      tabIndex,
      dropdownKls,
      role,
      triggerId,
      dropdownListWrapperRef,
      handleKeydown,
      onBlur,
      onFocus,
      onMousedown
    };
  }
});
function _sfc_render5(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("ul", {
    ref: _ctx.dropdownListWrapperRef,
    class: normalizeClass(_ctx.dropdownKls),
    style: normalizeStyle(_ctx.rovingFocusGroupRootStyle),
    tabindex: -1,
    role: _ctx.role,
    "aria-labelledby": _ctx.triggerId,
    onBlur: _ctx.onBlur,
    onFocus: _ctx.onFocus,
    onKeydown: withModifiers(_ctx.handleKeydown, ["self"]),
    onMousedown: withModifiers(_ctx.onMousedown, ["self"])
  }, [
    renderSlot(_ctx.$slots, "default")
  ], 46, ["role", "aria-labelledby", "onBlur", "onFocus", "onKeydown", "onMousedown"]);
}
var DropdownMenu = _export_sfc2(_sfc_main$25, [["render", _sfc_render5], ["__file", "dropdown-menu.vue"]]);
var ElDropdown = withInstall(Dropdown, {
  DropdownItem,
  DropdownMenu
});
var ElDropdownItem = withNoopInstall(DropdownItem);
var ElDropdownMenu = withNoopInstall(DropdownMenu);
var _hoisted_1$12 = { class: "conversation-content" };
var _hoisted_2$1 = { class: "conversation-content-main" };
var _hoisted_3$1 = {
  key: 0,
  class: "conversation-prefix-icon"
};
var _hoisted_4$1 = { class: "conversation-label-container" };
var _hoisted_54 = {
  key: 0,
  class: "conversation-suffix-icon"
};
var _hoisted_63 = { key: 1 };
var _sfc_main$110 = defineComponent({
  __name: "item",
  props: {
    item: {},
    itemsStyle: {},
    itemsHoverStyle: {},
    itemsActiveStyle: {},
    itemsMenuOpenedStyle: {},
    prefixIcon: {},
    suffixIcon: {},
    showTooltip: { type: Boolean },
    labelMaxWidth: {},
    menu: {},
    showBuiltInMenu: { type: Boolean },
    tooltipPlacement: {},
    tooltipOffset: {},
    menuPlacement: {},
    menuOffset: {},
    menuMaxHeight: {},
    menuStyle: {},
    menuShowArrow: { type: Boolean },
    menuClassName: {},
    menuTeleported: { type: Boolean },
    active: { type: Boolean }
  },
  emits: ["click", "menuCommand"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emit = __emit;
    const slots = useSlots();
    const {
      item,
      itemsStyle,
      itemsHoverStyle,
      itemsActiveStyle,
      itemsMenuOpenedStyle,
      showTooltip,
      labelMaxWidth,
      menu,
      showBuiltInMenu,
      tooltipPlacement,
      tooltipOffset,
      menuPlacement,
      menuOffset,
      menuMaxHeight,
      menuStyle,
      menuShowArrow,
      menuClassName,
      menuTeleported
    } = toRefs(props);
    function renderIcon(icon) {
      if (!icon)
        return null;
      return h(icon);
    }
    const prefixIconRender = computed(() => {
      return renderIcon(props.prefixIcon);
    });
    const suffixIconRender = computed(() => {
      return renderIcon(props.suffixIcon);
    });
    const isHovered = ref(false);
    function handleMouseEnter() {
      isHovered.value = true;
    }
    function handleMouseLeave() {
      isHovered.value = false;
    }
    function handleClick(key) {
      emit("click", key);
    }
    const isTextOverflow = computed(() => {
      return (label = "") => {
        if (!labelMaxWidth.value)
          return false;
        const span = document.createElement("span");
        span.style.visibility = "hidden";
        span.style.position = "absolute";
        span.style.whiteSpace = "nowrap";
        span.style.fontSize = "14px";
        span.textContent = label;
        document.body.appendChild(span);
        const textWidth = span.offsetWidth;
        document.body.removeChild(span);
        return textWidth > labelMaxWidth.value;
      };
    });
    const labelStyle = computed(() => {
      if (labelMaxWidth.value) {
        return {
          maxWidth: `${labelMaxWidth.value}px`,
          overflow: "hidden"
        };
      }
      return {};
    });
    const isShowMenuBtn = ref(false);
    const shouldShowMenu = computed(() => {
      return isHovered.value || props.active || isShowMenuBtn.value;
    });
    const menuButtonRef = ref(null);
    const mergedMenuStyle = computed(() => {
      return {
        ...menuStyle.value
      };
    });
    function camelToKebab(str) {
      return str.replace(/([a-z0-9])([A-Z])/g, "$1-$2").toLowerCase();
    }
    function updateMenuStatus(isOpen) {
      isShowMenuBtn.value = isOpen;
      if (isOpen) {
        nextTick(() => {
          const dropdownMenu = document.querySelectorAll(".conversation-dropdown-menu");
          if (dropdownMenu.length === 0) {
            return;
          }
          dropdownMenu.forEach((dropdownMenuItem) => {
            if (dropdownMenuItem && dropdownMenuItem.style.display !== "none") {
              const arrows = dropdownMenuItem.querySelectorAll(".el-popper__arrow");
              if (arrows.length === 0) {
                return;
              }
              arrows.forEach((arrow) => {
                arrow.style.display = menuShowArrow.value ? "block" : "none";
              });
              const items = dropdownMenuItem.querySelectorAll(".el-dropdown-menu__item:not(.is-disabled)");
              if (items.length === 0) {
                return;
              }
              items.forEach((item2, index) => {
                if (!menu.value || menu.value.length === 0) {
                  return;
                }
                const menuItemHoverStyle = menu.value[index].menuItemHoverStyle || {};
                const className = `custom-hover-${index}`;
                item2.classList.add(className);
                const style = document.createElement("style");
                style.textContent = `
              .${className}:hover,
              .${className}:focus {
                ${Object.entries(menuItemHoverStyle).map(([prop, val]) => `${camelToKebab(prop)}: ${val} !important;`).join(" ")}
              }
            `;
                document.head.appendChild(style);
              });
            }
          });
        });
      }
    }
    function menuCommand(command, item2) {
      if (slots.menu) {
        return false;
      }
      emit("menuCommand", command, item2);
    }
    return (_ctx, _cache) => {
      const _component_el_icon = ElIcon;
      const _component_ElTooltip = ElTooltip;
      const _component_ElIcon = ElIcon;
      const _component_el_dropdown_item = ElDropdownItem;
      const _component_el_dropdown_menu = ElDropdownMenu;
      const _component_el_dropdown = ElDropdown;
      return openBlock(), createElementBlock("li", {
        key: unref(item).key,
        class: normalizeClass(["conversation-item", {
          disabled: unref(item).disabled,
          active: _ctx.active,
          hovered: unref(item).disabled ? false : unref(isHovered),
          "menu-opened": unref(isShowMenuBtn)
        }]),
        style: normalizeStyle({
          ...unref(itemsStyle),
          ...unref(isHovered) ? unref(itemsHoverStyle) : {},
          ...unref(isShowMenuBtn) ? unref(itemsMenuOpenedStyle) : {},
          ..._ctx.active ? unref(itemsActiveStyle) : {}
        }),
        onClick: _cache[2] || (_cache[2] = ($event) => handleClick(unref(item).key)),
        onMouseenter: handleMouseEnter,
        onMouseleave: handleMouseLeave
      }, [
        createBaseVNode("div", _hoisted_1$12, [
          createBaseVNode("div", _hoisted_2$1, [
            renderSlot(_ctx.$slots, "label", {}, () => [
              unref(prefixIconRender) ? (openBlock(), createElementBlock("span", _hoisted_3$1, [
                createVNode(_component_el_icon, null, {
                  default: withCtx(() => [
                    (openBlock(), createBlock(resolveDynamicComponent(unref(prefixIconRender))))
                  ]),
                  _: 1
                })
              ])) : createCommentVNode("", true),
              createBaseVNode("div", _hoisted_4$1, [
                unref(showTooltip) && unref(isTextOverflow)(unref(item).label) ? (openBlock(), createBlock(_component_ElTooltip, {
                  key: 0,
                  content: unref(item).label,
                  placement: unref(tooltipPlacement),
                  offset: unref(tooltipOffset),
                  effect: "dark"
                }, {
                  default: withCtx(() => [
                    createBaseVNode("span", {
                      class: normalizeClass(["conversation-label", { "text-gradient": unref(isTextOverflow)(unref(item).label) }]),
                      style: normalizeStyle(unref(labelStyle))
                    }, toDisplayString(unref(item).label), 7)
                  ]),
                  _: 1
                }, 8, ["content", "placement", "offset"])) : (openBlock(), createElementBlock("span", {
                  key: 1,
                  class: normalizeClass(["conversation-label", { "text-gradient": unref(isTextOverflow)(unref(item).label) }]),
                  style: normalizeStyle(unref(labelStyle))
                }, toDisplayString(unref(item).label), 7))
              ])
            ], true)
          ]),
          unref(suffixIconRender) ? (openBlock(), createElementBlock("span", _hoisted_54, [
            createVNode(_component_ElIcon, null, {
              default: withCtx(() => [
                (openBlock(), createBlock(resolveDynamicComponent(unref(suffixIconRender))))
              ]),
              _: 1
            })
          ])) : createCommentVNode("", true),
          unref(shouldShowMenu) && unref(showBuiltInMenu) ? (openBlock(), createElementBlock("div", _hoisted_63, [
            unref(menu) && unref(menu).length ? (openBlock(), createElementBlock("div", {
              key: 0,
              ref_key: "menuButtonRef",
              ref: menuButtonRef,
              class: "conversation-dropdown-more",
              onClick: _cache[1] || (_cache[1] = (e) => e.stopPropagation())
            }, [
              createVNode(_component_el_dropdown, {
                trigger: "click",
                placement: unref(menuPlacement),
                offset: unref(menuOffset),
                teleported: unref(menuTeleported),
                "popper-class": unref(menuClassName) ? `conversation-dropdown-menu ${unref(menuClassName)}` : "conversation-dropdown-menu",
                "max-height": unref(menuMaxHeight),
                disabled: unref(item).disabled,
                onVisibleChange: updateMenuStatus,
                onCommand: _cache[0] || (_cache[0] = (command) => menuCommand(command, unref(item)))
              }, {
                default: withCtx(() => [
                  renderSlot(_ctx.$slots, "more-filled", normalizeProps(guardReactiveProps({
                    item: unref(item),
                    isHovered: unref(item).disabled ? false : unref(isHovered),
                    isActive: _ctx.active,
                    isMenuOpened: unref(isShowMenuBtn),
                    isDisabled: unref(item).disabled
                  })), () => [
                    createVNode(_component_el_icon, { class: "conversation-dropdown-more-icon" }, {
                      default: withCtx(() => [
                        createVNode(unref(more_filled_default))
                      ]),
                      _: 1
                    })
                  ], true)
                ]),
                dropdown: withCtx(() => [
                  renderSlot(_ctx.$slots, "menu", {}, () => [
                    createVNode(_component_el_dropdown_menu, {
                      style: normalizeStyle(unref(mergedMenuStyle))
                    }, {
                      default: withCtx(() => [
                        (openBlock(true), createElementBlock(Fragment, null, renderList(unref(menu), (menuItem) => {
                          return openBlock(), createBlock(_component_el_dropdown_item, {
                            key: menuItem.key,
                            icon: menuItem.icon,
                            disabled: menuItem.disabled,
                            divided: menuItem.divided,
                            command: menuItem.command,
                            style: normalizeStyle(menuItem.menuItemStyle)
                          }, {
                            default: withCtx(() => [
                              createTextVNode(toDisplayString(menuItem.label), 1)
                            ]),
                            _: 2
                          }, 1032, ["icon", "disabled", "divided", "command", "style"]);
                        }), 128))
                      ]),
                      _: 1
                    }, 8, ["style"])
                  ], true)
                ]),
                _: 3
              }, 8, ["placement", "offset", "teleported", "popper-class", "max-height", "disabled"])
            ], 512)) : createCommentVNode("", true)
          ])) : createCommentVNode("", true)
        ])
      ], 38);
    };
  }
});
var Item = _export_sfc(_sfc_main$110, [["__scopeId", "data-v-a8ef9c64"]]);
var _hoisted_15 = { class: "conversations-scroll-wrapper" };
var _hoisted_24 = { class: "scroll-content" };
var _hoisted_34 = { class: "conversation-group-items" };
var _hoisted_44 = {
  key: 0,
  class: "conversations-load-more"
};
var _sfc_main13 = defineComponent({
  __name: "index",
  props: mergeModels({
    items: { default: () => [] },
    itemsStyle: { default: () => ({}) },
    itemsHoverStyle: { default: () => ({}) },
    itemsActiveStyle: { default: () => ({}) },
    itemsMenuOpenedStyle: { default: () => ({}) },
    style: { default: () => ({}) },
    labelMaxWidth: { default: void 0 },
    labelHeight: { default: 20 },
    showTooltip: { type: Boolean, default: () => false },
    tooltipPlacement: { default: "top" },
    tooltipOffset: { default: 12 },
    groupable: { type: [Boolean, Object], default: () => false },
    ungroupedTitle: { default: "未分组" },
    menu: { default: () => [
      {
        label: "重命名",
        key: "rename",
        icon: markRaw(edit_default),
        command: "rename"
      },
      {
        label: "删除",
        key: "delete",
        icon: markRaw(delete_default),
        command: "delete",
        menuItemHoverStyle: {
          color: "red",
          backgroundColor: "rgba(255, 0, 0, 0.1)"
        }
      }
    ] },
    showBuiltInMenu: { type: Boolean, default: false },
    menuPlacement: { default: "bottom-start" },
    menuOffset: { default: 50 },
    menuShowArrow: { type: Boolean, default: false },
    menuMaxHeight: {},
    menuStyle: { default: () => ({}) },
    menuClassName: { default: "" },
    menuTeleported: { type: Boolean, default: true },
    loadMore: {},
    loadMoreLoading: { type: Boolean, default: false },
    showToTopBtn: { type: Boolean, default: false },
    rowKey: { default: "id" },
    labelKey: { default: "label" }
  }, {
    "active": { required: false },
    "activeModifiers": {}
  }),
  emits: mergeModels(["menuCommand", "change"], ["update:active"]),
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emits = __emit;
    const activeKey = useModel(__props, "active");
    const itemsUse = computed(() => {
      return props.items.map((item, index) => ({
        ...item,
        uniqueKey: props.rowKey ? get2(item, props.rowKey) : index.toString(),
        label: get2(item, props.labelKey)
      }));
    });
    const mergedStyle = computed(() => {
      const defaultStyle = {
        padding: "10px 0 10px 10px",
        backgroundColor: "#fff",
        borderRadius: "8px",
        width: "280px",
        height: "0"
      };
      return { ...defaultStyle, ...props.style };
    });
    function handleClick(item) {
      if (item.disabled)
        return;
      emits("change", item);
      activeKey.value = item.uniqueKey;
    }
    const shouldUseGrouping = computed(() => {
      return !!props.groupable;
    });
    const filteredItems = computed(() => {
      return itemsUse.value;
    });
    const groups = computed(() => {
      if (!shouldUseGrouping.value)
        return [];
      if (!filteredItems.value || filteredItems.value.length === 0) {
        return [];
      }
      const groupMap = {};
      filteredItems.value.forEach((item) => {
        let groupName = null;
        if (item.group) {
          groupName = item.group;
        }
        const finalGroupName = groupName || props.ungroupedTitle;
        if (!groupMap[finalGroupName]) {
          groupMap[finalGroupName] = {
            title: finalGroupName,
            key: finalGroupName,
            children: [],
            isUngrouped: !groupName
            // 如果没有找到组名，则标记为未分组
          };
        }
        groupMap[finalGroupName].children.push(item);
      });
      const groupArray = Object.values(groupMap);
      if (typeof props.groupable === "object" && props.groupable.sort) {
        return groupArray.sort((a, b) => {
          if (a.isUngrouped)
            return 1;
          if (b.isUngrouped)
            return -1;
          const sortFn = props.groupable.sort;
          return sortFn ? sortFn(a.key, b.key) : 0;
        });
      }
      return groupArray.sort((a, b) => {
        if (a.isUngrouped)
          return 1;
        if (b.isUngrouped)
          return -1;
        return 0;
      });
    });
    const scrollbarRef = ref(null);
    const showScrollTop = ref(false);
    const groupRefs = ref({});
    const stickyGroupKeys = ref(/* @__PURE__ */ new Set());
    function handleScroll(e) {
      const scrollTop = e.scrollTop;
      showScrollTop.value = scrollTop > 200;
      const scrollbar = scrollbarRef.value;
      if (!scrollbar)
        return;
      const wrap = scrollbar.wrapRef;
      if (!wrap)
        return;
      const bottomOffset = 20;
      const scrollHeight = wrap.scrollHeight;
      const clientHeight = wrap.clientHeight;
      const isNearBottom = scrollHeight - scrollTop - clientHeight < bottomOffset;
      if (isNearBottom) {
        loadMoreData();
      }
      updateStickyStatus();
    }
    function updateStickyStatus(_e) {
      var _a2;
      if (!shouldUseGrouping.value || groups.value.length === 0)
        return;
      stickyGroupKeys.value.clear();
      const scrollContainer = (_a2 = scrollbarRef.value) == null ? void 0 : _a2.wrapRef;
      if (!scrollContainer)
        return;
      if (groups.value.length === 1) {
        stickyGroupKeys.value.add(groups.value[0].key);
        return;
      }
      const scrollContainerTop = scrollContainer.getBoundingClientRect().top;
      const containerHeight = scrollContainer.clientHeight;
      const scrollHeight = scrollContainer.scrollHeight;
      const scrollTop = scrollContainer.scrollTop;
      const isNearBottom = scrollHeight - scrollTop - containerHeight < 20;
      if (isNearBottom && groups.value.length > 0) {
        stickyGroupKeys.value.add(groups.value[groups.value.length - 1].key);
        return;
      }
      const visibleGroups = [];
      for (const group of groups.value) {
        const groupElement = groupRefs.value[group.key];
        if (groupElement) {
          const groupRect = groupElement.getBoundingClientRect();
          const relativeTop = groupRect.top - scrollContainerTop;
          if (relativeTop < containerHeight && relativeTop + groupRect.height > 0) {
            visibleGroups.push({
              group,
              relativeTop,
              height: groupRect.height
            });
          }
        }
      }
      visibleGroups.sort((a, b) => a.relativeTop - b.relativeTop);
      if (visibleGroups.length > 0) {
        const fullyVisibleGroup = visibleGroups.find((g) => g.relativeTop >= 0);
        if (fullyVisibleGroup) {
          stickyGroupKeys.value.add(fullyVisibleGroup.group.key);
        } else {
          stickyGroupKeys.value.add(visibleGroups[0].group.key);
        }
      } else if (groups.value.length > 0) {
        stickyGroupKeys.value.add(groups.value[0].key);
      }
    }
    function loadMoreData() {
      if (!props.loadMore)
        return;
      props.loadMore();
    }
    function scrollToTop() {
      var _a2;
      (_a2 = scrollbarRef.value) == null ? void 0 : _a2.setScrollTop(0);
    }
    function handleMenuItemClick(command, item) {
      emits("menuCommand", command, item);
    }
    function bindGroupRef(el, item) {
      if (el) {
        groupRefs.value[item.key] = el;
      }
    }
    onMounted(() => {
      if (shouldUseGrouping.value && groups.value.length > 0) {
        stickyGroupKeys.value.add(groups.value[0].key);
      }
    });
    return (_ctx, _cache) => {
      const _component_el_icon = ElIcon;
      const _component_el_scrollbar = ElScrollbar;
      const _component_el_button = ElButton;
      return openBlock(), createElementBlock("div", {
        class: "conversations-container",
        style: normalizeStyle({
          "--conversation-label-height": `${props.labelHeight}px`,
          "--conversation-list-auto-bg-color": unref(mergedStyle).backgroundColor
        })
      }, [
        renderSlot(_ctx.$slots, "header", {}, void 0, true),
        createBaseVNode("ul", {
          class: "conversations-list",
          style: normalizeStyle(unref(mergedStyle))
        }, [
          createBaseVNode("li", _hoisted_15, [
            createVNode(_component_el_scrollbar, {
              ref_key: "scrollbarRef",
              ref: scrollbarRef,
              height: "100%",
              class: "custom-scrollbar",
              always: "",
              onScroll: handleScroll
            }, {
              default: withCtx(() => [
                createBaseVNode("div", _hoisted_24, [
                  unref(shouldUseGrouping) ? (openBlock(true), createElementBlock(Fragment, { key: 0 }, renderList(unref(groups), (group) => {
                    return openBlock(), createElementBlock("div", {
                      key: group.key,
                      ref_for: true,
                      ref: (el) => bindGroupRef(el, group),
                      class: "conversation-group"
                    }, [
                      createBaseVNode("div", {
                        class: normalizeClass(["conversation-group-title sticky-title", { "active-sticky": unref(stickyGroupKeys).has(group.key) }])
                      }, [
                        renderSlot(_ctx.$slots, "groupTitle", mergeProps({ ref_for: true }, { group }), () => [
                          createTextVNode(toDisplayString(group.title), 1)
                        ], true)
                      ], 2),
                      createBaseVNode("div", _hoisted_34, [
                        (openBlock(true), createElementBlock(Fragment, null, renderList(group.children, (item) => {
                          return openBlock(), createBlock(Item, {
                            key: item.uniqueKey,
                            item,
                            active: item.uniqueKey === activeKey.value,
                            "items-style": props.itemsStyle,
                            "items-hover-style": props.itemsHoverStyle,
                            "items-active-style": props.itemsActiveStyle,
                            "items-menu-opened-style": props.itemsMenuOpenedStyle,
                            "prefix-icon": item.prefixIcon,
                            "show-tooltip": _ctx.showTooltip,
                            "tooltip-placement": props.tooltipPlacement,
                            "tooltip-offset": props.tooltipOffset,
                            "suffix-icon": item.suffixIcon,
                            "active-key": activeKey.value || "",
                            "label-max-width": _ctx.labelMaxWidth,
                            menu: _ctx.menu,
                            "show-built-in-menu": props.showBuiltInMenu,
                            "menu-placement": props.menuPlacement,
                            "menu-offset": props.menuOffset,
                            "menu-max-height": props.menuMaxHeight,
                            "menu-style": props.menuStyle,
                            "menu-show-arrow": props.menuShowArrow,
                            "menu-class-name": props.menuClassName,
                            "menu-teleported": props.menuTeleported,
                            onClick: ($event) => handleClick(item),
                            onMenuCommand: handleMenuItemClick
                          }, createSlots({ _: 2 }, [
                            _ctx.$slots.label ? {
                              name: "label",
                              fn: withCtx(() => [
                                renderSlot(_ctx.$slots, "label", mergeProps({ ref_for: true }, { item }), void 0, true)
                              ]),
                              key: "0"
                            } : void 0,
                            _ctx.$slots["more-filled"] ? {
                              name: "more-filled",
                              fn: withCtx((moreFilledSoltProps) => [
                                renderSlot(_ctx.$slots, "more-filled", mergeProps({ ref_for: true }, moreFilledSoltProps), void 0, true)
                              ]),
                              key: "1"
                            } : void 0,
                            _ctx.$slots.menu ? {
                              name: "menu",
                              fn: withCtx(() => [
                                renderSlot(_ctx.$slots, "menu", mergeProps({ ref_for: true }, { item }), void 0, true)
                              ]),
                              key: "2"
                            } : void 0
                          ]), 1032, ["item", "active", "items-style", "items-hover-style", "items-active-style", "items-menu-opened-style", "prefix-icon", "show-tooltip", "tooltip-placement", "tooltip-offset", "suffix-icon", "active-key", "label-max-width", "menu", "show-built-in-menu", "menu-placement", "menu-offset", "menu-max-height", "menu-style", "menu-show-arrow", "menu-class-name", "menu-teleported", "onClick"]);
                        }), 128))
                      ])
                    ]);
                  }), 128)) : (openBlock(true), createElementBlock(Fragment, { key: 1 }, renderList(unref(filteredItems), (item) => {
                    return openBlock(), createBlock(Item, {
                      key: item.uniqueKey,
                      item,
                      "items-style": props.itemsStyle,
                      "items-hover-style": props.itemsHoverStyle,
                      "items-active-style": props.itemsActiveStyle,
                      active: item.uniqueKey === activeKey.value,
                      "items-menu-opened-style": props.itemsMenuOpenedStyle,
                      "prefix-icon": item.prefixIcon,
                      "show-tooltip": _ctx.showTooltip,
                      "tooltip-placement": props.tooltipPlacement,
                      "tooltip-offset": props.tooltipOffset,
                      "suffix-icon": item.suffixIcon,
                      "active-key": activeKey.value || "",
                      "label-max-width": _ctx.labelMaxWidth,
                      menu: _ctx.menu,
                      "show-built-in-menu": props.showBuiltInMenu,
                      "menu-placement": props.menuPlacement,
                      "menu-offset": props.menuOffset,
                      "menu-max-height": props.menuMaxHeight,
                      "menu-style": props.menuStyle,
                      "menu-show-arrow": props.menuShowArrow,
                      "menu-class-name": props.menuClassName,
                      "menu-teleported": props.menuTeleported,
                      onClick: ($event) => handleClick(item),
                      onMenuCommand: handleMenuItemClick
                    }, createSlots({ _: 2 }, [
                      _ctx.$slots.label ? {
                        name: "label",
                        fn: withCtx(() => [
                          renderSlot(_ctx.$slots, "label", mergeProps({ ref_for: true }, { item }), void 0, true)
                        ]),
                        key: "0"
                      } : void 0,
                      _ctx.$slots["more-filled"] ? {
                        name: "more-filled",
                        fn: withCtx((moreFilledSoltProps) => [
                          renderSlot(_ctx.$slots, "more-filled", mergeProps({ ref_for: true }, moreFilledSoltProps), void 0, true)
                        ]),
                        key: "1"
                      } : void 0,
                      _ctx.$slots.menu ? {
                        name: "menu",
                        fn: withCtx(() => [
                          renderSlot(_ctx.$slots, "menu", mergeProps({ ref_for: true }, { item }), void 0, true)
                        ]),
                        key: "2"
                      } : void 0
                    ]), 1032, ["item", "items-style", "items-hover-style", "items-active-style", "active", "items-menu-opened-style", "prefix-icon", "show-tooltip", "tooltip-placement", "tooltip-offset", "suffix-icon", "active-key", "label-max-width", "menu", "show-built-in-menu", "menu-placement", "menu-offset", "menu-max-height", "menu-style", "menu-show-arrow", "menu-class-name", "menu-teleported", "onClick"]);
                  }), 128))
                ]),
                props.loadMoreLoading ? (openBlock(), createElementBlock("div", _hoisted_44, [
                  renderSlot(_ctx.$slots, "load-more", {}, () => [
                    createVNode(_component_el_icon, { class: "conversations-load-more-is-loading" }, {
                      default: withCtx(() => [
                        createVNode(unref(loading_default))
                      ]),
                      _: 1
                    }),
                    _cache[0] || (_cache[0] = createBaseVNode("span", null, "加载更多...", -1))
                  ], true)
                ])) : createCommentVNode("", true)
              ]),
              _: 3
            }, 512)
          ])
        ], 4),
        renderSlot(_ctx.$slots, "footer", {}, void 0, true),
        withDirectives(createVNode(_component_el_button, {
          class: "scroll-to-top-btn",
          circle: "",
          onClick: scrollToTop
        }, {
          default: withCtx(() => [
            createVNode(_component_el_icon, null, {
              default: withCtx(() => [
                createVNode(unref(top_default))
              ]),
              _: 1
            })
          ]),
          _: 1
        }, 512), [
          [vShow, unref(showScrollTop) && props.showToTopBtn]
        ])
      ], 4);
    };
  }
});
var Conversations = _export_sfc(_sfc_main13, [["__scopeId", "data-v-499173a8"]]);

// node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/es/EditorInput/index.js
import "/Users/Bone/Documents/Github/AI-RagFLow-Api/node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/index3.css";
function useContentEditable(targetRef) {
  const selectAll = () => {
    const element = targetRef.value;
    if (element) {
      const range = document.createRange();
      const sel = window.getSelection();
      range.selectNodeContents(element);
      sel == null ? void 0 : sel.removeAllRanges();
      sel == null ? void 0 : sel.addRange(range);
    }
  };
  const deselectAll = () => {
    const sel = window.getSelection();
    sel == null ? void 0 : sel.removeAllRanges();
  };
  const moveToStart = () => {
    const element = targetRef.value;
    if (element) {
      const range = document.createRange();
      const sel = window.getSelection();
      if (element.firstChild) {
        range.setStart(element.firstChild, 0);
        range.setEnd(element.firstChild, 0);
        sel == null ? void 0 : sel.removeAllRanges();
        sel == null ? void 0 : sel.addRange(range);
      }
    }
  };
  const moveToEnd = () => {
    var _a2;
    const element = targetRef.value;
    if (element) {
      const range = document.createRange();
      const sel = window.getSelection();
      const lastChild = element.lastChild;
      const length = lastChild ? ((_a2 = lastChild.textContent) == null ? void 0 : _a2.length) || 0 : 0;
      if (lastChild) {
        range.setStart(lastChild, length);
        range.setEnd(lastChild, length);
        sel == null ? void 0 : sel.removeAllRanges();
        sel == null ? void 0 : sel.addRange(range);
      }
    }
  };
  const focusElement = () => {
    const element = targetRef.value;
    element == null ? void 0 : element.focus();
  };
  const blurElement = () => {
    const element = targetRef.value;
    if (element) {
      element.blur();
      const sel = window.getSelection();
      sel == null ? void 0 : sel.removeAllRanges();
    }
  };
  return {
    selectAll,
    deselectAll,
    moveToStart,
    moveToEnd,
    focusElement,
    blurElement
  };
}
var _hoisted_16 = { class: "el-editor-input-wrapper" };
var _hoisted_25 = ["contenteditable"];
var _sfc_main14 = defineComponent({
  __name: "index",
  props: {
    modelValue: { default: "" },
    disabled: { type: Boolean, default: false },
    readOnly: { type: Boolean, default: false },
    placeholder: { default: "" },
    rows: { default: 1 },
    autosize: { type: [Boolean, Object], default: () => {
      return {
        minRows: 1,
        maxRows: 5
      };
    } },
    inputStyle: {},
    validateEvent: { type: Boolean },
    submitType: { default: "enter" }
  },
  emits: [
    "update:modelValue",
    "change",
    "compositionstart",
    "compositionend",
    "keydown",
    "handleBlur",
    "handleFocus"
  ],
  setup(__props, { expose: __expose, emit: __emit }) {
    const props = __props;
    const emits = __emit;
    const editableElement = ref(null);
    const isComposing = ref(false);
    const lineHeight = ref(20);
    const paddingTop = ref(0);
    const paddingBottom = ref(0);
    const paddingLeft = ref(0);
    const paddingRight = ref(0);
    const borderWidth = ref(0);
    const {
      selectAll,
      deselectAll,
      moveToStart,
      moveToEnd,
      focusElement,
      blurElement
    } = useContentEditable(editableElement);
    const showPlaceholder = computed(() => {
      return !isComposing.value && !props.modelValue && !!props.placeholder;
    });
    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
      });
    });
    onMounted(() => {
      if (editableElement.value) {
        const style = window.getComputedStyle(editableElement.value);
        lineHeight.value = Number.parseFloat(style.lineHeight) || 20;
        paddingTop.value = Number.parseFloat(style.paddingTop) || 0;
        paddingBottom.value = Number.parseFloat(style.paddingBottom) || 0;
        paddingLeft.value = Number.parseFloat(style.paddingLeft) || 0;
        paddingRight.value = Number.parseFloat(style.paddingRight) || 0;
        borderWidth.value = Number.parseFloat(style.borderTopWidth) + Number.parseFloat(style.borderBottomWidth) || 0;
        editableElement.value.textContent = props.modelValue;
        adjustHeight();
        observer.observe(editableElement.value, {
          childList: true,
          subtree: true
        });
      }
    });
    const mergedStyle = computed(() => {
      const minRows = typeof props.autosize === "object" ? props.autosize.minRows ?? props.rows : props.rows;
      return {
        minHeight: `${minRows * lineHeight.value + paddingTop.value + paddingBottom.value + borderWidth.value}px !important`,
        resize: "none",
        ...typeof props.inputStyle === "object" ? props.inputStyle : {}
      };
    });
    const mergedPlaceholderStyle = computed(() => {
      return {
        padding: `${paddingTop.value}px ${paddingRight.value}px ${paddingBottom.value}px ${paddingLeft.value}px`
      };
    });
    function adjustHeight() {
      if (!editableElement.value || !props.autosize)
        return;
      nextTick(() => {
        const el = editableElement.value;
        el.style.height = "auto";
        const scrollHeight = el.scrollHeight;
        if (typeof props.autosize === "object") {
          const maxRows = props.autosize.maxRows ?? Number.MAX_SAFE_INTEGER;
          const maxHeight = maxRows * lineHeight.value + paddingTop.value + paddingBottom.value;
          el.style.height = `${Math.min(scrollHeight, maxHeight)}px`;
        } else {
          el.style.height = `${scrollHeight}px`;
        }
      });
    }
    function handleInput() {
      const element = editableElement.value;
      if (!element)
        return;
      adjustHeight();
    }
    function handleCompositionStart(e) {
      isComposing.value = true;
      emits("compositionstart", e);
    }
    function handleCompositionEnd(e) {
      isComposing.value = false;
      handleInput();
      emits("compositionend", e);
    }
    function handleKeyDown(e) {
      emits("keydown", e);
      const element = editableElement.value;
      if (!element)
        return;
      const sel = window.getSelection();
      if (!sel || sel.rangeCount === 0)
        return;
      const range = sel.getRangeAt(0);
      range.startContainer;
    }
    watch(() => props.modelValue, (newVal) => {
      if (!editableElement.value)
        return;
    });
    function focus(e) {
      emits("handleFocus", e);
      focusElement();
    }
    function blur(e) {
      emits("handleBlur", e);
      blurElement();
    }
    function select() {
      if (editableElement.value) {
        selectAll();
      }
    }
    function clear() {
      if (editableElement.value) {
        deselectAll();
      }
    }
    __expose({
      focus,
      blur,
      select,
      clear,
      selectAll,
      moveToStart,
      moveToEnd,
      editableElement
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", _hoisted_16, [
        createBaseVNode("div", {
          ref_key: "editableElement",
          ref: editableElement,
          contenteditable: !_ctx.disabled && !_ctx.readOnly,
          class: normalizeClass(["el-editor-input el-textarea__inner", { "is-disabled": _ctx.disabled, "is-readonly": _ctx.readOnly }]),
          style: normalizeStyle(unref(mergedStyle)),
          onInput: handleInput,
          onBlur: blur,
          onFocus: focus,
          onKeydown: withModifiers(handleKeyDown, ["stop"]),
          onCompositionstart: handleCompositionStart,
          onCompositionend: handleCompositionEnd
        }, null, 46, _hoisted_25),
        _ctx.placeholder ? withDirectives((openBlock(), createElementBlock("div", {
          key: 0,
          class: "el-editor-input-placeholder",
          style: normalizeStyle(unref(mergedPlaceholderStyle))
        }, toDisplayString(_ctx.placeholder), 5)), [
          [vShow, unref(showPlaceholder)]
        ]) : createCommentVNode("", true)
      ]);
    };
  }
});
var EditorInput = _export_sfc(_sfc_main14, [["__scopeId", "data-v-0907e17f"]]);

// node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/es/EditorSender/index.js
import "/Users/Bone/Documents/Github/AI-RagFLow-Api/node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/index2.css";
import "/Users/Bone/Documents/Github/AI-RagFLow-Api/node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/el-popover.css";
import "/Users/Bone/Documents/Github/AI-RagFLow-Api/node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/el-popper.css";

// node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/index-B6DhhmTr.js
import "/Users/Bone/Documents/Github/AI-RagFLow-Api/node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/index10.css";
var _hoisted_1$62 = { class: "el-send-button" };
var _sfc_main$64 = defineComponent({
  __name: "index",
  emits: ["clear"],
  setup(__props, { emit: __emit }) {
    const emit = __emit;
    return (_ctx, _cache) => {
      const _component_el_icon = ElIcon;
      const _component_el_button = ElButton;
      return openBlock(), createElementBlock("div", _hoisted_1$62, [
        createVNode(_component_el_button, {
          circle: "",
          onClick: _cache[0] || (_cache[0] = ($event) => emit("clear"))
        }, {
          default: withCtx(() => [
            createVNode(_component_el_icon, null, {
              default: withCtx(() => [
                createVNode(unref(brush_default))
              ]),
              _: 1
            })
          ]),
          _: 1
        })
      ]);
    };
  }
});
var ClearButton = _export_sfc(_sfc_main$64, [["__scopeId", "data-v-2446a1e9"]]);
var _sfc_main$54 = {};
var _hoisted_1$52 = {
  viewBox: "0 0 1000 1000",
  xmlns: "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink"
};
function _sfc_render6(_ctx, _cache) {
  return openBlock(), createElementBlock("svg", _hoisted_1$52, _cache[0] || (_cache[0] = [
    createBaseVNode("title", null, "Loading", -1),
    createBaseVNode("rect", {
      fill: "currentColor",
      height: "250",
      rx: "24",
      ry: "24",
      width: "250",
      x: "375",
      y: "375"
    }, null, -1),
    createBaseVNode("circle", {
      cx: "500",
      cy: "500",
      fill: "none",
      r: "450",
      stroke: "currentColor",
      "stroke-width": "100",
      opacity: "0.45"
    }, null, -1),
    createBaseVNode("circle", {
      cx: "500",
      cy: "500",
      fill: "none",
      r: "450",
      stroke: "currentColor",
      "stroke-width": "100",
      "stroke-dasharray": "600 9999999"
    }, [
      createBaseVNode("animateTransform", {
        attributeName: "transform",
        dur: "1s",
        from: "0 500 500",
        repeatCount: "indefinite",
        to: "360 500 500",
        type: "rotate"
      })
    ], -1)
  ]));
}
var loading$1 = _export_sfc(_sfc_main$54, [["render", _sfc_render6]]);
var _hoisted_1$42 = { class: "el-send-button" };
var _sfc_main$45 = defineComponent({
  __name: "index",
  emits: ["cancel"],
  setup(__props, { emit: __emit }) {
    const emits = __emit;
    return (_ctx, _cache) => {
      const _component_el_button = ElButton;
      return openBlock(), createElementBlock("div", _hoisted_1$42, [
        createVNode(_component_el_button, {
          circle: "",
          onClick: _cache[0] || (_cache[0] = ($event) => emits("cancel"))
        }, {
          default: withCtx(() => [
            createVNode(loading$1, { class: "loading-svg" })
          ]),
          _: 1
        })
      ]);
    };
  }
});
var LoadingButton = _export_sfc(_sfc_main$45, [["__scopeId", "data-v-b97dbfd1"]]);
var _hoisted_1$32 = { class: "el-send-button" };
var _sfc_main$35 = defineComponent({
  __name: "index",
  props: {
    disabled: {
      type: Boolean,
      default: false
    }
  },
  emits: ["submit"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emits = __emit;
    return (_ctx, _cache) => {
      const _component_el_icon = ElIcon;
      const _component_el_button = ElButton;
      return openBlock(), createElementBlock("div", _hoisted_1$32, [
        createVNode(_component_el_button, {
          circle: "",
          disabled: props.disabled,
          onClick: _cache[0] || (_cache[0] = ($event) => emits("submit"))
        }, {
          default: withCtx(() => [
            createVNode(_component_el_icon, null, {
              default: withCtx(() => [
                createVNode(unref(top_default))
              ]),
              _: 1
            })
          ]),
          _: 1
        }, 8, ["disabled"])
      ]);
    };
  }
});
var _hoisted_1$22 = { class: "el-send-button" };
var _sfc_main$26 = defineComponent({
  __name: "index",
  setup(__props) {
    return (_ctx, _cache) => {
      const _component_el_icon = ElIcon;
      const _component_el_button = ElButton;
      return openBlock(), createElementBlock("div", _hoisted_1$22, [
        createVNode(_component_el_button, { circle: "" }, {
          default: withCtx(() => [
            createVNode(_component_el_icon, null, {
              default: withCtx(() => [
                createVNode(unref(microphone_default))
              ]),
              _: 1
            })
          ]),
          _: 1
        })
      ]);
    };
  }
});
var _hoisted_1$13 = ["viewBox"];
var _hoisted_26 = ["x", "y"];
var _hoisted_35 = ["values", "dur", "begin"];
var _hoisted_45 = ["values", "dur", "begin"];
var SIZE = 1e3;
var COUNT = 4;
var RECT_WIDTH = 140;
var RECT_HEIGHT_MIN = 250;
var RECT_HEIGHT_MAX = 500;
var DURATION = 0.8;
var _sfc_main$111 = defineComponent({
  __name: "loading",
  props: {
    className: { default: "" }
  },
  setup(__props) {
    const RECT_RADIUS = RECT_WIDTH / 2;
    const rects = computed(() => {
      const dest = (SIZE - RECT_WIDTH * COUNT) / (COUNT - 1);
      return Array.from({ length: COUNT }).map((_, index) => {
        const x = index * (dest + RECT_WIDTH);
        const yMin = SIZE / 2 - RECT_HEIGHT_MIN / 2;
        const yMax = SIZE / 2 - RECT_HEIGHT_MAX / 2;
        return { x, yMin, yMax };
      });
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("svg", {
        class: normalizeClass(_ctx.className),
        color: "currentColor",
        viewBox: `0 0 ${SIZE} ${SIZE}`,
        xmlns: "http://www.w3.org/2000/svg",
        "xmlns:xlink": "http://www.w3.org/1999/xlink"
      }, [
        _cache[0] || (_cache[0] = createBaseVNode("title", null, "Speech Recording", -1)),
        (openBlock(true), createElementBlock(Fragment, null, renderList(rects.value, (item, index) => {
          return openBlock(), createElementBlock("rect", {
            key: index,
            fill: "currentColor",
            rx: RECT_RADIUS,
            ry: RECT_RADIUS,
            height: RECT_HEIGHT_MIN,
            width: RECT_WIDTH,
            x: item.x,
            y: item.yMin
          }, [
            createBaseVNode("animate", {
              attributeName: "height",
              values: `${RECT_HEIGHT_MIN}; ${RECT_HEIGHT_MAX}; ${RECT_HEIGHT_MIN}`,
              keyTimes: "0; 0.5; 1",
              dur: `${DURATION}s`,
              begin: `${DURATION / COUNT * index}s`,
              repeatCount: "indefinite"
            }, null, 8, _hoisted_35),
            createBaseVNode("animate", {
              attributeName: "y",
              values: `${item.yMin}; ${item.yMax}; ${item.yMin}`,
              keyTimes: "0; 0.5; 1",
              dur: `${DURATION}s`,
              begin: `${DURATION / COUNT * index}s`,
              repeatCount: "indefinite"
            }, null, 8, _hoisted_45)
          ], 8, _hoisted_26);
        }), 128))
      ], 10, _hoisted_1$13);
    };
  }
});
var loading = _export_sfc(_sfc_main$111, [["__scopeId", "data-v-e2515e69"]]);
var _hoisted_17 = { class: "el-send-button" };
var _sfc_main15 = defineComponent({
  __name: "index",
  setup(__props) {
    return (_ctx, _cache) => {
      const _component_el_button = ElButton;
      return openBlock(), createElementBlock("div", _hoisted_17, [
        createVNode(_component_el_button, { circle: "" }, {
          default: withCtx(() => [
            createVNode(loading, { class: "loading-svg" })
          ]),
          _: 1
        })
      ]);
    };
  }
});
var SpeechLoadingButton = _export_sfc(_sfc_main15, [["__scopeId", "data-v-cfdf7693"]]);

// node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/index-D9zaScNv.js
var popoverProps = buildProps({
  trigger: useTooltipTriggerProps.trigger,
  triggerKeys: useTooltipTriggerProps.triggerKeys,
  placement: dropdownProps.placement,
  disabled: useTooltipTriggerProps.disabled,
  visible: useTooltipContentProps.visible,
  transition: useTooltipContentProps.transition,
  popperOptions: dropdownProps.popperOptions,
  tabindex: dropdownProps.tabindex,
  content: useTooltipContentProps.content,
  popperStyle: useTooltipContentProps.popperStyle,
  popperClass: useTooltipContentProps.popperClass,
  enterable: {
    ...useTooltipContentProps.enterable,
    default: true
  },
  effect: {
    ...useTooltipContentProps.effect,
    default: "light"
  },
  teleported: useTooltipContentProps.teleported,
  title: String,
  width: {
    type: [String, Number],
    default: 150
  },
  offset: {
    type: Number,
    default: void 0
  },
  showAfter: {
    type: Number,
    default: 0
  },
  hideAfter: {
    type: Number,
    default: 200
  },
  autoClose: {
    type: Number,
    default: 0
  },
  showArrow: {
    type: Boolean,
    default: true
  },
  persistent: {
    type: Boolean,
    default: true
  },
  "onUpdate:visible": {
    type: Function
  }
});
var popoverEmits = {
  "update:visible": (value) => isBoolean(value),
  "before-enter": () => true,
  "before-leave": () => true,
  "after-enter": () => true,
  "after-leave": () => true
};
var updateEventKeyRaw = `onUpdate:visible`;
var __default__9 = defineComponent({
  name: "ElPopover"
});
var _sfc_main16 = defineComponent({
  ...__default__9,
  props: popoverProps,
  emits: popoverEmits,
  setup(__props, { expose, emit }) {
    const props = __props;
    const onUpdateVisible = computed(() => {
      return props[updateEventKeyRaw];
    });
    const ns = useNamespace("popover");
    const tooltipRef = ref();
    const popperRef = computed(() => {
      var _a2;
      return (_a2 = unref(tooltipRef)) == null ? void 0 : _a2.popperRef;
    });
    const style = computed(() => {
      return [
        {
          width: addUnit(props.width)
        },
        props.popperStyle
      ];
    });
    const kls = computed(() => {
      return [ns.b(), props.popperClass, { [ns.m("plain")]: !!props.content }];
    });
    const gpuAcceleration = computed(() => {
      return props.transition === `${ns.namespace.value}-fade-in-linear`;
    });
    const hide = () => {
      var _a2;
      (_a2 = tooltipRef.value) == null ? void 0 : _a2.hide();
    };
    const beforeEnter = () => {
      emit("before-enter");
    };
    const beforeLeave = () => {
      emit("before-leave");
    };
    const afterEnter = () => {
      emit("after-enter");
    };
    const afterLeave = () => {
      emit("update:visible", false);
      emit("after-leave");
    };
    expose({
      popperRef,
      hide
    });
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(ElTooltip), mergeProps({
        ref_key: "tooltipRef",
        ref: tooltipRef
      }, _ctx.$attrs, {
        trigger: _ctx.trigger,
        "trigger-keys": _ctx.triggerKeys,
        placement: _ctx.placement,
        disabled: _ctx.disabled,
        visible: _ctx.visible,
        transition: _ctx.transition,
        "popper-options": _ctx.popperOptions,
        tabindex: _ctx.tabindex,
        content: _ctx.content,
        offset: _ctx.offset,
        "show-after": _ctx.showAfter,
        "hide-after": _ctx.hideAfter,
        "auto-close": _ctx.autoClose,
        "show-arrow": _ctx.showArrow,
        "aria-label": _ctx.title,
        effect: _ctx.effect,
        enterable: _ctx.enterable,
        "popper-class": unref(kls),
        "popper-style": unref(style),
        teleported: _ctx.teleported,
        persistent: _ctx.persistent,
        "gpu-acceleration": unref(gpuAcceleration),
        "onUpdate:visible": unref(onUpdateVisible),
        onBeforeShow: beforeEnter,
        onBeforeHide: beforeLeave,
        onShow: afterEnter,
        onHide: afterLeave
      }), {
        content: withCtx(() => [
          _ctx.title ? (openBlock(), createElementBlock("div", {
            key: 0,
            class: normalizeClass(unref(ns).e("title")),
            role: "title"
          }, toDisplayString(_ctx.title), 3)) : createCommentVNode("v-if", true),
          renderSlot(_ctx.$slots, "default", {}, () => [
            createTextVNode(toDisplayString(_ctx.content), 1)
          ])
        ]),
        default: withCtx(() => [
          _ctx.$slots.reference ? renderSlot(_ctx.$slots, "reference", { key: 0 }) : createCommentVNode("v-if", true)
        ]),
        _: 3
      }, 16, ["trigger", "trigger-keys", "placement", "disabled", "visible", "transition", "popper-options", "tabindex", "content", "offset", "show-after", "hide-after", "auto-close", "show-arrow", "aria-label", "effect", "enterable", "popper-class", "popper-style", "teleported", "persistent", "gpu-acceleration", "onUpdate:visible"]);
    };
  }
});
var Popover = _export_sfc2(_sfc_main16, [["__file", "popover.vue"]]);
var attachEvents = (el, binding) => {
  const popperComponent = binding.arg || binding.value;
  const popover = popperComponent == null ? void 0 : popperComponent.popperRef;
  if (popover) {
    popover.triggerRef = el;
  }
};
var PopoverDirective = {
  mounted(el, binding) {
    attachEvents(el, binding);
  },
  updated(el, binding) {
    attachEvents(el, binding);
  }
};
var VPopover = "popover";
var ElPopoverDirective = withInstallDirective(PopoverDirective, VPopover);
var ElPopover = withInstall(Popover, {
  directive: ElPopoverDirective
});

// node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/es/EditorSender/index.js
var _hoisted_18 = {
  key: 0,
  class: "el-sender-header-wrap"
};
var _hoisted_27 = {
  key: 0,
  class: "el-sender-header"
};
var _hoisted_36 = {
  key: 0,
  class: "el-sender-prefix"
};
var _hoisted_46 = {
  key: 1,
  class: "el-sender-action-list"
};
var _hoisted_55 = { class: "el-sender-action-list-presets" };
var _hoisted_64 = {
  key: 2,
  class: "el-sender-updown-wrap"
};
var _hoisted_73 = {
  key: 0,
  class: "el-sender-prefix"
};
var _hoisted_82 = { class: "el-sender-action-list" };
var _hoisted_9 = { class: "el-sender-action-list-presets" };
var _hoisted_10 = {
  key: 0,
  class: "el-sender-footer"
};
var _sfc_main17 = defineComponent({
  __name: "index",
  props: {
    modelValue: { default: "" },
    placeholder: { default: "请输入内容" },
    autoSize: { default: () => ({
      minRows: 1,
      maxRows: 6
    }) },
    readOnly: { type: Boolean },
    disabled: { type: Boolean },
    loading: { type: Boolean },
    clearable: { type: Boolean },
    allowSpeech: { type: Boolean },
    submitType: { default: "enter" },
    headerAnimationTimer: { default: 300 },
    inputWidth: { default: "100%" },
    variant: { default: "default" },
    showUpdown: { type: Boolean, default: true },
    inputStyle: { default: () => {
    } },
    triggerStrings: { default: () => [] },
    triggerPopoverVisible: { type: Boolean, default: false },
    triggerPopoverWidth: { default: "fit-content" },
    triggerPopoverLeft: { default: "0px" },
    triggerPopoverOffset: { default: 8 },
    triggerPopoverPlacement: { default: "top-start" }
  },
  emits: [
    "update:modelValue",
    "update:triggerPopoverVisible",
    "submit",
    "cancel",
    "recordingChange",
    "trigger"
  ],
  setup(__props, { expose: __expose, emit: __emit }) {
    const props = __props;
    const emits = __emit;
    const slots = useSlots();
    const instance = getCurrentInstance();
    const hasOnRecordingChangeListener = computed(() => {
      var _a2;
      return !!((_a2 = instance == null ? void 0 : instance.vnode.props) == null ? void 0 : _a2.onRecordingChange);
    });
    const senderRef = ref();
    const inputRef = ref();
    const contentRef = ref();
    const internalValue = computed({
      get() {
        return props.modelValue;
      },
      set(val) {
        if (props.readOnly || props.disabled)
          return;
        emits("update:modelValue", val);
      }
    });
    const isComposing = ref(false);
    const popoverRef = ref();
    const hasOnTriggerListener = computed(() => {
      var _a2;
      return !!((_a2 = instance == null ? void 0 : instance.vnode.props) == null ? void 0 : _a2.onTrigger);
    });
    const popoverVisible = computed({
      get() {
        return props.triggerPopoverVisible;
      },
      set(value) {
        if (props.readOnly || props.disabled)
          return;
        emits("update:triggerPopoverVisible", value);
      }
    });
    const triggerString = ref("");
    watch(
      () => internalValue.value,
      (newVal, oldVal) => {
        if (isComposing.value)
          return;
        const triggerStrings = props.triggerStrings || [];
        const validOldVal = typeof oldVal === "string" ? oldVal : "";
        const wasOldValTrigger = triggerStrings.includes(validOldVal);
        const isNewValTrigger = triggerStrings.includes(newVal);
        if (oldVal === "" && isNewValTrigger) {
          triggerString.value = newVal;
          if (hasOnTriggerListener.value) {
            emits("trigger", {
              oldValue: oldVal,
              // 关闭时返回之前触发的字符
              newValue: newVal,
              triggerString: newVal,
              isOpen: true
            });
            popoverVisible.value = true;
          } else {
            popoverVisible.value = true;
          }
        } else if (!isNewValTrigger && wasOldValTrigger) {
          if (hasOnTriggerListener.value) {
            emits("trigger", {
              oldValue: oldVal,
              // 关闭时返回之前触发的字符
              newValue: newVal,
              triggerString: void 0,
              isOpen: false
            });
            popoverVisible.value = false;
          } else {
            popoverVisible.value = false;
          }
        } else if (oldVal !== "" && isNewValTrigger && !wasOldValTrigger) {
          triggerString.value = newVal;
          if (hasOnTriggerListener.value) {
            emits("trigger", {
              oldValue: oldVal,
              // 关闭时返回之前触发的字符
              newValue: newVal,
              triggerString: newVal,
              isOpen: true
            });
            popoverVisible.value = true;
          } else {
            popoverVisible.value = true;
          }
        }
      },
      { deep: true, immediate: true }
    );
    function onContentMouseDown(e) {
      if (e.target !== senderRef.value.querySelector(`.el-textarea__inner`)) {
        e.preventDefault();
      }
      inputRef.value.focus();
    }
    const visiableHeader = ref(false);
    function openHeader() {
      if (!slots.header)
        return false;
      if (props.readOnly)
        return false;
      visiableHeader.value = true;
    }
    function closeHeader() {
      if (!slots.header)
        return;
      if (props.readOnly)
        return;
      visiableHeader.value = false;
    }
    const recognition = ref(null);
    const speechLoading = ref(false);
    function startRecognition() {
      if (props.readOnly)
        return;
      if (hasOnRecordingChangeListener.value) {
        speechLoading.value = true;
        emits("recordingChange", true);
        return;
      }
      if ("webkitSpeechRecognition" in window) {
        recognition.value = new webkitSpeechRecognition();
        recognition.value.continuous = true;
        recognition.value.interimResults = true;
        recognition.value.lang = "zh-CN";
        recognition.value.onresult = (event) => {
          let results = "";
          for (let i = 0; i <= event.resultIndex; i++) {
            results += event.results[i][0].transcript;
          }
          if (!props.readOnly) {
            internalValue.value = results;
          }
        };
        recognition.value.onstart = () => {
          speechLoading.value = true;
        };
        recognition.value.onend = () => {
          speechLoading.value = false;
        };
        recognition.value.onerror = (event) => {
          speechLoading.value = false;
        };
        recognition.value.start();
      }
    }
    function stopRecognition() {
      if (hasOnRecordingChangeListener.value) {
        speechLoading.value = false;
        emits("recordingChange", false);
        return;
      }
      if (recognition.value) {
        recognition.value.stop();
        speechLoading.value = false;
      }
    }
    function submit() {
      if (props.readOnly || props.loading || props.disabled || !internalValue.value)
        return;
      emits("submit", internalValue.value);
    }
    function cancel() {
      if (props.readOnly)
        return;
      emits("cancel", internalValue.value);
    }
    function clear() {
      if (props.readOnly)
        return;
      inputRef.value.clear();
      internalValue.value = "";
    }
    function blur() {
      if (props.readOnly) {
        return false;
      }
      inputRef.value.blur();
    }
    function focus(type = "all") {
      if (props.readOnly) {
        return false;
      }
      if (type === "all") {
        inputRef.value.select();
      } else if (type === "start") {
        inputRef.value.moveToStart();
      } else if (type === "end") {
        inputRef.value.moveToEnd();
      }
    }
    function handleCompositionStart() {
      isComposing.value = true;
    }
    function handleCompositionEnd() {
      isComposing.value = false;
    }
    __expose({
      openHeader,
      // 打开头部
      closeHeader,
      // 关闭头部
      clear,
      // 清空输入框
      blur,
      // 失去焦点
      focus,
      // 获取焦点
      // 按钮操作
      submit,
      cancel,
      startRecognition,
      stopRecognition
    });
    return (_ctx, _cache) => {
      const _component_el_popover = ElPopover;
      return openBlock(), createElementBlock("div", {
        class: "el-sender-wrap",
        style: normalizeStyle({
          "cursor": _ctx.disabled ? "not-allowed" : "default",
          "--el-sender-trigger-popover-width": props.triggerPopoverWidth,
          "--el-sender-trigger-popover-left": props.triggerPopoverLeft
        })
      }, [
        createBaseVNode("div", {
          ref_key: "senderRef",
          ref: senderRef,
          class: normalizeClass(["el-sender", {
            "el-sender-disabled": _ctx.disabled
          }]),
          style: normalizeStyle({
            "--el-padding-xs": "8px",
            "--el-padding-sm": "12px",
            "--el-padding": "16px",
            "--el-box-shadow-tertiary": "0 1px 2px 0 rgba(0, 0, 0, 0.03), 0 1px 6px -1px rgba(0, 0, 0, 0.02), 0 2px 4px 0 rgba(0, 0, 0, 0.02)",
            "--el-sender-input-input-font-size": "14px",
            "--el-sender-header-animation-duration": `${_ctx.headerAnimationTimer}ms`
          })
        }, [
          createVNode(Transition, { name: "slide" }, {
            default: withCtx(() => [
              unref(visiableHeader) ? (openBlock(), createElementBlock("div", _hoisted_18, [
                _ctx.$slots.header ? (openBlock(), createElementBlock("div", _hoisted_27, [
                  renderSlot(_ctx.$slots, "header", {}, void 0, true)
                ])) : createCommentVNode("", true)
              ])) : createCommentVNode("", true)
            ]),
            _: 3
          }),
          createBaseVNode("div", {
            ref_key: "contentRef",
            ref: contentRef,
            class: normalizeClass(["el-sender-content", { "content-variant-updown": props.variant === "updown" }]),
            onMousedown: onContentMouseDown
          }, [
            _ctx.$slots.prefix && props.variant === "default" ? (openBlock(), createElementBlock("div", _hoisted_36, [
              renderSlot(_ctx.$slots, "prefix", {}, void 0, true)
            ])) : createCommentVNode("", true),
            createVNode(EditorInput, {
              ref_key: "inputRef",
              ref: inputRef,
              modelValue: unref(internalValue),
              "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => isRef(internalValue) ? internalValue.value = $event : null),
              class: "el-sender-input",
              "input-style": {
                "resize": "none",
                "max-height": "176px",
                "max-width": _ctx.inputWidth
              },
              rows: 1,
              autosize: _ctx.autoSize,
              type: "textarea",
              "validate-event": false,
              placeholder: _ctx.placeholder,
              "read-only": _ctx.readOnly || _ctx.disabled,
              disabled: _ctx.disabled,
              "inpurt-style": props.inputStyle,
              "submit-type": props.submitType,
              onCompositionstart: handleCompositionStart,
              onCompositionend: handleCompositionEnd
            }, null, 8, ["modelValue", "input-style", "autosize", "placeholder", "read-only", "disabled", "inpurt-style", "submit-type"]),
            props.variant === "default" ? (openBlock(), createElementBlock("div", _hoisted_46, [
              renderSlot(_ctx.$slots, "action-list", {}, () => [
                createBaseVNode("div", _hoisted_55, [
                  !_ctx.loading ? (openBlock(), createBlock(unref(_sfc_main$35), {
                    key: 0,
                    disabled: !unref(internalValue),
                    onSubmit: submit
                  }, null, 8, ["disabled"])) : createCommentVNode("", true),
                  _ctx.loading ? (openBlock(), createBlock(unref(LoadingButton), {
                    key: 1,
                    onCancel: cancel
                  })) : createCommentVNode("", true),
                  !unref(speechLoading) && _ctx.allowSpeech ? (openBlock(), createBlock(unref(_sfc_main$26), {
                    key: 2,
                    onClick: startRecognition
                  })) : createCommentVNode("", true),
                  unref(speechLoading) && _ctx.allowSpeech ? (openBlock(), createBlock(unref(SpeechLoadingButton), {
                    key: 3,
                    onClick: stopRecognition
                  })) : createCommentVNode("", true),
                  _ctx.clearable ? (openBlock(), createBlock(unref(ClearButton), {
                    key: 4,
                    onClear: clear
                  })) : createCommentVNode("", true)
                ])
              ], true)
            ])) : createCommentVNode("", true),
            props.variant === "updown" && props.showUpdown ? (openBlock(), createElementBlock("div", _hoisted_64, [
              _ctx.$slots.prefix ? (openBlock(), createElementBlock("div", _hoisted_73, [
                renderSlot(_ctx.$slots, "prefix", {}, void 0, true)
              ])) : createCommentVNode("", true),
              createBaseVNode("div", _hoisted_82, [
                renderSlot(_ctx.$slots, "action-list", {}, () => [
                  createBaseVNode("div", _hoisted_9, [
                    !_ctx.loading ? (openBlock(), createBlock(unref(_sfc_main$35), {
                      key: 0,
                      disabled: !unref(internalValue),
                      onSubmit: submit
                    }, null, 8, ["disabled"])) : createCommentVNode("", true),
                    _ctx.loading ? (openBlock(), createBlock(unref(LoadingButton), {
                      key: 1,
                      onCancel: cancel
                    })) : createCommentVNode("", true),
                    !unref(speechLoading) && _ctx.allowSpeech ? (openBlock(), createBlock(unref(_sfc_main$26), {
                      key: 2,
                      onClick: startRecognition
                    })) : createCommentVNode("", true),
                    unref(speechLoading) && _ctx.allowSpeech ? (openBlock(), createBlock(unref(SpeechLoadingButton), {
                      key: 3,
                      onClick: stopRecognition
                    })) : createCommentVNode("", true),
                    _ctx.clearable ? (openBlock(), createBlock(unref(ClearButton), {
                      key: 4,
                      onClear: clear
                    })) : createCommentVNode("", true)
                  ])
                ], true)
              ])
            ])) : createCommentVNode("", true)
          ], 34),
          createVNode(Transition, { name: "slide" }, {
            default: withCtx(() => [
              _ctx.$slots.footer ? (openBlock(), createElementBlock("div", _hoisted_10, [
                renderSlot(_ctx.$slots, "footer", {}, void 0, true)
              ])) : createCommentVNode("", true)
            ]),
            _: 3
          })
        ], 6),
        createVNode(_component_el_popover, {
          ref_key: "popoverRef",
          ref: popoverRef,
          "virtual-ref": unref(senderRef),
          "virtual-triggering": "",
          visible: unref(popoverVisible),
          disabled: props.disabled,
          "show-arrow": false,
          placement: props.triggerPopoverPlacement,
          offset: props.triggerPopoverOffset,
          "popper-class": "el-sender-trigger-popover",
          teleported: false
        }, {
          default: withCtx(() => [
            renderSlot(_ctx.$slots, "trigger-popover", {
              triggerString: unref(triggerString),
              readonly: props.readOnly
            }, () => [
              createTextVNode(" 当前触发的字符为：" + toDisplayString(`${unref(triggerString)}`) + " 在这里定义的内容，但注意这里的回车事件将会被 输入框 覆盖 ", 1)
            ], true)
          ]),
          _: 3
        }, 8, ["virtual-ref", "visible", "disabled", "placement", "offset"])
      ], 4);
    };
  }
});
var EditorSender = _export_sfc(_sfc_main17, [["__scopeId", "data-v-8dbceee0"]]);

// node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/el-input-AN-kaimj.js
import "/Users/Bone/Documents/Github/AI-RagFLow-Api/node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/el-input.css";
var UPDATE_MODEL_EVENT = "update:modelValue";
var CHANGE_EVENT = "change";
var INPUT_EVENT = "input";

// node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/es/MentionSender/index.js
import "/Users/Bone/Documents/Github/AI-RagFLow-Api/node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/index12.css";
import "/Users/Bone/Documents/Github/AI-RagFLow-Api/node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/el-popper.css";

// node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/index-CCQp41bd.js
var isFirefox = () => isClient && /firefox/i.test(window.navigator.userAgent);
var hiddenTextarea = void 0;
var HIDDEN_STYLE = {
  height: "0",
  visibility: "hidden",
  overflow: isFirefox() ? "" : "hidden",
  position: "absolute",
  "z-index": "-1000",
  top: "0",
  right: "0"
};
var CONTEXT_STYLE = [
  "letter-spacing",
  "line-height",
  "padding-top",
  "padding-bottom",
  "font-family",
  "font-weight",
  "font-size",
  "text-rendering",
  "text-transform",
  "width",
  "text-indent",
  "padding-left",
  "padding-right",
  "border-width",
  "box-sizing"
];
function calculateNodeStyling(targetElement) {
  const style = window.getComputedStyle(targetElement);
  const boxSizing = style.getPropertyValue("box-sizing");
  const paddingSize = Number.parseFloat(style.getPropertyValue("padding-bottom")) + Number.parseFloat(style.getPropertyValue("padding-top"));
  const borderSize = Number.parseFloat(style.getPropertyValue("border-bottom-width")) + Number.parseFloat(style.getPropertyValue("border-top-width"));
  const contextStyle = CONTEXT_STYLE.map((name) => [
    name,
    style.getPropertyValue(name)
  ]);
  return { contextStyle, paddingSize, borderSize, boxSizing };
}
function calcTextareaHeight(targetElement, minRows = 1, maxRows) {
  var _a2;
  if (!hiddenTextarea) {
    hiddenTextarea = document.createElement("textarea");
    document.body.appendChild(hiddenTextarea);
  }
  const { paddingSize, borderSize, boxSizing, contextStyle } = calculateNodeStyling(targetElement);
  contextStyle.forEach(([key, value]) => hiddenTextarea == null ? void 0 : hiddenTextarea.style.setProperty(key, value));
  Object.entries(HIDDEN_STYLE).forEach(([key, value]) => hiddenTextarea == null ? void 0 : hiddenTextarea.style.setProperty(key, value, "important"));
  hiddenTextarea.value = targetElement.value || targetElement.placeholder || "";
  let height = hiddenTextarea.scrollHeight;
  const result = {};
  if (boxSizing === "border-box") {
    height = height + borderSize;
  } else if (boxSizing === "content-box") {
    height = height - paddingSize;
  }
  hiddenTextarea.value = "";
  const singleRowHeight = hiddenTextarea.scrollHeight - paddingSize;
  if (isNumber(minRows)) {
    let minHeight = singleRowHeight * minRows;
    if (boxSizing === "border-box") {
      minHeight = minHeight + paddingSize + borderSize;
    }
    height = Math.max(minHeight, height);
    result.minHeight = `${minHeight}px`;
  }
  if (isNumber(maxRows)) {
    let maxHeight = singleRowHeight * maxRows;
    if (boxSizing === "border-box") {
      maxHeight = maxHeight + paddingSize + borderSize;
    }
    height = Math.min(maxHeight, height);
  }
  result.height = `${height}px`;
  (_a2 = hiddenTextarea.parentNode) == null ? void 0 : _a2.removeChild(hiddenTextarea);
  hiddenTextarea = void 0;
  return result;
}
var inputProps = buildProps({
  id: {
    type: String,
    default: void 0
  },
  size: useSizeProp,
  disabled: Boolean,
  modelValue: {
    type: definePropType([
      String,
      Number,
      Object
    ]),
    default: ""
  },
  maxlength: {
    type: [String, Number]
  },
  minlength: {
    type: [String, Number]
  },
  type: {
    type: String,
    default: "text"
  },
  resize: {
    type: String,
    values: ["none", "both", "horizontal", "vertical"]
  },
  autosize: {
    type: definePropType([Boolean, Object]),
    default: false
  },
  autocomplete: {
    type: String,
    default: "off"
  },
  formatter: {
    type: Function
  },
  parser: {
    type: Function
  },
  placeholder: {
    type: String
  },
  form: {
    type: String
  },
  readonly: Boolean,
  clearable: Boolean,
  showPassword: Boolean,
  showWordLimit: Boolean,
  suffixIcon: {
    type: iconPropType
  },
  prefixIcon: {
    type: iconPropType
  },
  containerRole: {
    type: String,
    default: void 0
  },
  tabindex: {
    type: [String, Number],
    default: 0
  },
  validateEvent: {
    type: Boolean,
    default: true
  },
  inputStyle: {
    type: definePropType([Object, Array, String]),
    default: () => mutable({})
  },
  autofocus: Boolean,
  rows: {
    type: Number,
    default: 2
  },
  ...useAriaProps(["ariaLabel"])
});
var inputEmits = {
  [UPDATE_MODEL_EVENT]: (value) => isString$1(value),
  input: (value) => isString$1(value),
  change: (value) => isString$1(value),
  focus: (evt) => evt instanceof FocusEvent,
  blur: (evt) => evt instanceof FocusEvent,
  clear: () => true,
  mouseleave: (evt) => evt instanceof MouseEvent,
  mouseenter: (evt) => evt instanceof MouseEvent,
  keydown: (evt) => evt instanceof Event,
  compositionstart: (evt) => evt instanceof CompositionEvent,
  compositionupdate: (evt) => evt instanceof CompositionEvent,
  compositionend: (evt) => evt instanceof CompositionEvent
};
function useFocusController(target, {
  beforeFocus,
  afterFocus,
  beforeBlur,
  afterBlur
} = {}) {
  const instance = getCurrentInstance();
  const { emit } = instance;
  const wrapperRef = shallowRef();
  const disabled = useProp("disabled");
  const isFocused = ref(false);
  const handleFocus = (event) => {
    const cancelFocus = isFunction$1(beforeFocus) ? beforeFocus(event) : false;
    if (cancelFocus || isFocused.value)
      return;
    isFocused.value = true;
    emit("focus", event);
    afterFocus == null ? void 0 : afterFocus();
  };
  const handleBlur = (event) => {
    var _a2;
    const cancelBlur = isFunction$1(beforeBlur) ? beforeBlur(event) : false;
    if (cancelBlur || event.relatedTarget && ((_a2 = wrapperRef.value) == null ? void 0 : _a2.contains(event.relatedTarget)))
      return;
    isFocused.value = false;
    emit("blur", event);
    afterBlur == null ? void 0 : afterBlur();
  };
  const handleClick = () => {
    var _a2, _b;
    if (((_a2 = wrapperRef.value) == null ? void 0 : _a2.contains(document.activeElement)) && wrapperRef.value !== document.activeElement || disabled.value)
      return;
    (_b = target.value) == null ? void 0 : _b.focus();
  };
  watch([wrapperRef, disabled], ([el, disabled2]) => {
    if (!el)
      return;
    if (disabled2) {
      el.removeAttribute("tabindex");
    } else {
      el.setAttribute("tabindex", "-1");
    }
  });
  useEventListener(wrapperRef, "focus", handleFocus, true);
  useEventListener(wrapperRef, "blur", handleBlur, true);
  useEventListener(wrapperRef, "click", handleClick, true);
  if (false) {
    onMounted(() => {
      const targetEl = isElement(target.value) ? target.value : document.querySelector("input,textarea");
      if (targetEl) {
        useEventListener(targetEl, "focus", handleFocus, true);
        useEventListener(targetEl, "blur", handleBlur, true);
      }
    });
  }
  return {
    isFocused,
    wrapperRef,
    handleFocus,
    handleBlur
  };
}
var isKorean = (text) => /([\uAC00-\uD7AF\u3130-\u318F])+/gi.test(text);
function useComposition({
  afterComposition,
  emit
}) {
  const isComposing = ref(false);
  const handleCompositionStart = (event) => {
    emit == null ? void 0 : emit("compositionstart", event);
    isComposing.value = true;
  };
  const handleCompositionUpdate = (event) => {
    var _a2;
    emit == null ? void 0 : emit("compositionupdate", event);
    const text = (_a2 = event.target) == null ? void 0 : _a2.value;
    const lastCharacter = text[text.length - 1] || "";
    isComposing.value = !isKorean(lastCharacter);
  };
  const handleCompositionEnd = (event) => {
    emit == null ? void 0 : emit("compositionend", event);
    if (isComposing.value) {
      isComposing.value = false;
      nextTick(() => afterComposition(event));
    }
  };
  const handleComposition = (event) => {
    event.type === "compositionend" ? handleCompositionEnd(event) : handleCompositionUpdate(event);
  };
  return {
    isComposing,
    handleComposition,
    handleCompositionStart,
    handleCompositionUpdate,
    handleCompositionEnd
  };
}
function useCursor(input) {
  let selectionInfo;
  function recordCursor() {
    if (input.value == void 0)
      return;
    const { selectionStart, selectionEnd, value } = input.value;
    if (selectionStart == null || selectionEnd == null)
      return;
    const beforeTxt = value.slice(0, Math.max(0, selectionStart));
    const afterTxt = value.slice(Math.max(0, selectionEnd));
    selectionInfo = {
      selectionStart,
      selectionEnd,
      value,
      beforeTxt,
      afterTxt
    };
  }
  function setCursor() {
    if (input.value == void 0 || selectionInfo == void 0)
      return;
    const { value } = input.value;
    const { beforeTxt, afterTxt, selectionStart } = selectionInfo;
    if (beforeTxt == void 0 || afterTxt == void 0 || selectionStart == void 0)
      return;
    let startPos = value.length;
    if (value.endsWith(afterTxt)) {
      startPos = value.length - afterTxt.length;
    } else if (value.startsWith(beforeTxt)) {
      startPos = beforeTxt.length;
    } else {
      const beforeLastChar = beforeTxt[selectionStart - 1];
      const newIndex = value.indexOf(beforeLastChar, selectionStart - 1);
      if (newIndex !== -1) {
        startPos = newIndex + 1;
      }
    }
    input.value.setSelectionRange(startPos, startPos);
  }
  return [recordCursor, setCursor];
}
var COMPONENT_NAME3 = "ElInput";
var __default__10 = defineComponent({
  name: COMPONENT_NAME3,
  inheritAttrs: false
});
var _sfc_main18 = defineComponent({
  ...__default__10,
  props: inputProps,
  emits: inputEmits,
  setup(__props, { expose, emit }) {
    const props = __props;
    const rawAttrs = useAttrs();
    const attrs = useAttrs2();
    const slots = useSlots();
    const containerKls = computed(() => [
      props.type === "textarea" ? nsTextarea.b() : nsInput.b(),
      nsInput.m(inputSize.value),
      nsInput.is("disabled", inputDisabled.value),
      nsInput.is("exceed", inputExceed.value),
      {
        [nsInput.b("group")]: slots.prepend || slots.append,
        [nsInput.m("prefix")]: slots.prefix || props.prefixIcon,
        [nsInput.m("suffix")]: slots.suffix || props.suffixIcon || props.clearable || props.showPassword,
        [nsInput.bm("suffix", "password-clear")]: showClear.value && showPwdVisible.value,
        [nsInput.b("hidden")]: props.type === "hidden"
      },
      rawAttrs.class
    ]);
    const wrapperKls = computed(() => [
      nsInput.e("wrapper"),
      nsInput.is("focus", isFocused.value)
    ]);
    const { form: elForm, formItem: elFormItem } = useFormItem();
    const { inputId } = useFormItemInputId(props, {
      formItemContext: elFormItem
    });
    const inputSize = useFormSize();
    const inputDisabled = useFormDisabled();
    const nsInput = useNamespace("input");
    const nsTextarea = useNamespace("textarea");
    const input = shallowRef();
    const textarea = shallowRef();
    const hovering = ref(false);
    const passwordVisible = ref(false);
    const countStyle = ref();
    const textareaCalcStyle = shallowRef(props.inputStyle);
    const _ref = computed(() => input.value || textarea.value);
    const { wrapperRef, isFocused, handleFocus, handleBlur } = useFocusController(_ref, {
      beforeFocus() {
        return inputDisabled.value;
      },
      afterBlur() {
        var _a2;
        if (props.validateEvent) {
          (_a2 = elFormItem == null ? void 0 : elFormItem.validate) == null ? void 0 : _a2.call(elFormItem, "blur").catch((err) => debugWarn(err));
        }
      }
    });
    const needStatusIcon = computed(() => {
      var _a2;
      return (_a2 = elForm == null ? void 0 : elForm.statusIcon) != null ? _a2 : false;
    });
    const validateState = computed(() => (elFormItem == null ? void 0 : elFormItem.validateState) || "");
    const validateIcon = computed(() => validateState.value && ValidateComponentsMap[validateState.value]);
    const passwordIcon = computed(() => passwordVisible.value ? view_default : hide_default);
    const containerStyle = computed(() => [
      rawAttrs.style
    ]);
    const textareaStyle = computed(() => [
      props.inputStyle,
      textareaCalcStyle.value,
      { resize: props.resize }
    ]);
    const nativeInputValue = computed(() => isNil(props.modelValue) ? "" : String(props.modelValue));
    const showClear = computed(() => props.clearable && !inputDisabled.value && !props.readonly && !!nativeInputValue.value && (isFocused.value || hovering.value));
    const showPwdVisible = computed(() => props.showPassword && !inputDisabled.value && !!nativeInputValue.value && (!!nativeInputValue.value || isFocused.value));
    const isWordLimitVisible = computed(() => props.showWordLimit && !!props.maxlength && (props.type === "text" || props.type === "textarea") && !inputDisabled.value && !props.readonly && !props.showPassword);
    const textLength = computed(() => nativeInputValue.value.length);
    const inputExceed = computed(() => !!isWordLimitVisible.value && textLength.value > Number(props.maxlength));
    const suffixVisible = computed(() => !!slots.suffix || !!props.suffixIcon || showClear.value || props.showPassword || isWordLimitVisible.value || !!validateState.value && needStatusIcon.value);
    const [recordCursor, setCursor] = useCursor(input);
    useResizeObserver(textarea, (entries) => {
      onceInitSizeTextarea();
      if (!isWordLimitVisible.value || props.resize !== "both")
        return;
      const entry = entries[0];
      const { width } = entry.contentRect;
      countStyle.value = {
        right: `calc(100% - ${width + 15 + 6}px)`
      };
    });
    const resizeTextarea = () => {
      const { type, autosize } = props;
      if (!isClient || type !== "textarea" || !textarea.value)
        return;
      if (autosize) {
        const minRows = isObject2(autosize) ? autosize.minRows : void 0;
        const maxRows = isObject2(autosize) ? autosize.maxRows : void 0;
        const textareaStyle2 = calcTextareaHeight(textarea.value, minRows, maxRows);
        textareaCalcStyle.value = {
          overflowY: "hidden",
          ...textareaStyle2
        };
        nextTick(() => {
          textarea.value.offsetHeight;
          textareaCalcStyle.value = textareaStyle2;
        });
      } else {
        textareaCalcStyle.value = {
          minHeight: calcTextareaHeight(textarea.value).minHeight
        };
      }
    };
    const createOnceInitResize = (resizeTextarea2) => {
      let isInit = false;
      return () => {
        var _a2;
        if (isInit || !props.autosize)
          return;
        const isElHidden = ((_a2 = textarea.value) == null ? void 0 : _a2.offsetParent) === null;
        if (!isElHidden) {
          resizeTextarea2();
          isInit = true;
        }
      };
    };
    const onceInitSizeTextarea = createOnceInitResize(resizeTextarea);
    const setNativeInputValue = () => {
      const input2 = _ref.value;
      const formatterValue = props.formatter ? props.formatter(nativeInputValue.value) : nativeInputValue.value;
      if (!input2 || input2.value === formatterValue)
        return;
      input2.value = formatterValue;
    };
    const handleInput = async (event) => {
      recordCursor();
      let { value } = event.target;
      if (props.formatter && props.parser) {
        value = props.parser(value);
      }
      if (isComposing.value)
        return;
      if (value === nativeInputValue.value) {
        setNativeInputValue();
        return;
      }
      emit(UPDATE_MODEL_EVENT, value);
      emit(INPUT_EVENT, value);
      await nextTick();
      setNativeInputValue();
      setCursor();
    };
    const handleChange = (event) => {
      let { value } = event.target;
      if (props.formatter && props.parser) {
        value = props.parser(value);
      }
      emit(CHANGE_EVENT, value);
    };
    const {
      isComposing,
      handleCompositionStart,
      handleCompositionUpdate,
      handleCompositionEnd
    } = useComposition({ emit, afterComposition: handleInput });
    const handlePasswordVisible = () => {
      recordCursor();
      passwordVisible.value = !passwordVisible.value;
      setTimeout(setCursor);
    };
    const focus = () => {
      var _a2;
      return (_a2 = _ref.value) == null ? void 0 : _a2.focus();
    };
    const blur = () => {
      var _a2;
      return (_a2 = _ref.value) == null ? void 0 : _a2.blur();
    };
    const handleMouseLeave = (evt) => {
      hovering.value = false;
      emit("mouseleave", evt);
    };
    const handleMouseEnter = (evt) => {
      hovering.value = true;
      emit("mouseenter", evt);
    };
    const handleKeydown = (evt) => {
      emit("keydown", evt);
    };
    const select = () => {
      var _a2;
      (_a2 = _ref.value) == null ? void 0 : _a2.select();
    };
    const clear = () => {
      emit(UPDATE_MODEL_EVENT, "");
      emit(CHANGE_EVENT, "");
      emit("clear");
      emit(INPUT_EVENT, "");
    };
    watch(() => props.modelValue, () => {
      var _a2;
      nextTick(() => resizeTextarea());
      if (props.validateEvent) {
        (_a2 = elFormItem == null ? void 0 : elFormItem.validate) == null ? void 0 : _a2.call(elFormItem, "change").catch((err) => debugWarn(err));
      }
    });
    watch(nativeInputValue, () => setNativeInputValue());
    watch(() => props.type, async () => {
      await nextTick();
      setNativeInputValue();
      resizeTextarea();
    });
    onMounted(() => {
      if (!props.formatter && props.parser) {
        debugWarn(COMPONENT_NAME3, "If you set the parser, you also need to set the formatter.");
      }
      setNativeInputValue();
      nextTick(resizeTextarea);
    });
    expose({
      input,
      textarea,
      ref: _ref,
      textareaStyle,
      autosize: toRef(props, "autosize"),
      isComposing,
      focus,
      blur,
      select,
      clear,
      resizeTextarea
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass([
          unref(containerKls),
          {
            [unref(nsInput).bm("group", "append")]: _ctx.$slots.append,
            [unref(nsInput).bm("group", "prepend")]: _ctx.$slots.prepend
          }
        ]),
        style: normalizeStyle(unref(containerStyle)),
        onMouseenter: handleMouseEnter,
        onMouseleave: handleMouseLeave
      }, [
        createCommentVNode(" input "),
        _ctx.type !== "textarea" ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
          createCommentVNode(" prepend slot "),
          _ctx.$slots.prepend ? (openBlock(), createElementBlock("div", {
            key: 0,
            class: normalizeClass(unref(nsInput).be("group", "prepend"))
          }, [
            renderSlot(_ctx.$slots, "prepend")
          ], 2)) : createCommentVNode("v-if", true),
          createBaseVNode("div", {
            ref_key: "wrapperRef",
            ref: wrapperRef,
            class: normalizeClass(unref(wrapperKls))
          }, [
            createCommentVNode(" prefix slot "),
            _ctx.$slots.prefix || _ctx.prefixIcon ? (openBlock(), createElementBlock("span", {
              key: 0,
              class: normalizeClass(unref(nsInput).e("prefix"))
            }, [
              createBaseVNode("span", {
                class: normalizeClass(unref(nsInput).e("prefix-inner"))
              }, [
                renderSlot(_ctx.$slots, "prefix"),
                _ctx.prefixIcon ? (openBlock(), createBlock(unref(ElIcon), {
                  key: 0,
                  class: normalizeClass(unref(nsInput).e("icon"))
                }, {
                  default: withCtx(() => [
                    (openBlock(), createBlock(resolveDynamicComponent(_ctx.prefixIcon)))
                  ]),
                  _: 1
                }, 8, ["class"])) : createCommentVNode("v-if", true)
              ], 2)
            ], 2)) : createCommentVNode("v-if", true),
            createBaseVNode("input", mergeProps({
              id: unref(inputId),
              ref_key: "input",
              ref: input,
              class: unref(nsInput).e("inner")
            }, unref(attrs), {
              minlength: _ctx.minlength,
              maxlength: _ctx.maxlength,
              type: _ctx.showPassword ? passwordVisible.value ? "text" : "password" : _ctx.type,
              disabled: unref(inputDisabled),
              readonly: _ctx.readonly,
              autocomplete: _ctx.autocomplete,
              tabindex: _ctx.tabindex,
              "aria-label": _ctx.ariaLabel,
              placeholder: _ctx.placeholder,
              style: _ctx.inputStyle,
              form: _ctx.form,
              autofocus: _ctx.autofocus,
              role: _ctx.containerRole,
              onCompositionstart: unref(handleCompositionStart),
              onCompositionupdate: unref(handleCompositionUpdate),
              onCompositionend: unref(handleCompositionEnd),
              onInput: handleInput,
              onChange: handleChange,
              onKeydown: handleKeydown
            }), null, 16, ["id", "minlength", "maxlength", "type", "disabled", "readonly", "autocomplete", "tabindex", "aria-label", "placeholder", "form", "autofocus", "role", "onCompositionstart", "onCompositionupdate", "onCompositionend"]),
            createCommentVNode(" suffix slot "),
            unref(suffixVisible) ? (openBlock(), createElementBlock("span", {
              key: 1,
              class: normalizeClass(unref(nsInput).e("suffix"))
            }, [
              createBaseVNode("span", {
                class: normalizeClass(unref(nsInput).e("suffix-inner"))
              }, [
                !unref(showClear) || !unref(showPwdVisible) || !unref(isWordLimitVisible) ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
                  renderSlot(_ctx.$slots, "suffix"),
                  _ctx.suffixIcon ? (openBlock(), createBlock(unref(ElIcon), {
                    key: 0,
                    class: normalizeClass(unref(nsInput).e("icon"))
                  }, {
                    default: withCtx(() => [
                      (openBlock(), createBlock(resolveDynamicComponent(_ctx.suffixIcon)))
                    ]),
                    _: 1
                  }, 8, ["class"])) : createCommentVNode("v-if", true)
                ], 64)) : createCommentVNode("v-if", true),
                unref(showClear) ? (openBlock(), createBlock(unref(ElIcon), {
                  key: 1,
                  class: normalizeClass([unref(nsInput).e("icon"), unref(nsInput).e("clear")]),
                  onMousedown: withModifiers(unref(NOOP), ["prevent"]),
                  onClick: clear
                }, {
                  default: withCtx(() => [
                    createVNode(unref(circle_close_default))
                  ]),
                  _: 1
                }, 8, ["class", "onMousedown"])) : createCommentVNode("v-if", true),
                unref(showPwdVisible) ? (openBlock(), createBlock(unref(ElIcon), {
                  key: 2,
                  class: normalizeClass([unref(nsInput).e("icon"), unref(nsInput).e("password")]),
                  onClick: handlePasswordVisible
                }, {
                  default: withCtx(() => [
                    (openBlock(), createBlock(resolveDynamicComponent(unref(passwordIcon))))
                  ]),
                  _: 1
                }, 8, ["class"])) : createCommentVNode("v-if", true),
                unref(isWordLimitVisible) ? (openBlock(), createElementBlock("span", {
                  key: 3,
                  class: normalizeClass(unref(nsInput).e("count"))
                }, [
                  createBaseVNode("span", {
                    class: normalizeClass(unref(nsInput).e("count-inner"))
                  }, toDisplayString(unref(textLength)) + " / " + toDisplayString(_ctx.maxlength), 3)
                ], 2)) : createCommentVNode("v-if", true),
                unref(validateState) && unref(validateIcon) && unref(needStatusIcon) ? (openBlock(), createBlock(unref(ElIcon), {
                  key: 4,
                  class: normalizeClass([
                    unref(nsInput).e("icon"),
                    unref(nsInput).e("validateIcon"),
                    unref(nsInput).is("loading", unref(validateState) === "validating")
                  ])
                }, {
                  default: withCtx(() => [
                    (openBlock(), createBlock(resolveDynamicComponent(unref(validateIcon))))
                  ]),
                  _: 1
                }, 8, ["class"])) : createCommentVNode("v-if", true)
              ], 2)
            ], 2)) : createCommentVNode("v-if", true)
          ], 2),
          createCommentVNode(" append slot "),
          _ctx.$slots.append ? (openBlock(), createElementBlock("div", {
            key: 1,
            class: normalizeClass(unref(nsInput).be("group", "append"))
          }, [
            renderSlot(_ctx.$slots, "append")
          ], 2)) : createCommentVNode("v-if", true)
        ], 64)) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
          createCommentVNode(" textarea "),
          createBaseVNode("textarea", mergeProps({
            id: unref(inputId),
            ref_key: "textarea",
            ref: textarea,
            class: [unref(nsTextarea).e("inner"), unref(nsInput).is("focus", unref(isFocused))]
          }, unref(attrs), {
            minlength: _ctx.minlength,
            maxlength: _ctx.maxlength,
            tabindex: _ctx.tabindex,
            disabled: unref(inputDisabled),
            readonly: _ctx.readonly,
            autocomplete: _ctx.autocomplete,
            style: unref(textareaStyle),
            "aria-label": _ctx.ariaLabel,
            placeholder: _ctx.placeholder,
            form: _ctx.form,
            autofocus: _ctx.autofocus,
            rows: _ctx.rows,
            role: _ctx.containerRole,
            onCompositionstart: unref(handleCompositionStart),
            onCompositionupdate: unref(handleCompositionUpdate),
            onCompositionend: unref(handleCompositionEnd),
            onInput: handleInput,
            onFocus: unref(handleFocus),
            onBlur: unref(handleBlur),
            onChange: handleChange,
            onKeydown: handleKeydown
          }), null, 16, ["id", "minlength", "maxlength", "tabindex", "disabled", "readonly", "autocomplete", "aria-label", "placeholder", "form", "autofocus", "rows", "role", "onCompositionstart", "onCompositionupdate", "onCompositionend", "onFocus", "onBlur"]),
          unref(isWordLimitVisible) ? (openBlock(), createElementBlock("span", {
            key: 0,
            style: normalizeStyle(countStyle.value),
            class: normalizeClass(unref(nsInput).e("count"))
          }, toDisplayString(unref(textLength)) + " / " + toDisplayString(_ctx.maxlength), 7)) : createCommentVNode("v-if", true)
        ], 64))
      ], 38);
    };
  }
});
var Input = _export_sfc2(_sfc_main18, [["__file", "input.vue"]]);
var ElInput = withInstall(Input);

// node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/es/MentionSender/index.js
var filterOption = (pattern, option) => {
  const lowerCase = pattern.toLowerCase();
  const label = option.label || option.value;
  return label.toLowerCase().includes(lowerCase);
};
var getMentionCtx = (inputEl, prefix, split) => {
  const { selectionEnd } = inputEl;
  if (selectionEnd === null)
    return;
  const inputValue = inputEl.value;
  const prefixArray = castArray(prefix);
  let splitIndex = -1;
  let mentionCtx;
  for (let i = selectionEnd - 1; i >= 0; --i) {
    const char = inputValue[i];
    if (char === split || char === "\n" || char === "\r") {
      splitIndex = i;
      continue;
    }
    if (prefixArray.includes(char)) {
      const end = splitIndex === -1 ? selectionEnd : splitIndex;
      const pattern = inputValue.slice(i + 1, end);
      mentionCtx = {
        pattern,
        start: i + 1,
        end,
        prefix: char,
        prefixIndex: i,
        splitIndex,
        selectionEnd
      };
      break;
    }
  }
  return mentionCtx;
};
var getCursorPosition = (element, options = {
  debug: false,
  useSelectionEnd: false
}) => {
  const selectionStart = element.selectionStart !== null ? element.selectionStart : 0;
  const selectionEnd = element.selectionEnd !== null ? element.selectionEnd : 0;
  const position = options.useSelectionEnd ? selectionEnd : selectionStart;
  const properties = [
    "direction",
    "boxSizing",
    "width",
    "height",
    "overflowX",
    "overflowY",
    "borderTopWidth",
    "borderRightWidth",
    "borderBottomWidth",
    "borderLeftWidth",
    "borderStyle",
    "paddingTop",
    "paddingRight",
    "paddingBottom",
    "paddingLeft",
    "fontStyle",
    "fontVariant",
    "fontWeight",
    "fontStretch",
    "fontSize",
    "fontSizeAdjust",
    "lineHeight",
    "fontFamily",
    "textAlign",
    "textTransform",
    "textIndent",
    "textDecoration",
    "letterSpacing",
    "wordSpacing",
    "tabSize",
    "MozTabSize"
  ];
  if (options.debug) {
    const el = document.querySelector("#input-textarea-caret-position-mirror-div");
    if (el == null ? void 0 : el.parentNode)
      el.parentNode.removeChild(el);
  }
  const div = document.createElement("div");
  div.id = "input-textarea-caret-position-mirror-div";
  document.body.appendChild(div);
  const style = div.style;
  const computed2 = window.getComputedStyle(element);
  const isInput = element.nodeName === "INPUT";
  style.whiteSpace = isInput ? "nowrap" : "pre-wrap";
  if (!isInput)
    style.wordWrap = "break-word";
  style.position = "absolute";
  if (!options.debug)
    style.visibility = "hidden";
  properties.forEach((prop) => {
    if (isInput && prop === "lineHeight") {
      if (computed2.boxSizing === "border-box") {
        const height = Number.parseInt(computed2.height);
        const outerHeight = Number.parseInt(computed2.paddingTop) + Number.parseInt(computed2.paddingBottom) + Number.parseInt(computed2.borderTopWidth) + Number.parseInt(computed2.borderBottomWidth);
        const targetHeight = outerHeight + Number.parseInt(computed2.lineHeight);
        if (height > targetHeight) {
          style.lineHeight = `${height - outerHeight}px`;
        } else if (height === targetHeight) {
          style.lineHeight = computed2.lineHeight;
        } else {
          style.lineHeight = "0";
        }
      } else {
        style.lineHeight = computed2.height;
      }
    } else {
      style[prop] = computed2[prop];
    }
  });
  if (isFirefox()) {
    if (element.scrollHeight > Number.parseInt(computed2.height)) {
      style.overflowY = "scroll";
    }
  } else {
    style.overflow = "hidden";
  }
  div.textContent = element.value.slice(0, Math.max(0, position));
  if (isInput && div.textContent) {
    div.textContent = div.textContent.replace(/\s/g, " ");
  }
  const span = document.createElement("span");
  span.textContent = element.value.slice(Math.max(0, position)) || ".";
  span.style.position = "relative";
  span.style.left = `${-element.scrollLeft}px`;
  span.style.top = `${-element.scrollTop}px`;
  div.appendChild(span);
  const relativePosition = {
    top: span.offsetTop + Number.parseInt(computed2.borderTopWidth),
    left: span.offsetLeft + Number.parseInt(computed2.borderLeftWidth),
    height: Number.parseInt(computed2.fontSize) * 1.5
  };
  if (options.debug) {
    span.style.backgroundColor = "#aaa";
  } else {
    document.body.removeChild(div);
  }
  if (relativePosition.left >= element.clientWidth) {
    relativePosition.left = element.clientWidth;
  }
  return relativePosition;
};
var mentionProps = buildProps({
  ...inputProps,
  options: {
    type: definePropType(Array),
    default: () => []
  },
  prefix: {
    type: definePropType([String, Array]),
    default: "@",
    validator: (val) => {
      if (isString$1(val))
        return val.length === 1;
      return val.every((v) => isString$1(v) && v.length === 1);
    }
  },
  split: {
    type: String,
    default: " ",
    validator: (val) => val.length === 1
  },
  filterOption: {
    type: definePropType([Boolean, Function]),
    default: () => filterOption,
    validator: (val) => {
      if (val === false)
        return true;
      return isFunction$1(val);
    }
  },
  placement: {
    type: definePropType(String),
    default: "bottom"
  },
  showArrow: Boolean,
  offset: {
    type: Number,
    default: 0
  },
  whole: Boolean,
  checkIsWhole: {
    type: definePropType(Function)
  },
  modelValue: String,
  loading: Boolean,
  popperClass: {
    type: String,
    default: ""
  },
  popperOptions: {
    type: definePropType(Object),
    default: () => ({})
  }
});
var mentionEmits = {
  [UPDATE_MODEL_EVENT]: (value) => isString$1(value),
  input: (value) => isString$1(value),
  search: (pattern, prefix) => isString$1(pattern) && isString$1(prefix),
  select: (option, prefix) => isString$1(option.value) && isString$1(prefix),
  focus: (evt) => evt instanceof FocusEvent,
  blur: (evt) => evt instanceof FocusEvent
};
var mentionDropdownProps = buildProps({
  options: {
    type: definePropType(Array),
    default: () => []
  },
  loading: Boolean,
  disabled: Boolean,
  contentId: String,
  ariaLabel: String
});
var mentionDropdownEmits = {
  select: (option) => isString$1(option.value)
};
var __default__$15 = defineComponent({
  name: "ElMentionDropdown"
});
var _sfc_main$92 = defineComponent({
  ...__default__$15,
  props: mentionDropdownProps,
  emits: mentionDropdownEmits,
  setup(__props, { expose, emit }) {
    const props = __props;
    const ns = useNamespace("mention");
    const { t } = useLocale();
    const hoveringIndex = ref(-1);
    const scrollbarRef = ref();
    const optionRefs = ref();
    const dropdownRef = ref();
    const optionkls = (item, index) => [
      ns.be("dropdown", "item"),
      ns.is("hovering", hoveringIndex.value === index),
      ns.is("disabled", item.disabled || props.disabled)
    ];
    const handleSelect = (item) => {
      if (item.disabled || props.disabled)
        return;
      emit("select", item);
    };
    const handleMouseEnter = (index) => {
      hoveringIndex.value = index;
    };
    const filteredAllDisabled = computed(() => props.disabled || props.options.every((item) => item.disabled));
    const hoverOption = computed(() => props.options[hoveringIndex.value]);
    const selectHoverOption = () => {
      if (!hoverOption.value)
        return;
      emit("select", hoverOption.value);
    };
    const navigateOptions = (direction) => {
      const { options } = props;
      if (options.length === 0 || filteredAllDisabled.value)
        return;
      if (direction === "next") {
        hoveringIndex.value++;
        if (hoveringIndex.value === options.length) {
          hoveringIndex.value = 0;
        }
      } else if (direction === "prev") {
        hoveringIndex.value--;
        if (hoveringIndex.value < 0) {
          hoveringIndex.value = options.length - 1;
        }
      }
      const option = options[hoveringIndex.value];
      if (option.disabled) {
        navigateOptions(direction);
        return;
      }
      nextTick(() => scrollToOption(option));
    };
    const scrollToOption = (option) => {
      var _a2, _b, _c, _d;
      const { options } = props;
      const index = options.findIndex((item) => item.value === option.value);
      const target = (_a2 = optionRefs.value) == null ? void 0 : _a2[index];
      if (target) {
        const menu = (_c = (_b = dropdownRef.value) == null ? void 0 : _b.querySelector) == null ? void 0 : _c.call(_b, `.${ns.be("dropdown", "wrap")}`);
        if (menu) {
          scrollIntoView(menu, target);
        }
      }
      (_d = scrollbarRef.value) == null ? void 0 : _d.handleScroll();
    };
    const resetHoveringIndex = () => {
      if (filteredAllDisabled.value || props.options.length === 0) {
        hoveringIndex.value = -1;
      } else {
        hoveringIndex.value = 0;
      }
    };
    watch(() => props.options, resetHoveringIndex, {
      immediate: true
    });
    expose({
      hoveringIndex,
      navigateOptions,
      selectHoverOption,
      hoverOption
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        ref_key: "dropdownRef",
        ref: dropdownRef,
        class: normalizeClass(unref(ns).b("dropdown"))
      }, [
        _ctx.$slots.header ? (openBlock(), createElementBlock("div", {
          key: 0,
          class: normalizeClass(unref(ns).be("dropdown", "header"))
        }, [
          renderSlot(_ctx.$slots, "header")
        ], 2)) : createCommentVNode("v-if", true),
        withDirectives(createVNode(unref(ElScrollbar), {
          id: _ctx.contentId,
          ref_key: "scrollbarRef",
          ref: scrollbarRef,
          tag: "ul",
          "wrap-class": unref(ns).be("dropdown", "wrap"),
          "view-class": unref(ns).be("dropdown", "list"),
          role: "listbox",
          "aria-label": _ctx.ariaLabel,
          "aria-orientation": "vertical"
        }, {
          default: withCtx(() => [
            (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.options, (item, index) => {
              return openBlock(), createElementBlock("li", {
                id: `${_ctx.contentId}-${index}`,
                ref_for: true,
                ref_key: "optionRefs",
                ref: optionRefs,
                key: index,
                class: normalizeClass(optionkls(item, index)),
                role: "option",
                "aria-disabled": item.disabled || _ctx.disabled || void 0,
                "aria-selected": hoveringIndex.value === index,
                onMousemove: ($event) => handleMouseEnter(index),
                onClick: withModifiers(($event) => handleSelect(item), ["stop"])
              }, [
                renderSlot(_ctx.$slots, "label", {
                  item,
                  index
                }, () => {
                  var _a2;
                  return [
                    createBaseVNode("span", null, toDisplayString((_a2 = item.label) != null ? _a2 : item.value), 1)
                  ];
                })
              ], 42, ["id", "aria-disabled", "aria-selected", "onMousemove", "onClick"]);
            }), 128))
          ]),
          _: 3
        }, 8, ["id", "wrap-class", "view-class", "aria-label"]), [
          [vShow, _ctx.options.length > 0 && !_ctx.loading]
        ]),
        _ctx.loading ? (openBlock(), createElementBlock("div", {
          key: 1,
          class: normalizeClass(unref(ns).be("dropdown", "loading"))
        }, [
          renderSlot(_ctx.$slots, "loading", {}, () => [
            createTextVNode(toDisplayString(unref(t)("el.mention.loading")), 1)
          ])
        ], 2)) : createCommentVNode("v-if", true),
        _ctx.$slots.footer ? (openBlock(), createElementBlock("div", {
          key: 2,
          class: normalizeClass(unref(ns).be("dropdown", "footer"))
        }, [
          renderSlot(_ctx.$slots, "footer")
        ], 2)) : createCommentVNode("v-if", true)
      ], 2);
    };
  }
});
var ElMentionDropdown = _export_sfc2(_sfc_main$92, [["__file", "mention-dropdown.vue"]]);
var __default__11 = defineComponent({
  name: "ElMention",
  inheritAttrs: false
});
var _sfc_main$83 = defineComponent({
  ...__default__11,
  props: mentionProps,
  emits: mentionEmits,
  setup(__props, { expose, emit }) {
    const props = __props;
    const passInputProps = computed(() => pick(props, Object.keys(inputProps)));
    const ns = useNamespace("mention");
    const disabled = useFormDisabled();
    const contentId = useId();
    const elInputRef = ref();
    const tooltipRef = ref();
    const dropdownRef = ref();
    const visible = ref(false);
    const cursorStyle = ref();
    const mentionCtx = ref();
    const computedPlacement = computed(() => props.showArrow ? props.placement : `${props.placement}-start`);
    const computedFallbackPlacements = computed(() => props.showArrow ? ["bottom", "top"] : ["bottom-start", "top-start"]);
    const filteredOptions = computed(() => {
      const { filterOption: filterOption2, options } = props;
      if (!mentionCtx.value || !filterOption2)
        return options;
      return options.filter((option) => filterOption2(mentionCtx.value.pattern, option));
    });
    const dropdownVisible = computed(() => {
      return visible.value && (!!filteredOptions.value.length || props.loading);
    });
    const hoveringId = computed(() => {
      var _a2;
      return `${contentId.value}-${(_a2 = dropdownRef.value) == null ? void 0 : _a2.hoveringIndex}`;
    });
    const handleInputChange = (value) => {
      emit(UPDATE_MODEL_EVENT, value);
      emit(INPUT_EVENT, value);
      syncAfterCursorMove();
    };
    const handleInputKeyDown = (event) => {
      var _a2, _b, _c, _d;
      if (!("code" in event) || ((_a2 = elInputRef.value) == null ? void 0 : _a2.isComposing))
        return;
      switch (event.code) {
        case EVENT_CODE.left:
        case EVENT_CODE.right:
          syncAfterCursorMove();
          break;
        case EVENT_CODE.up:
        case EVENT_CODE.down:
          if (!visible.value)
            return;
          event.preventDefault();
          (_b = dropdownRef.value) == null ? void 0 : _b.navigateOptions(event.code === EVENT_CODE.up ? "prev" : "next");
          break;
        case EVENT_CODE.enter:
        case EVENT_CODE.numpadEnter:
          if (!visible.value)
            return;
          event.preventDefault();
          if ((_c = dropdownRef.value) == null ? void 0 : _c.hoverOption) {
            (_d = dropdownRef.value) == null ? void 0 : _d.selectHoverOption();
          } else {
            visible.value = false;
          }
          break;
        case EVENT_CODE.esc:
          if (!visible.value)
            return;
          event.preventDefault();
          visible.value = false;
          break;
        case EVENT_CODE.backspace:
          if (props.whole && mentionCtx.value) {
            const { splitIndex, selectionEnd, pattern, prefixIndex, prefix } = mentionCtx.value;
            const inputEl = getInputEl();
            if (!inputEl)
              return;
            const inputValue = inputEl.value;
            const matchOption = props.options.find((item) => item.value === pattern);
            const isWhole = isFunction$1(props.checkIsWhole) ? props.checkIsWhole(pattern, prefix) : matchOption;
            if (isWhole && splitIndex !== -1 && splitIndex + 1 === selectionEnd) {
              event.preventDefault();
              const newValue = inputValue.slice(0, prefixIndex) + inputValue.slice(splitIndex + 1);
              emit(UPDATE_MODEL_EVENT, newValue);
              const newSelectionEnd = prefixIndex;
              nextTick(() => {
                inputEl.selectionStart = newSelectionEnd;
                inputEl.selectionEnd = newSelectionEnd;
                syncDropdownVisible();
              });
            }
          }
      }
    };
    const { wrapperRef } = useFocusController(elInputRef, {
      beforeFocus() {
        return disabled.value;
      },
      afterFocus() {
        syncAfterCursorMove();
      },
      beforeBlur(event) {
        var _a2;
        return (_a2 = tooltipRef.value) == null ? void 0 : _a2.isFocusInsideContent(event);
      },
      afterBlur() {
        visible.value = false;
      }
    });
    const handleInputMouseDown = () => {
      syncAfterCursorMove();
    };
    const handleSelect = (item) => {
      if (!mentionCtx.value)
        return;
      const inputEl = getInputEl();
      if (!inputEl)
        return;
      const inputValue = inputEl.value;
      const { split } = props;
      const newEndPart = inputValue.slice(mentionCtx.value.end);
      const alreadySeparated = newEndPart.startsWith(split);
      const newMiddlePart = `${item.value}${alreadySeparated ? "" : split}`;
      const newValue = inputValue.slice(0, mentionCtx.value.start) + newMiddlePart + newEndPart;
      emit(UPDATE_MODEL_EVENT, newValue);
      emit(INPUT_EVENT, newValue);
      emit("select", item, mentionCtx.value.prefix);
      const newSelectionEnd = mentionCtx.value.start + newMiddlePart.length + (alreadySeparated ? 1 : 0);
      nextTick(() => {
        inputEl.selectionStart = newSelectionEnd;
        inputEl.selectionEnd = newSelectionEnd;
        inputEl.focus();
        syncDropdownVisible();
      });
    };
    const getInputEl = () => {
      var _a2, _b;
      return props.type === "textarea" ? (_a2 = elInputRef.value) == null ? void 0 : _a2.textarea : (_b = elInputRef.value) == null ? void 0 : _b.input;
    };
    const syncAfterCursorMove = () => {
      setTimeout(() => {
        syncCursor();
        syncDropdownVisible();
        nextTick(() => {
          var _a2;
          return (_a2 = tooltipRef.value) == null ? void 0 : _a2.updatePopper();
        });
      }, 0);
    };
    const syncCursor = () => {
      const inputEl = getInputEl();
      if (!inputEl)
        return;
      const caretPosition = getCursorPosition(inputEl);
      const inputRect = inputEl.getBoundingClientRect();
      const elInputRect = elInputRef.value.$el.getBoundingClientRect();
      cursorStyle.value = {
        position: "absolute",
        width: 0,
        height: `${caretPosition.height}px`,
        left: `${caretPosition.left + inputRect.left - elInputRect.left}px`,
        top: `${caretPosition.top + inputRect.top - elInputRect.top}px`
      };
    };
    const syncDropdownVisible = () => {
      const inputEl = getInputEl();
      if (document.activeElement !== inputEl) {
        visible.value = false;
        return;
      }
      const { prefix, split } = props;
      mentionCtx.value = getMentionCtx(inputEl, prefix, split);
      if (mentionCtx.value && mentionCtx.value.splitIndex === -1) {
        visible.value = true;
        emit("search", mentionCtx.value.pattern, mentionCtx.value.prefix);
        return;
      }
      visible.value = false;
    };
    expose({
      input: elInputRef,
      tooltip: tooltipRef,
      dropdownVisible
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        ref_key: "wrapperRef",
        ref: wrapperRef,
        class: normalizeClass(unref(ns).b())
      }, [
        createVNode(unref(ElInput), mergeProps(mergeProps(unref(passInputProps), _ctx.$attrs), {
          ref_key: "elInputRef",
          ref: elInputRef,
          "model-value": _ctx.modelValue,
          disabled: unref(disabled),
          role: unref(dropdownVisible) ? "combobox" : void 0,
          "aria-activedescendant": unref(dropdownVisible) ? unref(hoveringId) || "" : void 0,
          "aria-controls": unref(dropdownVisible) ? unref(contentId) : void 0,
          "aria-expanded": unref(dropdownVisible) || void 0,
          "aria-label": _ctx.ariaLabel,
          "aria-autocomplete": unref(dropdownVisible) ? "none" : void 0,
          "aria-haspopup": unref(dropdownVisible) ? "listbox" : void 0,
          onInput: handleInputChange,
          onKeydown: handleInputKeyDown,
          onMousedown: handleInputMouseDown
        }), createSlots({
          _: 2
        }, [
          renderList(_ctx.$slots, (_, name) => {
            return {
              name,
              fn: withCtx((slotProps) => [
                renderSlot(_ctx.$slots, name, normalizeProps(guardReactiveProps(slotProps)))
              ])
            };
          })
        ]), 1040, ["model-value", "disabled", "role", "aria-activedescendant", "aria-controls", "aria-expanded", "aria-label", "aria-autocomplete", "aria-haspopup"]),
        createVNode(unref(ElTooltip), {
          ref_key: "tooltipRef",
          ref: tooltipRef,
          visible: unref(dropdownVisible),
          "popper-class": [unref(ns).e("popper"), _ctx.popperClass],
          "popper-options": _ctx.popperOptions,
          placement: unref(computedPlacement),
          "fallback-placements": unref(computedFallbackPlacements),
          effect: "light",
          pure: "",
          offset: _ctx.offset,
          "show-arrow": _ctx.showArrow
        }, {
          default: withCtx(() => [
            createBaseVNode("div", {
              style: normalizeStyle(cursorStyle.value)
            }, null, 4)
          ]),
          content: withCtx(() => {
            var _a2;
            return [
              createVNode(ElMentionDropdown, {
                ref_key: "dropdownRef",
                ref: dropdownRef,
                options: unref(filteredOptions),
                disabled: unref(disabled),
                loading: _ctx.loading,
                "content-id": unref(contentId),
                "aria-label": _ctx.ariaLabel,
                onSelect: handleSelect,
                onClick: withModifiers((_a2 = elInputRef.value) == null ? void 0 : _a2.focus, ["stop"])
              }, createSlots({
                _: 2
              }, [
                renderList(_ctx.$slots, (_, name) => {
                  return {
                    name,
                    fn: withCtx((slotProps) => [
                      renderSlot(_ctx.$slots, name, normalizeProps(guardReactiveProps(slotProps)))
                    ])
                  };
                })
              ]), 1032, ["options", "disabled", "loading", "content-id", "aria-label", "onClick"])
            ];
          }),
          _: 3
        }, 8, ["visible", "popper-class", "popper-options", "placement", "fallback-placements", "offset", "show-arrow"])
      ], 2);
    };
  }
});
var Mention = _export_sfc2(_sfc_main$83, [["__file", "mention.vue"]]);
var ElMention = withInstall(Mention);
var _hoisted_1$72 = { class: "el-send-button" };
var _sfc_main$73 = defineComponent({
  __name: "index",
  emits: ["clear"],
  setup(__props, { emit: __emit }) {
    const emit = __emit;
    return (_ctx, _cache) => {
      const _component_el_icon = ElIcon;
      const _component_el_button = ElButton;
      return openBlock(), createElementBlock("div", _hoisted_1$72, [
        createVNode(_component_el_button, {
          circle: "",
          onClick: _cache[0] || (_cache[0] = ($event) => emit("clear"))
        }, {
          default: withCtx(() => [
            createVNode(_component_el_icon, null, {
              default: withCtx(() => [
                createVNode(unref(brush_default))
              ]),
              _: 1
            })
          ]),
          _: 1
        })
      ]);
    };
  }
});
var ClearButton2 = _export_sfc(_sfc_main$73, [["__scopeId", "data-v-f14235eb"]]);
var _sfc_main$65 = {};
var _hoisted_1$63 = {
  viewBox: "0 0 1000 1000",
  xmlns: "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink"
};
function _sfc_render7(_ctx, _cache) {
  return openBlock(), createElementBlock("svg", _hoisted_1$63, _cache[0] || (_cache[0] = [
    createBaseVNode("title", null, "Loading", -1),
    createBaseVNode("rect", {
      fill: "currentColor",
      height: "250",
      rx: "24",
      ry: "24",
      width: "250",
      x: "375",
      y: "375"
    }, null, -1),
    createBaseVNode("circle", {
      cx: "500",
      cy: "500",
      fill: "none",
      r: "450",
      stroke: "currentColor",
      "stroke-width": "100",
      opacity: "0.45"
    }, null, -1),
    createBaseVNode("circle", {
      cx: "500",
      cy: "500",
      fill: "none",
      r: "450",
      stroke: "currentColor",
      "stroke-width": "100",
      "stroke-dasharray": "600 9999999"
    }, [
      createBaseVNode("animateTransform", {
        attributeName: "transform",
        dur: "1s",
        from: "0 500 500",
        repeatCount: "indefinite",
        to: "360 500 500",
        type: "rotate"
      })
    ], -1)
  ]));
}
var loading$12 = _export_sfc(_sfc_main$65, [["render", _sfc_render7]]);
var _hoisted_1$53 = { class: "el-send-button" };
var _sfc_main$55 = defineComponent({
  __name: "index",
  emits: ["cancel"],
  setup(__props, { emit: __emit }) {
    const emits = __emit;
    return (_ctx, _cache) => {
      const _component_el_button = ElButton;
      return openBlock(), createElementBlock("div", _hoisted_1$53, [
        createVNode(_component_el_button, {
          circle: "",
          onClick: _cache[0] || (_cache[0] = ($event) => emits("cancel"))
        }, {
          default: withCtx(() => [
            createVNode(loading$12, { class: "loading-svg" })
          ]),
          _: 1
        })
      ]);
    };
  }
});
var LoadingButton2 = _export_sfc(_sfc_main$55, [["__scopeId", "data-v-c1944c77"]]);
var _hoisted_1$43 = { class: "el-send-button" };
var _sfc_main$46 = defineComponent({
  __name: "index",
  props: {
    disabled: {
      type: Boolean,
      default: false
    }
  },
  emits: ["submit"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emits = __emit;
    return (_ctx, _cache) => {
      const _component_el_icon = ElIcon;
      const _component_el_button = ElButton;
      return openBlock(), createElementBlock("div", _hoisted_1$43, [
        createVNode(_component_el_button, {
          circle: "",
          disabled: props.disabled,
          onClick: _cache[0] || (_cache[0] = ($event) => emits("submit"))
        }, {
          default: withCtx(() => [
            createVNode(_component_el_icon, null, {
              default: withCtx(() => [
                createVNode(unref(top_default))
              ]),
              _: 1
            })
          ]),
          _: 1
        }, 8, ["disabled"])
      ]);
    };
  }
});
var _hoisted_1$33 = { class: "el-send-button" };
var _sfc_main$36 = defineComponent({
  __name: "index",
  setup(__props) {
    return (_ctx, _cache) => {
      const _component_el_icon = ElIcon;
      const _component_el_button = ElButton;
      return openBlock(), createElementBlock("div", _hoisted_1$33, [
        createVNode(_component_el_button, { circle: "" }, {
          default: withCtx(() => [
            createVNode(_component_el_icon, null, {
              default: withCtx(() => [
                createVNode(unref(microphone_default))
              ]),
              _: 1
            })
          ]),
          _: 1
        })
      ]);
    };
  }
});
var _hoisted_1$23 = ["viewBox"];
var _hoisted_2$12 = ["x", "y"];
var _hoisted_3$12 = ["values", "dur", "begin"];
var _hoisted_4$12 = ["values", "dur", "begin"];
var SIZE2 = 1e3;
var COUNT2 = 4;
var RECT_WIDTH2 = 140;
var RECT_HEIGHT_MIN2 = 250;
var RECT_HEIGHT_MAX2 = 500;
var DURATION2 = 0.8;
var _sfc_main$27 = defineComponent({
  __name: "loading",
  props: {
    className: { default: "" }
  },
  setup(__props) {
    const RECT_RADIUS = RECT_WIDTH2 / 2;
    const rects = computed(() => {
      const dest = (SIZE2 - RECT_WIDTH2 * COUNT2) / (COUNT2 - 1);
      return Array.from({ length: COUNT2 }).map((_, index) => {
        const x = index * (dest + RECT_WIDTH2);
        const yMin = SIZE2 / 2 - RECT_HEIGHT_MIN2 / 2;
        const yMax = SIZE2 / 2 - RECT_HEIGHT_MAX2 / 2;
        return { x, yMin, yMax };
      });
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("svg", {
        class: normalizeClass(_ctx.className),
        color: "currentColor",
        viewBox: `0 0 ${SIZE2} ${SIZE2}`,
        xmlns: "http://www.w3.org/2000/svg",
        "xmlns:xlink": "http://www.w3.org/1999/xlink"
      }, [
        _cache[0] || (_cache[0] = createBaseVNode("title", null, "Speech Recording", -1)),
        (openBlock(true), createElementBlock(Fragment, null, renderList(rects.value, (item, index) => {
          return openBlock(), createElementBlock("rect", {
            key: index,
            fill: "currentColor",
            rx: RECT_RADIUS,
            ry: RECT_RADIUS,
            height: RECT_HEIGHT_MIN2,
            width: RECT_WIDTH2,
            x: item.x,
            y: item.yMin
          }, [
            createBaseVNode("animate", {
              attributeName: "height",
              values: `${RECT_HEIGHT_MIN2}; ${RECT_HEIGHT_MAX2}; ${RECT_HEIGHT_MIN2}`,
              keyTimes: "0; 0.5; 1",
              dur: `${DURATION2}s`,
              begin: `${DURATION2 / COUNT2 * index}s`,
              repeatCount: "indefinite"
            }, null, 8, _hoisted_3$12),
            createBaseVNode("animate", {
              attributeName: "y",
              values: `${item.yMin}; ${item.yMax}; ${item.yMin}`,
              keyTimes: "0; 0.5; 1",
              dur: `${DURATION2}s`,
              begin: `${DURATION2 / COUNT2 * index}s`,
              repeatCount: "indefinite"
            }, null, 8, _hoisted_4$12)
          ], 8, _hoisted_2$12);
        }), 128))
      ], 10, _hoisted_1$23);
    };
  }
});
var loading2 = _export_sfc(_sfc_main$27, [["__scopeId", "data-v-fc6a109c"]]);
var _hoisted_1$14 = { class: "el-send-button" };
var _sfc_main$112 = defineComponent({
  __name: "index",
  setup(__props) {
    return (_ctx, _cache) => {
      const _component_el_button = ElButton;
      return openBlock(), createElementBlock("div", _hoisted_1$14, [
        createVNode(_component_el_button, { circle: "" }, {
          default: withCtx(() => [
            createVNode(loading2, { class: "loading-svg" })
          ]),
          _: 1
        })
      ]);
    };
  }
});
var SpeechLoadingButton2 = _export_sfc(_sfc_main$112, [["__scopeId", "data-v-afb4902e"]]);
var _hoisted_19 = {
  key: 0,
  class: "el-sender-header-wrap"
};
var _hoisted_28 = {
  key: 0,
  class: "el-sender-header"
};
var _hoisted_37 = {
  key: 0,
  class: "el-sender-prefix"
};
var _hoisted_47 = {
  key: 1,
  class: "el-sender-action-list"
};
var _hoisted_56 = { class: "el-sender-action-list-presets" };
var _hoisted_65 = {
  key: 2,
  class: "el-sender-updown-wrap"
};
var _hoisted_74 = {
  key: 0,
  class: "el-sender-prefix"
};
var _hoisted_83 = { class: "el-sender-action-list" };
var _hoisted_92 = { class: "el-sender-action-list-presets" };
var _hoisted_102 = {
  key: 0,
  class: "el-sender-footer"
};
var _sfc_main19 = defineComponent({
  __name: "index",
  props: {
    modelValue: { default: "" },
    placeholder: { default: "请输入内容" },
    autoSize: { default: () => ({
      minRows: 1,
      maxRows: 6
    }) },
    readOnly: { type: Boolean },
    disabled: { type: Boolean },
    loading: { type: Boolean },
    clearable: { type: Boolean },
    allowSpeech: { type: Boolean },
    submitType: { default: "enter" },
    headerAnimationTimer: { default: 300 },
    inputWidth: { default: "100%" },
    variant: { default: "default" },
    showUpdown: { type: Boolean, default: true },
    submitBtnDisabled: { type: Boolean, default: void 0 },
    inputStyle: { default: "" },
    options: { default: () => [] },
    filterOption: { type: Function, default: () => true },
    whole: { type: Boolean, default: false },
    checkIsWhole: { type: Function, default: () => true },
    triggerLoading: { type: Boolean, default: false },
    triggerStrings: { default: () => [] },
    triggerSplit: { default: " " },
    triggerPopoverPlacement: { default: "top" },
    triggerPopoverOffset: { default: 20 }
  },
  emits: ["update:modelValue", "submit", "cancel", "recordingChange", "search", "select"],
  setup(__props, { expose: __expose, emit: __emit }) {
    const props = __props;
    const emits = __emit;
    const slots = useSlots();
    const internalValue = computed({
      get() {
        return props.modelValue;
      },
      set(val) {
        if (props.readOnly || props.disabled)
          return;
        emits("update:modelValue", val);
      }
    });
    const instance = getCurrentInstance();
    const hasOnRecordingChangeListener = computed(() => {
      var _a2;
      return !!((_a2 = instance == null ? void 0 : instance.vnode.props) == null ? void 0 : _a2.onRecordingChange);
    });
    const senderRef = ref();
    const inputRef = ref();
    const isSubmitDisabled = computed(() => {
      if (typeof props.submitBtnDisabled === "boolean") {
        return props.submitBtnDisabled;
      }
      return !internalValue.value;
    });
    function onContentMouseDown(e) {
      if (e.target !== senderRef.value.querySelector(`.el-textarea__inner`)) {
        e.preventDefault();
      }
      inputRef.value.input.focus();
    }
    const visiableHeader = ref(false);
    function openHeader() {
      if (!slots.header)
        return false;
      if (props.readOnly)
        return false;
      visiableHeader.value = true;
    }
    function closeHeader() {
      if (!slots.header)
        return;
      if (props.readOnly)
        return;
      visiableHeader.value = false;
    }
    const recognition = ref(null);
    const speechLoading = ref(false);
    function startRecognition() {
      if (props.readOnly)
        return;
      if (hasOnRecordingChangeListener.value) {
        speechLoading.value = true;
        emits("recordingChange", true);
        return;
      }
      if ("webkitSpeechRecognition" in window) {
        recognition.value = new webkitSpeechRecognition();
        recognition.value.continuous = true;
        recognition.value.interimResults = true;
        recognition.value.lang = "zh-CN";
        recognition.value.onresult = (event) => {
          let results = "";
          for (let i = 0; i <= event.resultIndex; i++) {
            results += event.results[i][0].transcript;
          }
          if (!props.readOnly) {
            internalValue.value = results;
          }
        };
        recognition.value.onstart = () => {
          speechLoading.value = true;
        };
        recognition.value.onend = () => {
          speechLoading.value = false;
        };
        recognition.value.onerror = (event) => {
          speechLoading.value = false;
        };
        recognition.value.start();
      }
    }
    function stopRecognition() {
      if (hasOnRecordingChangeListener.value) {
        speechLoading.value = false;
        emits("recordingChange", false);
        return;
      }
      if (recognition.value) {
        recognition.value.stop();
        speechLoading.value = false;
      }
    }
    function submit() {
      if (props.readOnly || props.loading || props.disabled || isSubmitDisabled.value)
        return;
      emits("submit", internalValue.value);
    }
    function cancel() {
      if (props.readOnly)
        return;
      emits("cancel", internalValue.value);
    }
    function clear() {
      if (props.readOnly)
        return;
      inputRef.value.input.clear();
      internalValue.value = "";
    }
    function handleKeyDown(e) {
      if (props.readOnly)
        return;
      if (props.submitType === "enter") {
        if (e.shiftKey && e.keyCode === 13) {
          e.preventDefault();
          const cursorPosition = e.target.selectionStart;
          const textBeforeCursor = internalValue.value.slice(0, cursorPosition);
          const textAfterCursor = internalValue.value.slice(cursorPosition);
          internalValue.value = `${textBeforeCursor}
${textAfterCursor}`;
          e.target.setSelectionRange(cursorPosition + 1, cursorPosition + 1);
        } else if (e.keyCode === 13 && !e.shiftKey) {
          e.preventDefault();
          submit();
        }
      } else if (props.submitType === "shiftEnter") {
        if (e.shiftKey && e.keyCode === 13) {
          e.preventDefault();
          submit();
        } else if (e.keyCode === 13 && !e.shiftKey) {
          e.preventDefault();
          const cursorPosition = e.target.selectionStart;
          const textBeforeCursor = internalValue.value.slice(0, cursorPosition);
          const textAfterCursor = internalValue.value.slice(cursorPosition);
          internalValue.value = `${textBeforeCursor}
${textAfterCursor}`;
          e.target.setSelectionRange(cursorPosition + 1, cursorPosition + 1);
        }
      }
    }
    function blur() {
      if (props.readOnly) {
        return false;
      }
      inputRef.value.input.blur();
    }
    function focus(type = "all") {
      if (props.readOnly) {
        return false;
      }
      if (type === "all") {
        inputRef.value.input.select();
      } else if (type === "start") {
        focusToStart();
      } else if (type === "end") {
        focusToEnd();
      }
    }
    function focusToStart() {
      if (inputRef.value) {
        const textarea = inputRef.value.input.$el.querySelector("textarea");
        if (textarea) {
          textarea.focus();
          textarea.setSelectionRange(0, 0);
        }
      }
    }
    function focusToEnd() {
      if (inputRef.value) {
        const textarea = inputRef.value.input.$el.querySelector("textarea");
        if (textarea) {
          textarea.focus();
          textarea.setSelectionRange(internalValue.value.length, internalValue.value.length);
        }
      }
    }
    function handleSearch(pattern, prefix) {
      emits("search", pattern, prefix);
    }
    function handleSelect(option, prefix) {
      emits("select", option, prefix);
    }
    __expose({
      openHeader,
      // 打开头部
      closeHeader,
      // 关闭头部
      clear,
      // 清空输入框
      blur,
      // 失去焦点
      focus,
      // 获取焦点
      // 按钮操作
      submit,
      cancel,
      startRecognition,
      stopRecognition
    });
    return (_ctx, _cache) => {
      const _component_el_mention = ElMention;
      return openBlock(), createElementBlock("div", {
        class: "el-sender-wrap",
        style: normalizeStyle({ cursor: _ctx.disabled ? "not-allowed" : "default" })
      }, [
        createBaseVNode("div", {
          ref_key: "senderRef",
          ref: senderRef,
          class: normalizeClass(["el-sender", {
            "el-sender-disabled": _ctx.disabled
          }]),
          style: normalizeStyle({
            "--el-box-shadow-tertiary": "0 1px 2px 0 rgba(0, 0, 0, 0.03), 0 1px 6px -1px rgba(0, 0, 0, 0.02), 0 2px 4px 0 rgba(0, 0, 0, 0.02)",
            "--el-sender-input-input-font-size": "14px",
            "--el-sender-header-animation-duration": `${_ctx.headerAnimationTimer}ms`
          })
        }, [
          createVNode(Transition, { name: "slide" }, {
            default: withCtx(() => [
              unref(visiableHeader) ? (openBlock(), createElementBlock("div", _hoisted_19, [
                _ctx.$slots.header ? (openBlock(), createElementBlock("div", _hoisted_28, [
                  renderSlot(_ctx.$slots, "header", {}, void 0, true)
                ])) : createCommentVNode("", true)
              ])) : createCommentVNode("", true)
            ]),
            _: 3
          }),
          createBaseVNode("div", {
            class: normalizeClass(["el-sender-content", { "content-variant-updown": props.variant === "updown" }]),
            onMousedown: onContentMouseDown
          }, [
            _ctx.$slots.prefix && props.variant === "default" ? (openBlock(), createElementBlock("div", _hoisted_37, [
              renderSlot(_ctx.$slots, "prefix", {}, void 0, true)
            ])) : createCommentVNode("", true),
            createVNode(_component_el_mention, {
              ref_key: "inputRef",
              ref: inputRef,
              modelValue: unref(internalValue),
              "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => isRef(internalValue) ? internalValue.value = $event : null),
              class: "el-sender-input",
              "input-style": props.inputStyle || {
                "resize": "none",
                "max-height": "176px",
                "max-width": _ctx.inputWidth
              },
              rows: 1,
              autosize: _ctx.autoSize,
              type: "textarea",
              "validate-event": false,
              placeholder: _ctx.placeholder,
              "read-only": _ctx.readOnly || _ctx.disabled,
              disabled: _ctx.disabled,
              options: props.options,
              "filter-option": props.filterOption,
              whole: props.whole,
              "check-is-whole": props.checkIsWhole,
              loading: props.triggerLoading,
              prefix: props.triggerStrings,
              split: props.triggerSplit,
              placement: props.triggerPopoverPlacement,
              offset: props.triggerPopoverOffset,
              onKeydown: withModifiers(handleKeyDown, ["stop"]),
              onSearch: handleSearch,
              onSelect: handleSelect
            }, createSlots({ _: 2 }, [
              _ctx.$slots["trigger-label"] ? {
                name: "label",
                fn: withCtx(({ item, index }) => [
                  renderSlot(_ctx.$slots, "trigger-label", {
                    item,
                    index
                  }, void 0, true)
                ]),
                key: "0"
              } : void 0,
              _ctx.$slots["trigger-loading"] ? {
                name: "loading",
                fn: withCtx(() => [
                  renderSlot(_ctx.$slots, "trigger-loading", {}, void 0, true)
                ]),
                key: "1"
              } : void 0,
              _ctx.$slots["trigger-header"] ? {
                name: "header",
                fn: withCtx(() => [
                  renderSlot(_ctx.$slots, "trigger-header", {}, void 0, true)
                ]),
                key: "2"
              } : void 0,
              _ctx.$slots["trigger-footer"] ? {
                name: "footer",
                fn: withCtx(() => [
                  renderSlot(_ctx.$slots, "trigger-footer", {}, void 0, true)
                ]),
                key: "3"
              } : void 0
            ]), 1032, ["modelValue", "input-style", "autosize", "placeholder", "read-only", "disabled", "options", "filter-option", "whole", "check-is-whole", "loading", "prefix", "split", "placement", "offset"]),
            props.variant === "default" ? (openBlock(), createElementBlock("div", _hoisted_47, [
              renderSlot(_ctx.$slots, "action-list", {}, () => [
                createBaseVNode("div", _hoisted_56, [
                  !_ctx.loading ? (openBlock(), createBlock(unref(_sfc_main$46), {
                    key: 0,
                    disabled: unref(isSubmitDisabled),
                    onSubmit: submit
                  }, null, 8, ["disabled"])) : createCommentVNode("", true),
                  _ctx.loading ? (openBlock(), createBlock(unref(LoadingButton2), {
                    key: 1,
                    onCancel: cancel
                  })) : createCommentVNode("", true),
                  !unref(speechLoading) && _ctx.allowSpeech ? (openBlock(), createBlock(unref(_sfc_main$36), {
                    key: 2,
                    onClick: startRecognition
                  })) : createCommentVNode("", true),
                  unref(speechLoading) && _ctx.allowSpeech ? (openBlock(), createBlock(unref(SpeechLoadingButton2), {
                    key: 3,
                    onClick: stopRecognition
                  })) : createCommentVNode("", true),
                  _ctx.clearable ? (openBlock(), createBlock(unref(ClearButton2), {
                    key: 4,
                    onClear: clear
                  })) : createCommentVNode("", true)
                ])
              ], true)
            ])) : createCommentVNode("", true),
            props.variant === "updown" && props.showUpdown ? (openBlock(), createElementBlock("div", _hoisted_65, [
              _ctx.$slots.prefix ? (openBlock(), createElementBlock("div", _hoisted_74, [
                renderSlot(_ctx.$slots, "prefix", {}, void 0, true)
              ])) : createCommentVNode("", true),
              createBaseVNode("div", _hoisted_83, [
                renderSlot(_ctx.$slots, "action-list", {}, () => [
                  createBaseVNode("div", _hoisted_92, [
                    !_ctx.loading ? (openBlock(), createBlock(unref(_sfc_main$46), {
                      key: 0,
                      disabled: unref(isSubmitDisabled),
                      onSubmit: submit
                    }, null, 8, ["disabled"])) : createCommentVNode("", true),
                    _ctx.loading ? (openBlock(), createBlock(unref(LoadingButton2), {
                      key: 1,
                      onCancel: cancel
                    })) : createCommentVNode("", true),
                    !unref(speechLoading) && _ctx.allowSpeech ? (openBlock(), createBlock(unref(_sfc_main$36), {
                      key: 2,
                      onClick: startRecognition
                    })) : createCommentVNode("", true),
                    unref(speechLoading) && _ctx.allowSpeech ? (openBlock(), createBlock(unref(SpeechLoadingButton2), {
                      key: 3,
                      onClick: stopRecognition
                    })) : createCommentVNode("", true),
                    _ctx.clearable ? (openBlock(), createBlock(unref(ClearButton2), {
                      key: 4,
                      onClear: clear
                    })) : createCommentVNode("", true)
                  ])
                ], true)
              ])
            ])) : createCommentVNode("", true)
          ], 34),
          createVNode(Transition, { name: "slide" }, {
            default: withCtx(() => [
              _ctx.$slots.footer ? (openBlock(), createElementBlock("div", _hoisted_102, [
                renderSlot(_ctx.$slots, "footer", {}, void 0, true)
              ])) : createCommentVNode("", true)
            ]),
            _: 3
          })
        ], 6)
      ], 4);
    };
  }
});
var MentionSender = _export_sfc(_sfc_main19, [["__scopeId", "data-v-c9126f82"]]);

// node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/es/Prompts/index.js
import "/Users/Bone/Documents/Github/AI-RagFLow-Api/node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/index4.css";
var _hoisted_110 = { class: "el-prompts-title" };
var _hoisted_29 = ["onClick", "onMouseenter", "onMouseleave", "onMousedown", "onMouseup"];
var _hoisted_38 = { class: "item-content-container" };
var _hoisted_48 = { class: "el-prompts-item-content" };
var _hoisted_57 = { class: "el-prompts-item-label" };
var _hoisted_66 = { class: "el-prompts-item-description" };
var _hoisted_75 = {
  key: 1,
  class: "el-prompts-children"
};
var _sfc_main20 = defineComponent({
  __name: "index",
  props: {
    title: { default: "" },
    items: { default: () => [] },
    wrap: { type: Boolean, default: false },
    vertical: { type: Boolean, default: false },
    style: { default: () => ({}) }
  },
  emits: ["itemClick"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emits = __emit;
    const hoveredKeys = ref(/* @__PURE__ */ new Set());
    const activeKeys = ref(/* @__PURE__ */ new Set());
    function handleItemClick(item) {
      if (item.disabled)
        return;
      if (item.children && item.children.length > 0)
        return;
      emits("itemClick", item);
    }
    function handleMouseEnter(key) {
      hoveredKeys.value.add(key);
    }
    function handleMouseLeave(key) {
      hoveredKeys.value.delete(key);
    }
    function handleMouseDown(key) {
      activeKeys.value.add(key);
    }
    function handleMouseUp(key) {
      activeKeys.value.delete(key);
    }
    function isHovered(key) {
      return hoveredKeys.value.has(key);
    }
    function isActive(key) {
      return activeKeys.value.has(key);
    }
    return (_ctx, _cache) => {
      const _component_el_icon = ElIcon;
      const _component_index = resolveComponent("index", true);
      return openBlock(), createElementBlock("div", {
        class: "el-prompts",
        style: normalizeStyle(props.style)
      }, [
        _ctx.$slots.title || props.title ? renderSlot(_ctx.$slots, "title", { key: 0 }, () => [
          createBaseVNode("div", _hoisted_110, toDisplayString(_ctx.title), 1)
        ], true) : createCommentVNode("", true),
        createBaseVNode("div", {
          class: normalizeClass(["el-prompts-items", {
            "el-prompts-items-wrap": props.wrap,
            "el-prompts-items-vertical": props.vertical
          }])
        }, [
          (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.items, (item) => {
            return openBlock(), createElementBlock("div", {
              key: item.key,
              class: normalizeClass(["el-prompts-item", {
                "el-prompts-item-disabled": item.disabled,
                "el-prompts-item-gap": item.icon || _ctx.$slots.icon,
                "hovered": isHovered(item.key),
                "actived": isActive(item.key)
              }]),
              style: normalizeStyle({
                ...item.itemStyle,
                ...isHovered(item.key) ? item.itemHoverStyle ? item.itemHoverStyle : {} : {},
                ...isActive(item.key) ? item.itemActiveStyle ? item.itemActiveStyle : {} : {}
              }),
              onClick: withModifiers(($event) => handleItemClick(item), ["stop"]),
              onMouseenter: withModifiers(($event) => handleMouseEnter(item.key), ["stop"]),
              onMouseleave: withModifiers(($event) => handleMouseLeave(item.key), ["stop"]),
              onMousedown: withModifiers(($event) => handleMouseDown(item.key), ["stop"]),
              onMouseup: withModifiers(($event) => handleMouseUp(item.key), ["stop"])
            }, [
              createBaseVNode("div", _hoisted_38, [
                _ctx.$slots.icon || item.icon ? renderSlot(_ctx.$slots, "icon", {
                  key: 0,
                  item
                }, () => [
                  createVNode(_component_el_icon, { class: "el-prompts-item-icon" }, {
                    default: withCtx(() => [
                      (openBlock(), createBlock(resolveDynamicComponent(item.icon)))
                    ]),
                    _: 2
                  }, 1024)
                ], true) : createCommentVNode("", true),
                createBaseVNode("div", _hoisted_48, [
                  _ctx.$slots.label || item.label ? renderSlot(_ctx.$slots, "label", {
                    key: 0,
                    item
                  }, () => [
                    createBaseVNode("h6", _hoisted_57, toDisplayString(item.label), 1)
                  ], true) : createCommentVNode("", true),
                  _ctx.$slots.description || item.description ? renderSlot(_ctx.$slots, "description", {
                    key: 1,
                    item
                  }, () => [
                    createBaseVNode("p", _hoisted_66, toDisplayString(item.description), 1)
                  ], true) : createCommentVNode("", true)
                ]),
                item.children && item.children.length > 0 ? (openBlock(), createElementBlock("div", _hoisted_75, [
                  createVNode(_component_index, {
                    items: item.children,
                    vertical: "",
                    style: normalizeStyle(props.style),
                    onItemClick: handleItemClick
                  }, null, 8, ["items", "style"])
                ])) : createCommentVNode("", true)
              ])
            ], 46, _hoisted_29);
          }), 128))
        ], 2)
      ], 4);
    };
  }
});
var Prompts = _export_sfc(_sfc_main20, [["__scopeId", "data-v-f17c8cdf"]]);

// node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/es/Sender/index.js
import "/Users/Bone/Documents/Github/AI-RagFLow-Api/node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/index11.css";
import "/Users/Bone/Documents/Github/AI-RagFLow-Api/node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/el-popover.css";
import "/Users/Bone/Documents/Github/AI-RagFLow-Api/node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/el-popper.css";
var _hoisted_1$73 = { class: "el-send-button" };
var _sfc_main$74 = defineComponent({
  __name: "index",
  emits: ["clear"],
  setup(__props, { emit: __emit }) {
    const emit = __emit;
    return (_ctx, _cache) => {
      const _component_el_icon = ElIcon;
      const _component_el_button = ElButton;
      return openBlock(), createElementBlock("div", _hoisted_1$73, [
        createVNode(_component_el_button, {
          circle: "",
          onClick: _cache[0] || (_cache[0] = ($event) => emit("clear"))
        }, {
          default: withCtx(() => [
            createVNode(_component_el_icon, null, {
              default: withCtx(() => [
                createVNode(unref(brush_default))
              ]),
              _: 1
            })
          ]),
          _: 1
        })
      ]);
    };
  }
});
var ClearButton3 = _export_sfc(_sfc_main$74, [["__scopeId", "data-v-49033679"]]);
var _sfc_main$66 = {};
var _hoisted_1$64 = {
  viewBox: "0 0 1000 1000",
  xmlns: "http://www.w3.org/2000/svg",
  "xmlns:xlink": "http://www.w3.org/1999/xlink"
};
function _sfc_render8(_ctx, _cache) {
  return openBlock(), createElementBlock("svg", _hoisted_1$64, _cache[0] || (_cache[0] = [
    createBaseVNode("title", null, "Loading", -1),
    createBaseVNode("rect", {
      fill: "currentColor",
      height: "250",
      rx: "24",
      ry: "24",
      width: "250",
      x: "375",
      y: "375"
    }, null, -1),
    createBaseVNode("circle", {
      cx: "500",
      cy: "500",
      fill: "none",
      r: "450",
      stroke: "currentColor",
      "stroke-width": "100",
      opacity: "0.45"
    }, null, -1),
    createBaseVNode("circle", {
      cx: "500",
      cy: "500",
      fill: "none",
      r: "450",
      stroke: "currentColor",
      "stroke-width": "100",
      "stroke-dasharray": "600 9999999"
    }, [
      createBaseVNode("animateTransform", {
        attributeName: "transform",
        dur: "1s",
        from: "0 500 500",
        repeatCount: "indefinite",
        to: "360 500 500",
        type: "rotate"
      })
    ], -1)
  ]));
}
var loading$13 = _export_sfc(_sfc_main$66, [["render", _sfc_render8]]);
var _hoisted_1$54 = { class: "el-send-button" };
var _sfc_main$56 = defineComponent({
  __name: "index",
  emits: ["cancel"],
  setup(__props, { emit: __emit }) {
    const emits = __emit;
    return (_ctx, _cache) => {
      const _component_el_button = ElButton;
      return openBlock(), createElementBlock("div", _hoisted_1$54, [
        createVNode(_component_el_button, {
          circle: "",
          onClick: _cache[0] || (_cache[0] = ($event) => emits("cancel"))
        }, {
          default: withCtx(() => [
            createVNode(loading$13, { class: "loading-svg" })
          ]),
          _: 1
        })
      ]);
    };
  }
});
var LoadingButton3 = _export_sfc(_sfc_main$56, [["__scopeId", "data-v-92805dfb"]]);
var _hoisted_1$44 = { class: "el-send-button" };
var _sfc_main$47 = defineComponent({
  __name: "index",
  props: {
    disabled: {
      type: Boolean,
      default: false
    }
  },
  emits: ["submit"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emits = __emit;
    return (_ctx, _cache) => {
      const _component_el_icon = ElIcon;
      const _component_el_button = ElButton;
      return openBlock(), createElementBlock("div", _hoisted_1$44, [
        createVNode(_component_el_button, {
          circle: "",
          disabled: props.disabled,
          onClick: _cache[0] || (_cache[0] = ($event) => emits("submit"))
        }, {
          default: withCtx(() => [
            createVNode(_component_el_icon, null, {
              default: withCtx(() => [
                createVNode(unref(top_default))
              ]),
              _: 1
            })
          ]),
          _: 1
        }, 8, ["disabled"])
      ]);
    };
  }
});
var _hoisted_1$34 = { class: "el-send-button" };
var _sfc_main$37 = defineComponent({
  __name: "index",
  setup(__props) {
    return (_ctx, _cache) => {
      const _component_el_icon = ElIcon;
      const _component_el_button = ElButton;
      return openBlock(), createElementBlock("div", _hoisted_1$34, [
        createVNode(_component_el_button, { circle: "" }, {
          default: withCtx(() => [
            createVNode(_component_el_icon, null, {
              default: withCtx(() => [
                createVNode(unref(microphone_default))
              ]),
              _: 1
            })
          ]),
          _: 1
        })
      ]);
    };
  }
});
var _hoisted_1$24 = ["viewBox"];
var _hoisted_2$13 = ["x", "y"];
var _hoisted_3$13 = ["values", "dur", "begin"];
var _hoisted_4$13 = ["values", "dur", "begin"];
var SIZE3 = 1e3;
var COUNT3 = 4;
var RECT_WIDTH3 = 140;
var RECT_HEIGHT_MIN3 = 250;
var RECT_HEIGHT_MAX3 = 500;
var DURATION3 = 0.8;
var _sfc_main$28 = defineComponent({
  __name: "loading",
  props: {
    className: { default: "" }
  },
  setup(__props) {
    const RECT_RADIUS = RECT_WIDTH3 / 2;
    const rects = computed(() => {
      const dest = (SIZE3 - RECT_WIDTH3 * COUNT3) / (COUNT3 - 1);
      return Array.from({ length: COUNT3 }).map((_, index) => {
        const x = index * (dest + RECT_WIDTH3);
        const yMin = SIZE3 / 2 - RECT_HEIGHT_MIN3 / 2;
        const yMax = SIZE3 / 2 - RECT_HEIGHT_MAX3 / 2;
        return { x, yMin, yMax };
      });
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("svg", {
        class: normalizeClass(_ctx.className),
        color: "currentColor",
        viewBox: `0 0 ${SIZE3} ${SIZE3}`,
        xmlns: "http://www.w3.org/2000/svg",
        "xmlns:xlink": "http://www.w3.org/1999/xlink"
      }, [
        _cache[0] || (_cache[0] = createBaseVNode("title", null, "Speech Recording", -1)),
        (openBlock(true), createElementBlock(Fragment, null, renderList(rects.value, (item, index) => {
          return openBlock(), createElementBlock("rect", {
            key: index,
            fill: "currentColor",
            rx: RECT_RADIUS,
            ry: RECT_RADIUS,
            height: RECT_HEIGHT_MIN3,
            width: RECT_WIDTH3,
            x: item.x,
            y: item.yMin
          }, [
            createBaseVNode("animate", {
              attributeName: "height",
              values: `${RECT_HEIGHT_MIN3}; ${RECT_HEIGHT_MAX3}; ${RECT_HEIGHT_MIN3}`,
              keyTimes: "0; 0.5; 1",
              dur: `${DURATION3}s`,
              begin: `${DURATION3 / COUNT3 * index}s`,
              repeatCount: "indefinite"
            }, null, 8, _hoisted_3$13),
            createBaseVNode("animate", {
              attributeName: "y",
              values: `${item.yMin}; ${item.yMax}; ${item.yMin}`,
              keyTimes: "0; 0.5; 1",
              dur: `${DURATION3}s`,
              begin: `${DURATION3 / COUNT3 * index}s`,
              repeatCount: "indefinite"
            }, null, 8, _hoisted_4$13)
          ], 8, _hoisted_2$13);
        }), 128))
      ], 10, _hoisted_1$24);
    };
  }
});
var loading3 = _export_sfc(_sfc_main$28, [["__scopeId", "data-v-8aae7435"]]);
var _hoisted_1$15 = { class: "el-send-button" };
var _sfc_main$113 = defineComponent({
  __name: "index",
  setup(__props) {
    return (_ctx, _cache) => {
      const _component_el_button = ElButton;
      return openBlock(), createElementBlock("div", _hoisted_1$15, [
        createVNode(_component_el_button, { circle: "" }, {
          default: withCtx(() => [
            createVNode(loading3, { class: "loading-svg" })
          ]),
          _: 1
        })
      ]);
    };
  }
});
var SpeechLoadingButton3 = _export_sfc(_sfc_main$113, [["__scopeId", "data-v-489e30e7"]]);
var _hoisted_111 = {
  key: 0,
  class: "el-sender-header-wrap"
};
var _hoisted_210 = {
  key: 0,
  class: "el-sender-header"
};
var _hoisted_39 = {
  key: 0,
  class: "el-sender-prefix"
};
var _hoisted_49 = {
  key: 1,
  class: "el-sender-action-list"
};
var _hoisted_58 = { class: "el-sender-action-list-presets" };
var _hoisted_67 = {
  key: 2,
  class: "el-sender-updown-wrap"
};
var _hoisted_76 = {
  key: 0,
  class: "el-sender-prefix"
};
var _hoisted_84 = { class: "el-sender-action-list" };
var _hoisted_93 = { class: "el-sender-action-list-presets" };
var _hoisted_103 = {
  key: 0,
  class: "el-sender-footer"
};
var _sfc_main21 = defineComponent({
  __name: "index",
  props: {
    modelValue: { default: "" },
    placeholder: { default: "请输入内容" },
    autoSize: { default: () => ({
      minRows: 1,
      maxRows: 6
    }) },
    readOnly: { type: Boolean },
    disabled: { type: Boolean },
    loading: { type: Boolean },
    clearable: { type: Boolean },
    allowSpeech: { type: Boolean },
    submitType: { default: "enter" },
    headerAnimationTimer: { default: 300 },
    inputWidth: { default: "100%" },
    variant: { default: "default" },
    showUpdown: { type: Boolean, default: true },
    submitBtnDisabled: { type: Boolean, default: void 0 },
    inputStyle: { default: () => {
    } },
    triggerStrings: { default: () => [] },
    triggerPopoverVisible: { type: Boolean, default: false },
    triggerPopoverWidth: { default: "fit-content" },
    triggerPopoverLeft: { default: "0px" },
    triggerPopoverOffset: { default: 8 },
    triggerPopoverPlacement: { default: "top-start" }
  },
  emits: [
    "update:modelValue",
    "update:triggerPopoverVisible",
    "submit",
    "cancel",
    "recordingChange",
    "trigger"
  ],
  setup(__props, { expose: __expose, emit: __emit }) {
    const props = __props;
    const emits = __emit;
    const slots = useSlots();
    const instance = getCurrentInstance();
    const hasOnRecordingChangeListener = computed(() => {
      var _a2;
      return !!((_a2 = instance == null ? void 0 : instance.vnode.props) == null ? void 0 : _a2.onRecordingChange);
    });
    const senderRef = ref();
    const inputRef = ref();
    const internalValue = computed({
      get() {
        return props.modelValue;
      },
      set(val) {
        if (props.readOnly || props.disabled)
          return;
        emits("update:modelValue", val);
      }
    });
    const isComposing = ref(false);
    const popoverRef = ref();
    const hasOnTriggerListener = computed(() => {
      var _a2;
      return !!((_a2 = instance == null ? void 0 : instance.vnode.props) == null ? void 0 : _a2.onTrigger);
    });
    const isSubmitDisabled = computed(() => {
      if (typeof props.submitBtnDisabled === "boolean") {
        return props.submitBtnDisabled;
      }
      return !internalValue.value;
    });
    const popoverVisible = computed({
      get() {
        return props.triggerPopoverVisible;
      },
      set(value) {
        if (props.readOnly || props.disabled)
          return;
        emits("update:triggerPopoverVisible", value);
      }
    });
    const triggerString = ref("");
    watch(
      () => internalValue.value,
      (newVal, oldVal) => {
        if (isComposing.value)
          return;
        const triggerStrings = props.triggerStrings || [];
        const validOldVal = typeof oldVal === "string" ? oldVal : "";
        const wasOldValTrigger = triggerStrings.includes(validOldVal);
        const isNewValTrigger = triggerStrings.includes(newVal);
        if (oldVal === "" && isNewValTrigger) {
          triggerString.value = newVal;
          if (hasOnTriggerListener.value) {
            emits("trigger", {
              oldValue: oldVal,
              // 关闭时返回之前触发的字符
              newValue: newVal,
              triggerString: newVal,
              isOpen: true
            });
            popoverVisible.value = true;
          } else {
            popoverVisible.value = true;
          }
        } else if (!isNewValTrigger && wasOldValTrigger) {
          if (hasOnTriggerListener.value) {
            emits("trigger", {
              oldValue: oldVal,
              // 关闭时返回之前触发的字符
              newValue: newVal,
              triggerString: void 0,
              isOpen: false
            });
            popoverVisible.value = false;
          } else {
            popoverVisible.value = false;
          }
        } else if (oldVal !== "" && isNewValTrigger && !wasOldValTrigger) {
          triggerString.value = newVal;
          if (hasOnTriggerListener.value) {
            emits("trigger", {
              oldValue: oldVal,
              // 关闭时返回之前触发的字符
              newValue: newVal,
              triggerString: newVal,
              isOpen: true
            });
            popoverVisible.value = true;
          } else {
            popoverVisible.value = true;
          }
        }
      },
      { deep: true, immediate: true }
    );
    function onContentMouseDown(e) {
      if (e.target !== senderRef.value.querySelector(`.el-textarea__inner`)) {
        e.preventDefault();
      }
      inputRef.value.focus();
    }
    const visiableHeader = ref(false);
    function openHeader() {
      if (!slots.header)
        return false;
      if (props.readOnly)
        return false;
      visiableHeader.value = true;
    }
    function closeHeader() {
      if (!slots.header)
        return;
      if (props.readOnly)
        return;
      visiableHeader.value = false;
    }
    const recognition = ref(null);
    const speechLoading = ref(false);
    function startRecognition() {
      if (props.readOnly)
        return;
      if (hasOnRecordingChangeListener.value) {
        speechLoading.value = true;
        emits("recordingChange", true);
        return;
      }
      if ("webkitSpeechRecognition" in window) {
        recognition.value = new webkitSpeechRecognition();
        recognition.value.continuous = true;
        recognition.value.interimResults = true;
        recognition.value.lang = "zh-CN";
        recognition.value.onresult = (event) => {
          let results = "";
          for (let i = 0; i <= event.resultIndex; i++) {
            results += event.results[i][0].transcript;
          }
          if (!props.readOnly) {
            internalValue.value = results;
          }
        };
        recognition.value.onstart = () => {
          speechLoading.value = true;
        };
        recognition.value.onend = () => {
          speechLoading.value = false;
        };
        recognition.value.onerror = (event) => {
          speechLoading.value = false;
        };
        recognition.value.start();
      }
    }
    function stopRecognition() {
      if (hasOnRecordingChangeListener.value) {
        speechLoading.value = false;
        emits("recordingChange", false);
        return;
      }
      if (recognition.value) {
        recognition.value.stop();
        speechLoading.value = false;
      }
    }
    function submit() {
      if (props.readOnly || props.loading || props.disabled || isSubmitDisabled.value)
        return;
      emits("submit", internalValue.value);
    }
    function cancel() {
      if (props.readOnly)
        return;
      emits("cancel", internalValue.value);
    }
    function clear() {
      if (props.readOnly)
        return;
      inputRef.value.clear();
      internalValue.value = "";
    }
    function handleKeyDown(e) {
      if (props.readOnly)
        return;
      if (props.submitType === "enter") {
        if (e.shiftKey && e.keyCode === 13) {
          e.preventDefault();
          const cursorPosition = e.target.selectionStart;
          const textBeforeCursor = internalValue.value.slice(0, cursorPosition);
          const textAfterCursor = internalValue.value.slice(cursorPosition);
          internalValue.value = `${textBeforeCursor}
${textAfterCursor}`;
          e.target.setSelectionRange(cursorPosition + 1, cursorPosition + 1);
        } else if (e.keyCode === 13 && !e.shiftKey) {
          e.preventDefault();
          submit();
        }
      } else if (props.submitType === "shiftEnter") {
        if (e.shiftKey && e.keyCode === 13) {
          e.preventDefault();
          submit();
        } else if (e.keyCode === 13 && !e.shiftKey) {
          e.preventDefault();
          const cursorPosition = e.target.selectionStart;
          const textBeforeCursor = internalValue.value.slice(0, cursorPosition);
          const textAfterCursor = internalValue.value.slice(cursorPosition);
          internalValue.value = `${textBeforeCursor}
${textAfterCursor}`;
          e.target.setSelectionRange(cursorPosition + 1, cursorPosition + 1);
        }
      }
    }
    function blur() {
      if (props.readOnly) {
        return false;
      }
      inputRef.value.blur();
    }
    function focus(type = "all") {
      if (props.readOnly) {
        return false;
      }
      if (type === "all") {
        inputRef.value.select();
      } else if (type === "start") {
        focusToStart();
      } else if (type === "end") {
        focusToEnd();
      }
    }
    function focusToStart() {
      if (inputRef.value) {
        const textarea = inputRef.value.$el.querySelector("textarea");
        if (textarea) {
          textarea.focus();
          textarea.setSelectionRange(0, 0);
        }
      }
    }
    function focusToEnd() {
      if (inputRef.value) {
        const textarea = inputRef.value.$el.querySelector("textarea");
        if (textarea) {
          textarea.focus();
          textarea.setSelectionRange(internalValue.value.length, internalValue.value.length);
        }
      }
    }
    function handleCompositionStart() {
      isComposing.value = true;
    }
    function handleCompositionEnd() {
      isComposing.value = false;
    }
    __expose({
      openHeader,
      // 打开头部
      closeHeader,
      // 关闭头部
      clear,
      // 清空输入框
      blur,
      // 失去焦点
      focus,
      // 获取焦点
      // 按钮操作
      submit,
      cancel,
      startRecognition,
      stopRecognition
    });
    return (_ctx, _cache) => {
      const _component_el_input = ElInput;
      const _component_el_popover = ElPopover;
      return openBlock(), createElementBlock("div", {
        class: "el-sender-wrap",
        style: normalizeStyle({
          "cursor": _ctx.disabled ? "not-allowed" : "default",
          "--el-sender-trigger-popover-width": props.triggerPopoverWidth,
          "--el-sender-trigger-popover-left": props.triggerPopoverLeft
        })
      }, [
        createBaseVNode("div", {
          ref_key: "senderRef",
          ref: senderRef,
          class: normalizeClass(["el-sender", {
            "el-sender-disabled": _ctx.disabled
          }]),
          style: normalizeStyle({
            "--el-box-shadow-tertiary": "0 1px 2px 0 rgba(0, 0, 0, 0.03), 0 1px 6px -1px rgba(0, 0, 0, 0.02), 0 2px 4px 0 rgba(0, 0, 0, 0.02)",
            "--el-sender-input-input-font-size": "14px",
            "--el-sender-header-animation-duration": `${_ctx.headerAnimationTimer}ms`
          })
        }, [
          createVNode(Transition, { name: "slide" }, {
            default: withCtx(() => [
              unref(visiableHeader) ? (openBlock(), createElementBlock("div", _hoisted_111, [
                _ctx.$slots.header ? (openBlock(), createElementBlock("div", _hoisted_210, [
                  renderSlot(_ctx.$slots, "header", {}, void 0, true)
                ])) : createCommentVNode("", true)
              ])) : createCommentVNode("", true)
            ]),
            _: 3
          }),
          createBaseVNode("div", {
            class: normalizeClass(["el-sender-content", { "content-variant-updown": props.variant === "updown" }]),
            onMousedown: onContentMouseDown
          }, [
            _ctx.$slots.prefix && props.variant === "default" ? (openBlock(), createElementBlock("div", _hoisted_39, [
              renderSlot(_ctx.$slots, "prefix", {}, void 0, true)
            ])) : createCommentVNode("", true),
            createVNode(_component_el_input, {
              ref_key: "inputRef",
              ref: inputRef,
              modelValue: unref(internalValue),
              "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => isRef(internalValue) ? internalValue.value = $event : null),
              class: "el-sender-input",
              "input-style": props.inputStyle || {
                "resize": "none",
                "max-height": "176px",
                "max-width": _ctx.inputWidth
              },
              rows: 1,
              autosize: _ctx.autoSize,
              type: "textarea",
              "validate-event": false,
              placeholder: _ctx.placeholder,
              "read-only": _ctx.readOnly || _ctx.disabled,
              disabled: _ctx.disabled,
              onKeydown: withModifiers(handleKeyDown, ["stop"]),
              onCompositionstart: handleCompositionStart,
              onCompositionend: handleCompositionEnd
            }, null, 8, ["modelValue", "input-style", "autosize", "placeholder", "read-only", "disabled"]),
            props.variant === "default" ? (openBlock(), createElementBlock("div", _hoisted_49, [
              renderSlot(_ctx.$slots, "action-list", {}, () => [
                createBaseVNode("div", _hoisted_58, [
                  !_ctx.loading ? (openBlock(), createBlock(unref(_sfc_main$47), {
                    key: 0,
                    disabled: unref(isSubmitDisabled),
                    onSubmit: submit
                  }, null, 8, ["disabled"])) : createCommentVNode("", true),
                  _ctx.loading ? (openBlock(), createBlock(unref(LoadingButton3), {
                    key: 1,
                    onCancel: cancel
                  })) : createCommentVNode("", true),
                  !unref(speechLoading) && _ctx.allowSpeech ? (openBlock(), createBlock(unref(_sfc_main$37), {
                    key: 2,
                    onClick: startRecognition
                  })) : createCommentVNode("", true),
                  unref(speechLoading) && _ctx.allowSpeech ? (openBlock(), createBlock(unref(SpeechLoadingButton3), {
                    key: 3,
                    onClick: stopRecognition
                  })) : createCommentVNode("", true),
                  _ctx.clearable ? (openBlock(), createBlock(unref(ClearButton3), {
                    key: 4,
                    onClear: clear
                  })) : createCommentVNode("", true)
                ])
              ], true)
            ])) : createCommentVNode("", true),
            props.variant === "updown" && props.showUpdown ? (openBlock(), createElementBlock("div", _hoisted_67, [
              _ctx.$slots.prefix ? (openBlock(), createElementBlock("div", _hoisted_76, [
                renderSlot(_ctx.$slots, "prefix", {}, void 0, true)
              ])) : createCommentVNode("", true),
              createBaseVNode("div", _hoisted_84, [
                renderSlot(_ctx.$slots, "action-list", {}, () => [
                  createBaseVNode("div", _hoisted_93, [
                    !_ctx.loading ? (openBlock(), createBlock(unref(_sfc_main$47), {
                      key: 0,
                      disabled: unref(isSubmitDisabled),
                      onSubmit: submit
                    }, null, 8, ["disabled"])) : createCommentVNode("", true),
                    _ctx.loading ? (openBlock(), createBlock(unref(LoadingButton3), {
                      key: 1,
                      onCancel: cancel
                    })) : createCommentVNode("", true),
                    !unref(speechLoading) && _ctx.allowSpeech ? (openBlock(), createBlock(unref(_sfc_main$37), {
                      key: 2,
                      onClick: startRecognition
                    })) : createCommentVNode("", true),
                    unref(speechLoading) && _ctx.allowSpeech ? (openBlock(), createBlock(unref(SpeechLoadingButton3), {
                      key: 3,
                      onClick: stopRecognition
                    })) : createCommentVNode("", true),
                    _ctx.clearable ? (openBlock(), createBlock(unref(ClearButton3), {
                      key: 4,
                      onClear: clear
                    })) : createCommentVNode("", true)
                  ])
                ], true)
              ])
            ])) : createCommentVNode("", true)
          ], 34),
          createVNode(Transition, { name: "slide" }, {
            default: withCtx(() => [
              _ctx.$slots.footer ? (openBlock(), createElementBlock("div", _hoisted_103, [
                renderSlot(_ctx.$slots, "footer", {}, void 0, true)
              ])) : createCommentVNode("", true)
            ]),
            _: 3
          })
        ], 6),
        createVNode(_component_el_popover, {
          ref_key: "popoverRef",
          ref: popoverRef,
          "virtual-ref": unref(senderRef),
          "virtual-triggering": "",
          visible: unref(popoverVisible),
          disabled: props.disabled,
          "show-arrow": false,
          placement: props.triggerPopoverPlacement,
          offset: props.triggerPopoverOffset,
          "popper-class": "el-sender-trigger-popover",
          teleported: false
        }, {
          default: withCtx(() => [
            renderSlot(_ctx.$slots, "trigger-popover", {
              triggerString: unref(triggerString),
              readonly: props.readOnly
            }, () => [
              createTextVNode(" 当前触发的字符为：" + toDisplayString(`${unref(triggerString)}`) + " 在这里定义的内容，但注意这里的回车事件将会被 输入框 覆盖 ", 1)
            ], true)
          ]),
          _: 3
        }, 8, ["virtual-ref", "visible", "disabled", "placement", "offset"])
      ], 4);
    };
  }
});
var Sender = _export_sfc(_sfc_main21, [["__scopeId", "data-v-f7fdd961"]]);

// node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/es/Thinking/index.js
import "/Users/Bone/Documents/Github/AI-RagFLow-Api/node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/index5.css";
var _hoisted_112 = ["disabled"];
var _hoisted_211 = { class: "status-icon" };
var _hoisted_310 = { class: "label" };
var _hoisted_410 = { class: "content" };
var _hoisted_59 = { class: "error-message" };
var _sfc_main22 = defineComponent({
  __name: "index",
  props: {
    modelValue: { type: Boolean, default: true },
    content: { default: "" },
    status: { default: "start" },
    disabled: { type: Boolean, default: false },
    autoCollapse: { type: Boolean, default: false },
    duration: { default: "0.2s" },
    buttonWidth: { default: "160px" },
    maxWidth: { default: "500px" },
    backgroundColor: { default: "#fcfcfc" },
    color: { default: "var(--el-color-info)" }
  },
  emits: ["change", "update:expanded"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emit = __emit;
    const isExpanded = ref(props.modelValue);
    watch(() => props.modelValue, (newVal) => {
      isExpanded.value = newVal;
    });
    function changeExpand() {
      if (props.disabled)
        return;
      isExpanded.value = !isExpanded.value;
      emit("change", { value: isExpanded.value, status: props.status });
      emit("update:expanded", isExpanded.value);
    }
    const displayedContent = computed(() => {
      return props.status === "error" ? "思考过程中出现错误" : props.content;
    });
    watch(() => props.status, (newVal) => {
      if (newVal === "end" && props.autoCollapse) {
        isExpanded.value = false;
      }
    });
    return (_ctx, _cache) => {
      const _component_el_icon = ElIcon;
      return openBlock(), createElementBlock("div", {
        class: "el-thinking",
        style: normalizeStyle({
          "--el-thinking-button-width": props.buttonWidth,
          "--el-thinking-animation-duration": props.duration,
          "--el-thinking-content-wrapper-width": props.maxWidth,
          "--el-thinking-content-wrapper-background-color": props.backgroundColor,
          "--el-thinking-content-wrapper-color": props.color
        })
      }, [
        createBaseVNode("button", {
          class: normalizeClass(["trigger", [_ctx.status, { disabled: !props.disabled }]]),
          disabled: props.disabled,
          onClick: changeExpand
        }, [
          createBaseVNode("span", _hoisted_211, [
            renderSlot(_ctx.$slots, "status-icon", {
              status: props.status
            }, () => [
              _ctx.status === "thinking" ? (openBlock(), createBlock(_component_el_icon, {
                key: 0,
                class: "is-loading el-icon-center"
              }, {
                default: withCtx(() => [
                  createVNode(unref(loading_default))
                ]),
                _: 1
              })) : createCommentVNode("", true),
              _ctx.status === "start" ? (openBlock(), createBlock(_component_el_icon, {
                key: 1,
                class: "el-icon-center start-color"
              }, {
                default: withCtx(() => [
                  createVNode(unref(opportunity_default))
                ]),
                _: 1
              })) : createCommentVNode("", true),
              _ctx.status === "end" ? (openBlock(), createBlock(_component_el_icon, {
                key: 2,
                class: "el-icon-center end-color"
              }, {
                default: withCtx(() => [
                  createVNode(unref(success_filled_default))
                ]),
                _: 1
              })) : createCommentVNode("", true),
              _ctx.status === "error" ? (openBlock(), createBlock(_component_el_icon, {
                key: 3,
                class: "el-icon-center error-color"
              }, {
                default: withCtx(() => [
                  createVNode(unref(circle_close_filled_default))
                ]),
                _: 1
              })) : createCommentVNode("", true)
            ], true)
          ]),
          createBaseVNode("span", _hoisted_310, [
            renderSlot(_ctx.$slots, "label", {
              status: props.status
            }, () => [
              createTextVNode(toDisplayString(_ctx.status === "thinking" ? "思考中..." : _ctx.status === "error" ? "思考遇到问题" : _ctx.status === "end" ? "思考完成" : "开始思考"), 1)
            ], true)
          ]),
          createVNode(Transition, { name: "rotate" }, {
            default: withCtx(() => [
              !props.disabled ? (openBlock(), createElementBlock("span", {
                key: 0,
                class: normalizeClass(["arrow el-icon-center", { expanded: unref(isExpanded) }])
              }, [
                renderSlot(_ctx.$slots, "arrow", {}, () => [
                  createVNode(_component_el_icon, { class: "el-icon-center" }, {
                    default: withCtx(() => [
                      createVNode(unref(arrow_up_bold_default))
                    ]),
                    _: 1
                  })
                ], true)
              ], 2)) : createCommentVNode("", true)
            ]),
            _: 3
          })
        ], 10, _hoisted_112),
        createVNode(Transition, { name: "slide" }, {
          default: withCtx(() => [
            unref(displayedContent) ? withDirectives((openBlock(), createElementBlock("div", {
              key: 0,
              class: normalizeClass(["content-wrapper", { "error-state": _ctx.status === "error" }])
            }, [
              createBaseVNode("div", _hoisted_410, [
                _ctx.status !== "error" ? renderSlot(_ctx.$slots, "content", {
                  key: 0,
                  content: unref(displayedContent)
                }, () => [
                  createBaseVNode("pre", null, toDisplayString(unref(displayedContent)), 1)
                ], true) : renderSlot(_ctx.$slots, "error", {
                  key: 1,
                  errorContent: unref(displayedContent)
                }, () => [
                  createBaseVNode("div", _hoisted_59, toDisplayString(unref(displayedContent)), 1)
                ], true)
              ])
            ], 2)), [
              [vShow, unref(isExpanded)]
            ]) : createCommentVNode("", true)
          ]),
          _: 3
        })
      ], 4);
    };
  }
});
var Thinking = _export_sfc(_sfc_main22, [["__scopeId", "data-v-5eb92e73"]]);

// node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/es/ThoughtChain/index.js
import "/Users/Bone/Documents/Github/AI-RagFLow-Api/node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/index6.css";
import "/Users/Bone/Documents/Github/AI-RagFLow-Api/node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/index5.css";
import "/Users/Bone/Documents/Github/AI-RagFLow-Api/node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/index11.css";
import "/Users/Bone/Documents/Github/AI-RagFLow-Api/node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/index4.css";
import "/Users/Bone/Documents/Github/AI-RagFLow-Api/node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/index12.css";
import "/Users/Bone/Documents/Github/AI-RagFLow-Api/node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/index2.css";
import "/Users/Bone/Documents/Github/AI-RagFLow-Api/node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/index10.css";
import "/Users/Bone/Documents/Github/AI-RagFLow-Api/node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/el-popover.css";
import "/Users/Bone/Documents/Github/AI-RagFLow-Api/node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/index3.css";
import "/Users/Bone/Documents/Github/AI-RagFLow-Api/node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/el-popper.css";
import "/Users/Bone/Documents/Github/AI-RagFLow-Api/node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/index.css";
import "/Users/Bone/Documents/Github/AI-RagFLow-Api/node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/index8.css";
import "/Users/Bone/Documents/Github/AI-RagFLow-Api/node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/el-image-viewer.css";
import "/Users/Bone/Documents/Github/AI-RagFLow-Api/node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/index9.css";
import "/Users/Bone/Documents/Github/AI-RagFLow-Api/node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/index7.css";
import "/Users/Bone/Documents/Github/AI-RagFLow-Api/node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/es/ThoughtChain/index.css";
var emitChangeFn = (value) => isNumber(value) || isString$1(value) || isArray2(value);
var collapseProps = buildProps({
  accordion: Boolean,
  modelValue: {
    type: definePropType([Array, String, Number]),
    default: () => mutable([])
  }
});
var collapseEmits = {
  [UPDATE_MODEL_EVENT]: emitChangeFn,
  [CHANGE_EVENT]: emitChangeFn
};
var collapseContextKey = Symbol("collapseContextKey");
var useCollapse = (props, emit) => {
  const activeNames = ref(castArray(props.modelValue));
  const setActiveNames = (_activeNames) => {
    activeNames.value = _activeNames;
    const value = props.accordion ? activeNames.value[0] : activeNames.value;
    emit(UPDATE_MODEL_EVENT, value);
    emit(CHANGE_EVENT, value);
  };
  const handleItemClick = (name) => {
    if (props.accordion) {
      setActiveNames([activeNames.value[0] === name ? "" : name]);
    } else {
      const _activeNames = [...activeNames.value];
      const index = _activeNames.indexOf(name);
      if (index > -1) {
        _activeNames.splice(index, 1);
      } else {
        _activeNames.push(name);
      }
      setActiveNames(_activeNames);
    }
  };
  watch(() => props.modelValue, () => activeNames.value = castArray(props.modelValue), { deep: true });
  provide(collapseContextKey, {
    activeNames,
    handleItemClick
  });
  return {
    activeNames,
    setActiveNames
  };
};
var useCollapseDOM = () => {
  const ns = useNamespace("collapse");
  const rootKls = computed(() => ns.b());
  return {
    rootKls
  };
};
var __default__$33 = defineComponent({
  name: "ElCollapse"
});
var _sfc_main$48 = defineComponent({
  ...__default__$33,
  props: collapseProps,
  emits: collapseEmits,
  setup(__props, { expose, emit }) {
    const props = __props;
    const { activeNames, setActiveNames } = useCollapse(props, emit);
    const { rootKls } = useCollapseDOM();
    expose({
      activeNames,
      setActiveNames
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(unref(rootKls))
      }, [
        renderSlot(_ctx.$slots, "default")
      ], 2);
    };
  }
});
var Collapse = _export_sfc2(_sfc_main$48, [["__file", "collapse.vue"]]);
var __default__$23 = defineComponent({
  name: "ElCollapseTransition"
});
var _sfc_main$38 = defineComponent({
  ...__default__$23,
  setup(__props) {
    const ns = useNamespace("collapse-transition");
    const reset = (el) => {
      el.style.maxHeight = "";
      el.style.overflow = el.dataset.oldOverflow;
      el.style.paddingTop = el.dataset.oldPaddingTop;
      el.style.paddingBottom = el.dataset.oldPaddingBottom;
    };
    const on2 = {
      beforeEnter(el) {
        if (!el.dataset)
          el.dataset = {};
        el.dataset.oldPaddingTop = el.style.paddingTop;
        el.dataset.oldPaddingBottom = el.style.paddingBottom;
        if (el.style.height)
          el.dataset.elExistsHeight = el.style.height;
        el.style.maxHeight = 0;
        el.style.paddingTop = 0;
        el.style.paddingBottom = 0;
      },
      enter(el) {
        requestAnimationFrame(() => {
          el.dataset.oldOverflow = el.style.overflow;
          if (el.dataset.elExistsHeight) {
            el.style.maxHeight = el.dataset.elExistsHeight;
          } else if (el.scrollHeight !== 0) {
            el.style.maxHeight = `${el.scrollHeight}px`;
          } else {
            el.style.maxHeight = 0;
          }
          el.style.paddingTop = el.dataset.oldPaddingTop;
          el.style.paddingBottom = el.dataset.oldPaddingBottom;
          el.style.overflow = "hidden";
        });
      },
      afterEnter(el) {
        el.style.maxHeight = "";
        el.style.overflow = el.dataset.oldOverflow;
      },
      enterCancelled(el) {
        reset(el);
      },
      beforeLeave(el) {
        if (!el.dataset)
          el.dataset = {};
        el.dataset.oldPaddingTop = el.style.paddingTop;
        el.dataset.oldPaddingBottom = el.style.paddingBottom;
        el.dataset.oldOverflow = el.style.overflow;
        el.style.maxHeight = `${el.scrollHeight}px`;
        el.style.overflow = "hidden";
      },
      leave(el) {
        if (el.scrollHeight !== 0) {
          el.style.maxHeight = 0;
          el.style.paddingTop = 0;
          el.style.paddingBottom = 0;
        }
      },
      afterLeave(el) {
        reset(el);
      },
      leaveCancelled(el) {
        reset(el);
      }
    };
    return (_ctx, _cache) => {
      return openBlock(), createBlock(Transition, mergeProps({
        name: unref(ns).b()
      }, toHandlers(on2)), {
        default: withCtx(() => [
          renderSlot(_ctx.$slots, "default")
        ]),
        _: 3
      }, 16, ["name"]);
    };
  }
});
var CollapseTransition = _export_sfc2(_sfc_main$38, [["__file", "collapse-transition.vue"]]);
var ElCollapseTransition = withInstall(CollapseTransition);
var collapseItemProps = buildProps({
  title: {
    type: String,
    default: ""
  },
  name: {
    type: definePropType([String, Number]),
    default: void 0
  },
  icon: {
    type: iconPropType,
    default: arrow_right_default
  },
  disabled: Boolean
});
var useCollapseItem = (props) => {
  const collapse = inject(collapseContextKey);
  const { namespace } = useNamespace("collapse");
  const focusing = ref(false);
  const isClick = ref(false);
  const idInjection = useIdInjection();
  const id = computed(() => idInjection.current++);
  const name = computed(() => {
    var _a2;
    return (_a2 = props.name) != null ? _a2 : `${namespace.value}-id-${idInjection.prefix}-${unref(id)}`;
  });
  const isActive = computed(() => collapse == null ? void 0 : collapse.activeNames.value.includes(unref(name)));
  const handleFocus = () => {
    setTimeout(() => {
      if (!isClick.value) {
        focusing.value = true;
      } else {
        isClick.value = false;
      }
    }, 50);
  };
  const handleHeaderClick = () => {
    if (props.disabled)
      return;
    collapse == null ? void 0 : collapse.handleItemClick(unref(name));
    focusing.value = false;
    isClick.value = true;
  };
  const handleEnterClick = () => {
    collapse == null ? void 0 : collapse.handleItemClick(unref(name));
  };
  return {
    focusing,
    id,
    isActive,
    handleFocus,
    handleHeaderClick,
    handleEnterClick
  };
};
var useCollapseItemDOM = (props, { focusing, isActive, id }) => {
  const ns = useNamespace("collapse");
  const rootKls = computed(() => [
    ns.b("item"),
    ns.is("active", unref(isActive)),
    ns.is("disabled", props.disabled)
  ]);
  const headKls = computed(() => [
    ns.be("item", "header"),
    ns.is("active", unref(isActive)),
    { focusing: unref(focusing) && !props.disabled }
  ]);
  const arrowKls = computed(() => [
    ns.be("item", "arrow"),
    ns.is("active", unref(isActive))
  ]);
  const itemWrapperKls = computed(() => ns.be("item", "wrap"));
  const itemContentKls = computed(() => ns.be("item", "content"));
  const scopedContentId = computed(() => ns.b(`content-${unref(id)}`));
  const scopedHeadId = computed(() => ns.b(`head-${unref(id)}`));
  return {
    arrowKls,
    headKls,
    rootKls,
    itemWrapperKls,
    itemContentKls,
    scopedContentId,
    scopedHeadId
  };
};
var __default__$16 = defineComponent({
  name: "ElCollapseItem"
});
var _sfc_main$29 = defineComponent({
  ...__default__$16,
  props: collapseItemProps,
  setup(__props, { expose }) {
    const props = __props;
    const {
      focusing,
      id,
      isActive,
      handleFocus,
      handleHeaderClick,
      handleEnterClick
    } = useCollapseItem(props);
    const {
      arrowKls,
      headKls,
      rootKls,
      itemWrapperKls,
      itemContentKls,
      scopedContentId,
      scopedHeadId
    } = useCollapseItemDOM(props, { focusing, isActive, id });
    expose({
      isActive
    });
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(unref(rootKls))
      }, [
        createBaseVNode("button", {
          id: unref(scopedHeadId),
          class: normalizeClass(unref(headKls)),
          "aria-expanded": unref(isActive),
          "aria-controls": unref(scopedContentId),
          "aria-describedby": unref(scopedContentId),
          tabindex: _ctx.disabled ? -1 : 0,
          type: "button",
          onClick: unref(handleHeaderClick),
          onKeydown: withKeys(withModifiers(unref(handleEnterClick), ["stop", "prevent"]), ["space", "enter"]),
          onFocus: unref(handleFocus),
          onBlur: ($event) => focusing.value = false
        }, [
          renderSlot(_ctx.$slots, "title", {}, () => [
            createTextVNode(toDisplayString(_ctx.title), 1)
          ]),
          renderSlot(_ctx.$slots, "icon", { isActive: unref(isActive) }, () => [
            createVNode(unref(ElIcon), {
              class: normalizeClass(unref(arrowKls))
            }, {
              default: withCtx(() => [
                (openBlock(), createBlock(resolveDynamicComponent(_ctx.icon)))
              ]),
              _: 1
            }, 8, ["class"])
          ])
        ], 42, ["id", "aria-expanded", "aria-controls", "aria-describedby", "tabindex", "onClick", "onKeydown", "onFocus", "onBlur"]),
        createVNode(unref(ElCollapseTransition), null, {
          default: withCtx(() => [
            withDirectives(createBaseVNode("div", {
              id: unref(scopedContentId),
              role: "region",
              class: normalizeClass(unref(itemWrapperKls)),
              "aria-hidden": !unref(isActive),
              "aria-labelledby": unref(scopedHeadId)
            }, [
              createBaseVNode("div", {
                class: normalizeClass(unref(itemContentKls))
              }, [
                renderSlot(_ctx.$slots, "default")
              ], 2)
            ], 10, ["id", "aria-hidden", "aria-labelledby"]), [
              [vShow, unref(isActive)]
            ])
          ]),
          _: 3
        })
      ], 2);
    };
  }
});
var CollapseItem = _export_sfc2(_sfc_main$29, [["__file", "collapse-item.vue"]]);
var ElCollapse = withInstall(Collapse, {
  CollapseItem
});
var ElCollapseItem = withNoopInstall(CollapseItem);
var Timeline = defineComponent({
  name: "ElTimeline",
  setup(_, { slots }) {
    const ns = useNamespace("timeline");
    provide("timeline", slots);
    return () => {
      return h("ul", { class: [ns.b()] }, [renderSlot(slots, "default")]);
    };
  }
});
var timelineItemProps = buildProps({
  timestamp: {
    type: String,
    default: ""
  },
  hideTimestamp: Boolean,
  center: Boolean,
  placement: {
    type: String,
    values: ["top", "bottom"],
    default: "bottom"
  },
  type: {
    type: String,
    values: ["primary", "success", "warning", "danger", "info"],
    default: ""
  },
  color: {
    type: String,
    default: ""
  },
  size: {
    type: String,
    values: ["normal", "large"],
    default: "normal"
  },
  icon: {
    type: iconPropType
  },
  hollow: Boolean
});
var __default__12 = defineComponent({
  name: "ElTimelineItem"
});
var _sfc_main$114 = defineComponent({
  ...__default__12,
  props: timelineItemProps,
  setup(__props) {
    const props = __props;
    const ns = useNamespace("timeline-item");
    const defaultNodeKls = computed(() => [
      ns.e("node"),
      ns.em("node", props.size || ""),
      ns.em("node", props.type || ""),
      ns.is("hollow", props.hollow)
    ]);
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("li", {
        class: normalizeClass([unref(ns).b(), { [unref(ns).e("center")]: _ctx.center }])
      }, [
        createBaseVNode("div", {
          class: normalizeClass(unref(ns).e("tail"))
        }, null, 2),
        !_ctx.$slots.dot ? (openBlock(), createElementBlock("div", {
          key: 0,
          class: normalizeClass(unref(defaultNodeKls)),
          style: normalizeStyle({
            backgroundColor: _ctx.color
          })
        }, [
          _ctx.icon ? (openBlock(), createBlock(unref(ElIcon), {
            key: 0,
            class: normalizeClass(unref(ns).e("icon"))
          }, {
            default: withCtx(() => [
              (openBlock(), createBlock(resolveDynamicComponent(_ctx.icon)))
            ]),
            _: 1
          }, 8, ["class"])) : createCommentVNode("v-if", true)
        ], 6)) : createCommentVNode("v-if", true),
        _ctx.$slots.dot ? (openBlock(), createElementBlock("div", {
          key: 1,
          class: normalizeClass(unref(ns).e("dot"))
        }, [
          renderSlot(_ctx.$slots, "dot")
        ], 2)) : createCommentVNode("v-if", true),
        createBaseVNode("div", {
          class: normalizeClass(unref(ns).e("wrapper"))
        }, [
          !_ctx.hideTimestamp && _ctx.placement === "top" ? (openBlock(), createElementBlock("div", {
            key: 0,
            class: normalizeClass([unref(ns).e("timestamp"), unref(ns).is("top")])
          }, toDisplayString(_ctx.timestamp), 3)) : createCommentVNode("v-if", true),
          createBaseVNode("div", {
            class: normalizeClass(unref(ns).e("content"))
          }, [
            renderSlot(_ctx.$slots, "default")
          ], 2),
          !_ctx.hideTimestamp && _ctx.placement === "bottom" ? (openBlock(), createElementBlock("div", {
            key: 1,
            class: normalizeClass([unref(ns).e("timestamp"), unref(ns).is("bottom")])
          }, toDisplayString(_ctx.timestamp), 3)) : createCommentVNode("v-if", true)
        ], 2)
      ], 2);
    };
  }
});
var TimelineItem = _export_sfc2(_sfc_main$114, [["__file", "timeline-item.vue"]]);
var ElTimeline = withInstall(Timeline, {
  TimelineItem
});
var ElTimelineItem = withNoopInstall(TimelineItem);
var _hoisted_113 = { class: "el-thought-chain" };
var _hoisted_212 = { key: 0 };
var _hoisted_311 = { class: "el-thought-chain-item-dot" };
var _sfc_main23 = defineComponent({
  __name: "index",
  props: {
    thinkingItems: { default: () => [] },
    rowKey: { default: "id" },
    titleKey: { default: "title" },
    thinkTitleKey: { default: "thinkTitle" },
    thinkContentKey: { default: "thinkContent" },
    statusKey: { default: "status" },
    statusEnum: { default: () => ({
      loading: {
        value: "loading",
        type: "warning"
      },
      error: {
        value: "error",
        type: "danger"
      },
      success: {
        value: "success",
        type: "success"
      }
    }) },
    dotSize: { default: "default" },
    maxWidth: { default: "600px" },
    lineGradient: { type: Boolean, default: false },
    mdPlugins: {}
  },
  emits: ["handleExpand"],
  setup(__props, { emit: __emit }) {
    useCssVars((_ctx) => ({
      "a9c299d2": dotMargin.value
    }));
    const props = __props;
    const emits = __emit;
    const dotMargin = computed(() => {
      switch (props.dotSize) {
        case "small":
          return "-4px 0 0 -7px";
        case "large":
          return "-11px 0 0 -15px";
        default:
          return "-8px 0 0 -11px";
      }
    });
    const colorArr = {
      info: "var(--el-color-primary)",
      success: "var(--el-color-success)",
      warning: "var(--el-color-warning)",
      danger: "var(--el-color-danger)",
      primary: "var(--el-color-primary)"
    };
    const timelineRef = ref();
    const getLineColor = computed(() => {
      if (props.thinkingItems.length) {
        const arr = props.thinkingItems.map((item) => {
          const _type_ = getType(item);
          if (_type_) {
            return colorArr[_type_];
          }
          return "";
        });
        return arr;
      }
      return [];
    });
    const activeNamesComputed = computed(
      () => props.thinkingItems.filter((item) => item.isCanExpand && item.isDefaultExpand).map((item) => String(getId(item)))
    );
    const defaultActiveNodes = ref([...activeNamesComputed.value]);
    function handleExpand(item) {
      emits("handleExpand", item);
    }
    function setRadialGradient(colors, ele) {
      const length = ele.length;
      Array.from(ele).forEach((item, index) => {
        const line = item.children[0];
        if (line) {
          line.setAttribute("style", `
      border: none;
      width:2px;
      background: linear-gradient(to bottom, ${colors[index]} 0% , ${colors[index < length ? index + 1 : index]} 100%);
    `);
        }
      });
    }
    function getEle() {
      if (getLineColor.value && timelineRef.value && props.lineGradient) {
        const ele = timelineRef.value.$el.children[0].children;
        setRadialGradient(getLineColor.value, ele);
      }
    }
    function isLoading(item) {
      const status = getStatus(item);
      return status === props.statusEnum.loading.value;
    }
    function isError(item) {
      const status = getStatus(item);
      return status === props.statusEnum.error.value;
    }
    function getId(item) {
      return get2(item, props.rowKey);
    }
    function getType(item) {
      var _a2;
      const status = getStatus(item);
      return ((_a2 = props.statusEnum[status]) == null ? void 0 : _a2.type) ?? "success";
    }
    function getTitle(item) {
      return get2(item, props.titleKey) ?? "";
    }
    function getThinkTitle(item) {
      return get2(item, props.thinkTitleKey) ?? "";
    }
    function getThinkContent(item) {
      return get2(item, props.thinkContentKey) ?? "";
    }
    function getStatus(item) {
      return get2(item, props.statusKey);
    }
    watch(() => activeNamesComputed.value, (v) => {
      defaultActiveNodes.value = [...v];
    });
    watch(() => getLineColor.value, () => {
      getEle();
    });
    onMounted(() => {
      getEle();
    });
    return (_ctx, _cache) => {
      const _component_el_collapse_item = ElCollapseItem;
      const _component_el_collapse = ElCollapse;
      const _component_el_icon = ElIcon;
      const _component_el_button = ElButton;
      const _component_el_timeline_item = ElTimelineItem;
      const _component_el_timeline = ElTimeline;
      return openBlock(), createElementBlock("div", _hoisted_113, [
        createVNode(_component_el_timeline, {
          ref_key: "timelineRef",
          ref: timelineRef,
          style: normalizeStyle({
            maxWidth: `${_ctx.maxWidth}`
          })
        }, {
          default: withCtx(() => [
            createVNode(TransitionGroup, {
              name: "thought-chain",
              tag: "el-timeline-item"
            }, {
              default: withCtx(() => [
                (openBlock(true), createElementBlock(Fragment, null, renderList(props.thinkingItems, (item) => {
                  return openBlock(), createBlock(_component_el_timeline_item, {
                    key: getId(item),
                    type: getType(item),
                    timestamp: getTitle(item),
                    "hide-timestamp": item.hideTitle,
                    placement: item.placement ?? "top"
                  }, {
                    dot: withCtx(() => [
                      createBaseVNode("div", _hoisted_311, [
                        renderSlot(_ctx.$slots, "icon", { item }, () => [
                          createVNode(_component_el_button, {
                            circle: "",
                            type: getType(item),
                            loading: isLoading(item),
                            size: _ctx.dotSize
                          }, {
                            loading: withCtx(() => [
                              createVNode(_component_el_icon, { class: "thought-chain-loading" }, {
                                default: withCtx(() => [
                                  createVNode(unref(loading_default))
                                ]),
                                _: 1
                              })
                            ]),
                            icon: withCtx(() => [
                              !isLoading(item) ? (openBlock(), createBlock(_component_el_icon, { key: 0 }, {
                                default: withCtx(() => [
                                  isError(item) ? (openBlock(), createBlock(unref(close_default), { key: 0 })) : (openBlock(), createBlock(unref(check_default), { key: 1 }))
                                ]),
                                _: 2
                              }, 1024)) : createCommentVNode("", true)
                            ]),
                            _: 2
                          }, 1032, ["type", "loading", "size"])
                        ], true)
                      ])
                    ]),
                    default: withCtx(() => [
                      !item.isCanExpand ? (openBlock(), createElementBlock("div", _hoisted_212, [
                        createVNode(unref(Typewriter), {
                          content: getThinkTitle(item),
                          "is-markdown": item.isMarkdown,
                          typing: item.typing
                        }, null, 8, ["content", "is-markdown", "typing"])
                      ])) : !item.isDefaultExpand ? (openBlock(), createBlock(_component_el_collapse, {
                        key: 1,
                        onChange: ($event) => handleExpand(item)
                      }, {
                        default: withCtx(() => [
                          createVNode(_component_el_collapse_item, {
                            title: getThinkTitle(item)
                          }, {
                            default: withCtx(() => [
                              createVNode(unref(Typewriter), {
                                content: getThinkContent(item),
                                "is-markdown": item.isMarkdown,
                                typing: item.typing
                              }, null, 8, ["content", "is-markdown", "typing"])
                            ]),
                            _: 2
                          }, 1032, ["title"])
                        ]),
                        _: 2
                      }, 1032, ["onChange"])) : item.isDefaultExpand ? (openBlock(), createBlock(_component_el_collapse, {
                        key: 2,
                        modelValue: defaultActiveNodes.value,
                        "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => defaultActiveNodes.value = $event),
                        onChange: ($event) => handleExpand(item)
                      }, {
                        default: withCtx(() => [
                          createVNode(_component_el_collapse_item, {
                            title: getThinkTitle(item),
                            name: String(getId(item))
                          }, {
                            default: withCtx(() => [
                              createVNode(unref(Typewriter), {
                                content: getThinkContent(item),
                                "is-markdown": item.isMarkdown,
                                typing: item.typing
                              }, null, 8, ["content", "is-markdown", "typing"])
                            ]),
                            _: 2
                          }, 1032, ["title", "name"])
                        ]),
                        _: 2
                      }, 1032, ["modelValue", "onChange"])) : createCommentVNode("", true)
                    ]),
                    _: 2
                  }, 1032, ["type", "timestamp", "hide-timestamp", "placement"]);
                }), 128))
              ]),
              _: 3
            })
          ]),
          _: 3
        }, 8, ["style"])
      ]);
    };
  }
});
var ThoughtChain = _export_sfc(_sfc_main23, [["__scopeId", "data-v-f176ff77"]]);

// node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/es/Welcome/index.js
import "/Users/Bone/Documents/Github/AI-RagFLow-Api/node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/index6.css";
import "/Users/Bone/Documents/Github/AI-RagFLow-Api/node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/el-image-viewer.css";
var _hoisted_114 = { class: "content-wrapper" };
var _hoisted_213 = {
  key: 0,
  class: "title-wrapper"
};
var _sfc_main24 = defineComponent({
  __name: "index",
  props: {
    prefixCls: {},
    rootClassName: {},
    className: {},
    style: {},
    variant: { default: "filled" },
    classNames: {},
    styles: {},
    icon: {},
    title: {},
    description: {},
    extra: {},
    direction: { default: "ltr" }
  },
  setup(__props) {
    const props = __props;
    const solts = useSlots();
    const { prefixCls, className, rootClassName, variant, direction, classNames, icon, title, extra, description, style, styles } = toRefs(props);
    function getContainerClass() {
      return [
        prefixCls.value || "welcome",
        className.value,
        rootClassName.value,
        `welcome-${variant.value}`,
        {
          "welcome-rtl": direction.value === "rtl"
        }
      ];
    }
    const getIconClass = () => {
      var _a2;
      return (_a2 = classNames.value) == null ? void 0 : _a2.icon;
    };
    const getTitleClass = () => {
      var _a2;
      return (_a2 = classNames.value) == null ? void 0 : _a2.title;
    };
    const getExtraClass = () => {
      var _a2;
      return (_a2 = classNames.value) == null ? void 0 : _a2.extra;
    };
    const getDescriptionClass = () => {
      var _a2;
      return (_a2 = classNames.value) == null ? void 0 : _a2.description;
    };
    const hasIcon = computed(() => !!icon.value);
    const hasTitleOrExtra = computed(() => !!title.value || !!extra.value);
    const hasExtraOrSlot = computed(() => !!extra.value || !!solts.extra);
    const hasDescription = computed(() => !!description.value);
    const containerClass = computed(getContainerClass);
    const iconClass = computed(getIconClass);
    const titleClass = computed(getTitleClass);
    const extraClass = computed(getExtraClass);
    const descriptionClass = computed(getDescriptionClass);
    return (_ctx, _cache) => {
      var _a2, _b, _c;
      const _component_el_image = ElImage;
      return openBlock(), createElementBlock("div", {
        class: normalizeClass([unref(containerClass), "welcome-container"]),
        style: normalizeStyle(unref(style))
      }, [
        renderSlot(_ctx.$slots, "image", {}, () => {
          var _a22;
          return [
            unref(hasIcon) ? (openBlock(), createElementBlock("div", {
              key: 0,
              class: normalizeClass([unref(iconClass), "welcome-icon"]),
              style: normalizeStyle((_a22 = unref(styles)) == null ? void 0 : _a22.icon)
            }, [
              createVNode(_component_el_image, {
                src: unref(icon),
                class: "icon-image"
              }, null, 8, ["src"])
            ], 6)) : createCommentVNode("", true)
          ];
        }, true),
        createBaseVNode("div", _hoisted_114, [
          unref(hasTitleOrExtra) ? (openBlock(), createElementBlock("div", _hoisted_213, [
            unref(title) ? (openBlock(), createElementBlock("div", {
              key: 0,
              class: normalizeClass([unref(titleClass), "welcome-title"]),
              style: normalizeStyle((_a2 = unref(styles)) == null ? void 0 : _a2.title)
            }, toDisplayString(unref(title)), 7)) : createCommentVNode("", true),
            unref(hasExtraOrSlot) ? (openBlock(), createElementBlock("div", {
              key: 1,
              class: normalizeClass([unref(extraClass), "welcome-extra"]),
              style: normalizeStyle((_b = unref(styles)) == null ? void 0 : _b.extra)
            }, [
              renderSlot(_ctx.$slots, "extra", {}, () => [
                createTextVNode(toDisplayString(unref(extra)), 1)
              ], true)
            ], 6)) : createCommentVNode("", true)
          ])) : createCommentVNode("", true),
          unref(hasDescription) ? (openBlock(), createElementBlock("div", {
            key: 1,
            class: normalizeClass([unref(descriptionClass), "welcome-description"]),
            style: normalizeStyle((_c = unref(styles)) == null ? void 0 : _c.description)
          }, toDisplayString(unref(description)), 7)) : createCommentVNode("", true)
        ])
      ], 6);
    };
  }
});
var Welcome = _export_sfc(_sfc_main24, [["__scopeId", "data-v-69444db2"]]);

// node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/es/hooks/useRecord.js
function useRecord({
  onError,
  onStart,
  onEnd,
  onResult
} = {}) {
  const loading4 = ref(false);
  const recognition = ref(null);
  const value = ref("");
  const start = () => {
    if ("webkitSpeechRecognition" in window) {
      recognition.value = new webkitSpeechRecognition();
      recognition.value.continuous = true;
      recognition.value.interimResults = true;
      recognition.value.lang = "zh-CN";
      recognition.value.onstart = () => {
        loading4.value = true;
        value.value = "";
        onStart == null ? void 0 : onStart();
      };
      recognition.value.onend = () => {
        loading4.value = false;
        onEnd == null ? void 0 : onEnd(value.value);
      };
      recognition.value.onerror = (e) => {
        loading4.value = false;
        onError == null ? void 0 : onError(e);
      };
      recognition.value.onresult = (e) => {
        let results = "";
        for (let i = 0; i <= e.resultIndex; i++) {
          results += e.results[i][0].transcript;
        }
        value.value = results;
        onResult == null ? void 0 : onResult(results);
      };
      recognition.value.start();
    } else {
      onError == null ? void 0 : onError({
        code: -1,
        message: "The current browser does not support voice recognition"
      });
    }
  };
  const stop = () => {
    if (recognition.value) {
      recognition.value.stop();
    }
  };
  onUnmounted(() => {
    stop();
    recognition.value = null;
  });
  return {
    loading: loading4,
    start,
    stop,
    value
  };
}

// node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/es/hooks/useSend.js
var __typeError = (msg) => {
  throw TypeError(msg);
};
var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
var __privateGet = (obj, member, getter) => (__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
var __privateAdd = (obj, member, value) => member.has(obj) ? __typeError("Cannot add the same private member more than once") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
var __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
var __privateMethod = (obj, member, method) => (__accessCheck(obj, member, "access private method"), method);
var _instance;
var _transformer;
var _baseURL;
var _baseOptions;
var _onAbort;
var _onMessage;
var _onError;
var _onOpen;
var _type;
var _controller;
var _onFinish;
var _messages;
var _XRequest_instances;
var sendWithFetch_fn;
var sendWithSSE_fn;
var XRequest = class {
  constructor({ baseURL, onAbort, onMessage, onError, baseOptions, transformer, type, onFinish, ...props } = {}) {
    __privateAdd(this, _XRequest_instances);
    __privateAdd(this, _instance, null);
    __privateAdd(this, _transformer);
    __privateAdd(this, _baseURL);
    __privateAdd(this, _baseOptions);
    __privateAdd(this, _onAbort);
    __privateAdd(this, _onMessage);
    __privateAdd(this, _onError);
    __privateAdd(this, _onOpen);
    __privateAdd(this, _type, "sse");
    __privateAdd(this, _controller, null);
    __privateAdd(this, _onFinish);
    __privateAdd(this, _messages, []);
    __privateSet(this, _baseURL, baseURL ?? "");
    __privateSet(this, _baseOptions, baseOptions ?? {});
    onAbort && __privateSet(this, _onAbort, onAbort);
    onMessage && __privateSet(this, _onMessage, onMessage);
    onError && __privateSet(this, _onError, onError);
    onFinish && __privateSet(this, _onFinish, onFinish);
    props.onOpen && __privateSet(this, _onOpen, props.onOpen);
    transformer && __privateSet(this, _transformer, transformer);
    type && __privateSet(this, _type, type);
    this.abort = this.abort.bind(this);
    this.send = this.send.bind(this);
  }
  send(url, options = {}) {
    switch (__privateGet(this, _type)) {
      case "fetch":
        __privateMethod(this, _XRequest_instances, sendWithFetch_fn).call(this, url, options);
        break;
      default:
        __privateMethod(this, _XRequest_instances, sendWithSSE_fn).call(this, url, options);
    }
    return this;
  }
  abort() {
    var _a2, _b, _c, _d;
    (_b = (_a2 = __privateGet(this, _instance)) == null ? void 0 : _a2.close) == null ? void 0 : _b.call(_a2);
    __privateSet(this, _instance, null);
    (_c = __privateGet(this, _controller)) == null ? void 0 : _c.abort();
    __privateSet(this, _controller, null);
    (_d = __privateGet(this, _onAbort)) == null ? void 0 : _d.call(this, __privateGet(this, _messages));
    __privateSet(this, _messages, []);
  }
};
_instance = /* @__PURE__ */ new WeakMap();
_transformer = /* @__PURE__ */ new WeakMap();
_baseURL = /* @__PURE__ */ new WeakMap();
_baseOptions = /* @__PURE__ */ new WeakMap();
_onAbort = /* @__PURE__ */ new WeakMap();
_onMessage = /* @__PURE__ */ new WeakMap();
_onError = /* @__PURE__ */ new WeakMap();
_onOpen = /* @__PURE__ */ new WeakMap();
_type = /* @__PURE__ */ new WeakMap();
_controller = /* @__PURE__ */ new WeakMap();
_onFinish = /* @__PURE__ */ new WeakMap();
_messages = /* @__PURE__ */ new WeakMap();
_XRequest_instances = /* @__PURE__ */ new WeakSet();
sendWithFetch_fn = function(url, options = {}) {
  __privateSet(this, _controller, new AbortController());
  const signal = __privateGet(this, _controller).signal;
  const fetchOptions = {
    ...options,
    signal
  };
  return fetch(__privateGet(this, _baseURL) + url, fetchOptions).then((res) => res.body).then(async (body) => {
    var _a2, _b, _c, _d;
    if (!body)
      return Promise.reject(new Error("Response body is null in stream mode"));
    const reader = body.getReader();
    const decoder = new TextDecoder("utf-8");
    let done = false;
    while (!done) {
      const { value, done: streamDone } = await reader.read();
      done = streamDone;
      if (streamDone) {
        (_a2 = __privateGet(this, _onFinish)) == null ? void 0 : _a2.call(this, __privateGet(this, _messages));
        return;
      }
      if (value) {
        const chunk = decoder.decode(value, { stream: true });
        const chunkUse = chunk.startsWith("data: ") ? chunk.slice(6) : chunk;
        try {
          const res = __privateGet(this, _transformer) ? __privateGet(this, _transformer).call(this, chunkUse) : chunkUse;
          __privateGet(this, _messages).push(res);
          (_b = __privateGet(this, _onMessage)) == null ? void 0 : _b.call(this, res);
        } catch (error) {
          (_c = __privateGet(this, _onError)) == null ? void 0 : _c.call(this, error);
          (_d = __privateGet(this, _controller)) == null ? void 0 : _d.abort();
          return Promise.reject(error);
        }
      }
    }
  }).catch((err) => {
    var _a2, _b, _c;
    if (err.name === "AbortError") {
      (_a2 = __privateGet(this, _onAbort)) == null ? void 0 : _a2.call(this, __privateGet(this, _messages));
      return;
    }
    (_b = __privateGet(this, _onError)) == null ? void 0 : _b.call(this, err);
    (_c = __privateGet(this, _controller)) == null ? void 0 : _c.abort();
  });
};
sendWithSSE_fn = function(url, options = {}) {
  const es = new EventSource(__privateGet(this, _baseURL) + url, { ...__privateGet(this, _baseOptions), ...options });
  es.onmessage = (e) => {
    var _a2;
    const res = __privateGet(this, _transformer) ? __privateGet(this, _transformer).call(this, e.data) : e;
    (_a2 = __privateGet(this, _onMessage)) == null ? void 0 : _a2.call(this, res);
  };
  es.onopen = () => {
    var _a2;
    (_a2 = __privateGet(this, _onOpen)) == null ? void 0 : _a2.call(this);
  };
  es.onerror = (ev) => {
    var _a2, _b;
    if (es.readyState === EventSource.CLOSED) {
      (_a2 = __privateGet(this, _onFinish)) == null ? void 0 : _a2.call(this, __privateGet(this, _messages));
    } else {
      (_b = __privateGet(this, _onError)) == null ? void 0 : _b.call(this, es, ev);
    }
    this.abort();
  };
  __privateSet(this, _instance, es);
  return es;
};
function useSend({ onAbort, sendHandler, abortHandler } = {}) {
  const loading4 = ref(false);
  const handleSend = (...args) => {
    if (loading4.value)
      return;
    sendHandler == null ? void 0 : sendHandler(...args);
    loading4.value = true;
  };
  const handleAbort = () => {
    loading4.value = false;
    abortHandler == null ? void 0 : abortHandler();
    onAbort == null ? void 0 : onAbort();
  };
  const handleFinish = () => {
    loading4.value = false;
  };
  return {
    loading: loading4,
    abort: handleAbort,
    send: handleSend,
    finish: handleFinish
  };
}

// node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/es/hooks/useXStream.js
var DEFAULT_STREAM_SEPARATOR = "\n\n";
var DEFAULT_PART_SEPARATOR = "\n";
var DEFAULT_KV_SEPARATOR = ":";
var isValidString = (str) => (str ?? "").trim() !== "";
function splitStream() {
  let buffer = "";
  return new TransformStream({
    transform(chunk, controller) {
      buffer += chunk;
      const parts = buffer.split(DEFAULT_STREAM_SEPARATOR);
      parts.slice(0, -1).forEach((part) => {
        if (isValidString(part))
          controller.enqueue(part);
      });
      buffer = parts[parts.length - 1];
    },
    flush(controller) {
      if (isValidString(buffer))
        controller.enqueue(buffer);
    }
  });
}
function splitPart() {
  return new TransformStream({
    transform(partChunk, controller) {
      const lines = partChunk.split(DEFAULT_PART_SEPARATOR);
      const sseEvent = lines.reduce((acc, line) => {
        const sepIndex = line.indexOf(DEFAULT_KV_SEPARATOR);
        if (sepIndex === -1)
          return acc;
        const key = line.slice(0, sepIndex);
        if (!isValidString(key))
          return acc;
        const value = line.slice(sepIndex + 1);
        return { ...acc, [key]: value };
      }, {});
      if (Object.keys(sseEvent).length > 0)
        controller.enqueue(sseEvent);
    }
  });
}
function XStream(options, signal) {
  const { readableStream, transformStream } = options;
  if (!(readableStream instanceof ReadableStream)) {
    throw new TypeError("options.readableStream 必须是 ReadableStream 的实例。");
  }
  const decoderStream = new TextDecoderStream();
  const processedStream = transformStream ? readableStream.pipeThrough(decoderStream).pipeThrough(transformStream) : readableStream.pipeThrough(decoderStream).pipeThrough(splitStream()).pipeThrough(splitPart());
  processedStream[Symbol.asyncIterator] = async function* () {
    const reader = this.getReader();
    this.reader = reader;
    try {
      while (true) {
        if (signal == null ? void 0 : signal.aborted) {
          await reader.cancel();
          break;
        }
        const { done, value } = await reader.read();
        if (done)
          break;
        if (value)
          yield value;
      }
    } finally {
      reader.releaseLock();
    }
  };
  return processedStream;
}
function useXStream() {
  const data = ref([]);
  const error = ref(null);
  const isLoading = ref(false);
  const abortController = shallowRef(null);
  const currentStream = shallowRef(null);
  const startStream = async (options) => {
    isLoading.value = true;
    error.value = null;
    data.value = [];
    abortController.value = new AbortController();
    currentStream.value = XStream(options, abortController.value.signal);
    try {
      for await (const item of currentStream.value) {
        data.value.push(item);
      }
    } catch (err) {
      if (err instanceof Error) {
        error.value = err;
      }
    } finally {
      isLoading.value = false;
      currentStream.value = null;
      abortController.value = null;
    }
  };
  const cancel = () => {
    if (abortController.value) {
      abortController.value.abort();
    }
  };
  return {
    startStream,
    cancel,
    // 新增中断方法
    data,
    error,
    isLoading
  };
}

// node_modules/.pnpm/vue-element-plus-x@1.2.0_markdown-it@14.1.0_mermaid@11.12.0_typescript-api-pro@0.0.7_typescript@5.8.3/node_modules/vue-element-plus-x/dist/es/index.js
var ElementPlusX = {
  install(app) {
    app.component("Attachments", Attachments);
    app.component("Bubble", Bubble);
    app.component("BubbleList", BubbleList);
    app.component("Conversations", Conversations);
    app.component("EditorInput", EditorInput);
    app.component("EditorSender", EditorSender);
    app.component("FilesCard", FilesCard);
    app.component("MentionSender", MentionSender);
    app.component("Prompts", Prompts);
    app.component("Sender", Sender);
    app.component("Thinking", Thinking);
    app.component("ThoughtChain", ThoughtChain);
    app.component("Typewriter", Typewriter);
    app.component("Welcome", Welcome);
  }
};
export {
  Attachments,
  Bubble,
  BubbleList,
  Conversations,
  EditorInput,
  EditorSender,
  FilesCard,
  MentionSender,
  Prompts,
  Sender,
  Thinking,
  ThoughtChain,
  Typewriter,
  Welcome,
  XRequest,
  ElementPlusX as default,
  usePrism,
  useRecord,
  useSend,
  useXStream
};
/*! Bundled license information:

vue-element-plus-x/dist/base-BXVDO6W4.js:
  (**
  * @vue/shared v3.5.13
  * (c) 2018-present Yuxi (Evan) You and Vue contributors
  * @license MIT
  **)

vue-element-plus-x/dist/index-CnlpUR18.js:
  (*! Element Plus Icons Vue v2.3.1 *)
*/
//# sourceMappingURL=vue-element-plus-x.js.map
